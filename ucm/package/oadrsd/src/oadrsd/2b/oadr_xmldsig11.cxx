// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#include <xsd/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include "oadr_xmldsig11.hxx"

namespace oadr2b
{
  namespace dsig11
  {
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace oadr2b
{
  namespace dsig11
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace oadr2b
{
  namespace dsig11
  {
    ::std::auto_ptr< ::oadr2b::dsig11::ECKeyValueType >
    ECKeyValue (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::ECKeyValueType > (
        ::oadr2b::dsig11::ECKeyValue (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::ECKeyValueType >
    ECKeyValue (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::ECKeyValueType > (
        ::oadr2b::dsig11::ECKeyValue (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::ECKeyValueType >
    ECKeyValue (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::ECKeyValueType > (
        ::oadr2b::dsig11::ECKeyValue (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::ECKeyValueType >
    ECKeyValue (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::dsig11::ECKeyValue (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::ECKeyValueType >
    ECKeyValue (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::dsig11::ECKeyValue (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::ECKeyValueType >
    ECKeyValue (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::dsig11::ECKeyValue (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::ECKeyValueType >
    ECKeyValue (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::dsig11::ECKeyValue (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::ECKeyValueType >
    ECKeyValue (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::dsig11::ECKeyValue (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::ECKeyValueType >
    ECKeyValue (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::dsig11::ECKeyValue (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::ECKeyValueType >
    ECKeyValue (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::ECKeyValueType > (
        ::oadr2b::dsig11::ECKeyValue (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::ECKeyValueType >
    ECKeyValue (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::ECKeyValueType > (
        ::oadr2b::dsig11::ECKeyValue (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::ECKeyValueType >
    ECKeyValue (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::ECKeyValueType > (
        ::oadr2b::dsig11::ECKeyValue (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::ECKeyValueType >
    ECKeyValue (const ::xercesc::DOMDocument& doc,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::dsig11::ECKeyValueType > (
          ::oadr2b::dsig11::ECKeyValue (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "ECKeyValue",
          "http://www.w3.org/2009/xmldsig11#",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::dsig11::ECKeyValueType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::dsig11::ECKeyValueType > r (
          dynamic_cast< ::oadr2b::dsig11::ECKeyValueType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ECKeyValue",
        "http://www.w3.org/2009/xmldsig11#");
    }

    ::std::auto_ptr< ::oadr2b::dsig11::ECKeyValueType >
    ECKeyValue (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "ECKeyValue",
          "http://www.w3.org/2009/xmldsig11#",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::dsig11::ECKeyValueType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::dsig11::ECKeyValueType > r (
          dynamic_cast< ::oadr2b::dsig11::ECKeyValueType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ECKeyValue",
        "http://www.w3.org/2009/xmldsig11#");
    }

    ::std::auto_ptr< ::oadr2b::dsig11::PrimeFieldParamsType >
    Prime (const ::std::string& u,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::PrimeFieldParamsType > (
        ::oadr2b::dsig11::Prime (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::PrimeFieldParamsType >
    Prime (const ::std::string& u,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::PrimeFieldParamsType > (
        ::oadr2b::dsig11::Prime (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::PrimeFieldParamsType >
    Prime (const ::std::string& u,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::PrimeFieldParamsType > (
        ::oadr2b::dsig11::Prime (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::PrimeFieldParamsType >
    Prime (::std::istream& is,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::dsig11::Prime (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::PrimeFieldParamsType >
    Prime (::std::istream& is,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::dsig11::Prime (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::PrimeFieldParamsType >
    Prime (::std::istream& is,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::dsig11::Prime (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::PrimeFieldParamsType >
    Prime (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::dsig11::Prime (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::PrimeFieldParamsType >
    Prime (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::dsig11::Prime (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::PrimeFieldParamsType >
    Prime (::std::istream& is,
           const ::std::string& sid,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::dsig11::Prime (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::PrimeFieldParamsType >
    Prime (::xercesc::InputSource& i,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::PrimeFieldParamsType > (
        ::oadr2b::dsig11::Prime (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::PrimeFieldParamsType >
    Prime (::xercesc::InputSource& i,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::PrimeFieldParamsType > (
        ::oadr2b::dsig11::Prime (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::PrimeFieldParamsType >
    Prime (::xercesc::InputSource& i,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::PrimeFieldParamsType > (
        ::oadr2b::dsig11::Prime (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::PrimeFieldParamsType >
    Prime (const ::xercesc::DOMDocument& doc,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::dsig11::PrimeFieldParamsType > (
          ::oadr2b::dsig11::Prime (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Prime",
          "http://www.w3.org/2009/xmldsig11#",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::dsig11::PrimeFieldParamsType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::dsig11::PrimeFieldParamsType > r (
          dynamic_cast< ::oadr2b::dsig11::PrimeFieldParamsType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Prime",
        "http://www.w3.org/2009/xmldsig11#");
    }

    ::std::auto_ptr< ::oadr2b::dsig11::PrimeFieldParamsType >
    Prime (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
           ::xml_schema::flags f,
           const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Prime",
          "http://www.w3.org/2009/xmldsig11#",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::dsig11::PrimeFieldParamsType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::dsig11::PrimeFieldParamsType > r (
          dynamic_cast< ::oadr2b::dsig11::PrimeFieldParamsType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Prime",
        "http://www.w3.org/2009/xmldsig11#");
    }

    ::std::auto_ptr< ::oadr2b::dsig11::CharTwoFieldParamsType >
    GnB (const ::std::string& u,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::CharTwoFieldParamsType > (
        ::oadr2b::dsig11::GnB (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::CharTwoFieldParamsType >
    GnB (const ::std::string& u,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::CharTwoFieldParamsType > (
        ::oadr2b::dsig11::GnB (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::CharTwoFieldParamsType >
    GnB (const ::std::string& u,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::CharTwoFieldParamsType > (
        ::oadr2b::dsig11::GnB (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::CharTwoFieldParamsType >
    GnB (::std::istream& is,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::dsig11::GnB (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::CharTwoFieldParamsType >
    GnB (::std::istream& is,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::dsig11::GnB (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::CharTwoFieldParamsType >
    GnB (::std::istream& is,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::dsig11::GnB (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::CharTwoFieldParamsType >
    GnB (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::dsig11::GnB (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::CharTwoFieldParamsType >
    GnB (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::dsig11::GnB (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::CharTwoFieldParamsType >
    GnB (::std::istream& is,
         const ::std::string& sid,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::dsig11::GnB (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::CharTwoFieldParamsType >
    GnB (::xercesc::InputSource& i,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::CharTwoFieldParamsType > (
        ::oadr2b::dsig11::GnB (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::CharTwoFieldParamsType >
    GnB (::xercesc::InputSource& i,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::CharTwoFieldParamsType > (
        ::oadr2b::dsig11::GnB (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::CharTwoFieldParamsType >
    GnB (::xercesc::InputSource& i,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::CharTwoFieldParamsType > (
        ::oadr2b::dsig11::GnB (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::CharTwoFieldParamsType >
    GnB (const ::xercesc::DOMDocument& doc,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::dsig11::CharTwoFieldParamsType > (
          ::oadr2b::dsig11::GnB (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "GnB",
          "http://www.w3.org/2009/xmldsig11#",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::dsig11::CharTwoFieldParamsType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::dsig11::CharTwoFieldParamsType > r (
          dynamic_cast< ::oadr2b::dsig11::CharTwoFieldParamsType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "GnB",
        "http://www.w3.org/2009/xmldsig11#");
    }

    ::std::auto_ptr< ::oadr2b::dsig11::CharTwoFieldParamsType >
    GnB (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::flags f,
         const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "GnB",
          "http://www.w3.org/2009/xmldsig11#",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::dsig11::CharTwoFieldParamsType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::dsig11::CharTwoFieldParamsType > r (
          dynamic_cast< ::oadr2b::dsig11::CharTwoFieldParamsType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "GnB",
        "http://www.w3.org/2009/xmldsig11#");
    }

    ::std::auto_ptr< ::oadr2b::dsig11::TnBFieldParamsType >
    TnB (const ::std::string& u,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::TnBFieldParamsType > (
        ::oadr2b::dsig11::TnB (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::TnBFieldParamsType >
    TnB (const ::std::string& u,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::TnBFieldParamsType > (
        ::oadr2b::dsig11::TnB (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::TnBFieldParamsType >
    TnB (const ::std::string& u,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::TnBFieldParamsType > (
        ::oadr2b::dsig11::TnB (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::TnBFieldParamsType >
    TnB (::std::istream& is,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::dsig11::TnB (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::TnBFieldParamsType >
    TnB (::std::istream& is,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::dsig11::TnB (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::TnBFieldParamsType >
    TnB (::std::istream& is,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::dsig11::TnB (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::TnBFieldParamsType >
    TnB (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::dsig11::TnB (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::TnBFieldParamsType >
    TnB (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::dsig11::TnB (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::TnBFieldParamsType >
    TnB (::std::istream& is,
         const ::std::string& sid,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::dsig11::TnB (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::TnBFieldParamsType >
    TnB (::xercesc::InputSource& i,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::TnBFieldParamsType > (
        ::oadr2b::dsig11::TnB (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::TnBFieldParamsType >
    TnB (::xercesc::InputSource& i,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::TnBFieldParamsType > (
        ::oadr2b::dsig11::TnB (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::TnBFieldParamsType >
    TnB (::xercesc::InputSource& i,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::TnBFieldParamsType > (
        ::oadr2b::dsig11::TnB (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::TnBFieldParamsType >
    TnB (const ::xercesc::DOMDocument& doc,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::dsig11::TnBFieldParamsType > (
          ::oadr2b::dsig11::TnB (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "TnB",
          "http://www.w3.org/2009/xmldsig11#",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::dsig11::TnBFieldParamsType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::dsig11::TnBFieldParamsType > r (
          dynamic_cast< ::oadr2b::dsig11::TnBFieldParamsType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "TnB",
        "http://www.w3.org/2009/xmldsig11#");
    }

    ::std::auto_ptr< ::oadr2b::dsig11::TnBFieldParamsType >
    TnB (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::flags f,
         const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "TnB",
          "http://www.w3.org/2009/xmldsig11#",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::dsig11::TnBFieldParamsType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::dsig11::TnBFieldParamsType > r (
          dynamic_cast< ::oadr2b::dsig11::TnBFieldParamsType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "TnB",
        "http://www.w3.org/2009/xmldsig11#");
    }

    ::std::auto_ptr< ::oadr2b::dsig11::PnBFieldParamsType >
    PnB (const ::std::string& u,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::PnBFieldParamsType > (
        ::oadr2b::dsig11::PnB (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::PnBFieldParamsType >
    PnB (const ::std::string& u,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::PnBFieldParamsType > (
        ::oadr2b::dsig11::PnB (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::PnBFieldParamsType >
    PnB (const ::std::string& u,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::PnBFieldParamsType > (
        ::oadr2b::dsig11::PnB (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::PnBFieldParamsType >
    PnB (::std::istream& is,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::dsig11::PnB (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::PnBFieldParamsType >
    PnB (::std::istream& is,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::dsig11::PnB (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::PnBFieldParamsType >
    PnB (::std::istream& is,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::dsig11::PnB (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::PnBFieldParamsType >
    PnB (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::dsig11::PnB (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::PnBFieldParamsType >
    PnB (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::dsig11::PnB (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::PnBFieldParamsType >
    PnB (::std::istream& is,
         const ::std::string& sid,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::dsig11::PnB (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::PnBFieldParamsType >
    PnB (::xercesc::InputSource& i,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::PnBFieldParamsType > (
        ::oadr2b::dsig11::PnB (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::PnBFieldParamsType >
    PnB (::xercesc::InputSource& i,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::PnBFieldParamsType > (
        ::oadr2b::dsig11::PnB (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::PnBFieldParamsType >
    PnB (::xercesc::InputSource& i,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::PnBFieldParamsType > (
        ::oadr2b::dsig11::PnB (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::PnBFieldParamsType >
    PnB (const ::xercesc::DOMDocument& doc,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::dsig11::PnBFieldParamsType > (
          ::oadr2b::dsig11::PnB (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "PnB",
          "http://www.w3.org/2009/xmldsig11#",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::dsig11::PnBFieldParamsType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::dsig11::PnBFieldParamsType > r (
          dynamic_cast< ::oadr2b::dsig11::PnBFieldParamsType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PnB",
        "http://www.w3.org/2009/xmldsig11#");
    }

    ::std::auto_ptr< ::oadr2b::dsig11::PnBFieldParamsType >
    PnB (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
         ::xml_schema::flags f,
         const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "PnB",
          "http://www.w3.org/2009/xmldsig11#",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::dsig11::PnBFieldParamsType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::dsig11::PnBFieldParamsType > r (
          dynamic_cast< ::oadr2b::dsig11::PnBFieldParamsType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PnB",
        "http://www.w3.org/2009/xmldsig11#");
    }

    ::std::auto_ptr< ::oadr2b::dsig11::DEREncodedKeyValueType >
    DEREncodedKeyValue (const ::std::string& u,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::DEREncodedKeyValueType > (
        ::oadr2b::dsig11::DEREncodedKeyValue (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::DEREncodedKeyValueType >
    DEREncodedKeyValue (const ::std::string& u,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::DEREncodedKeyValueType > (
        ::oadr2b::dsig11::DEREncodedKeyValue (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::DEREncodedKeyValueType >
    DEREncodedKeyValue (const ::std::string& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::DEREncodedKeyValueType > (
        ::oadr2b::dsig11::DEREncodedKeyValue (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::DEREncodedKeyValueType >
    DEREncodedKeyValue (::std::istream& is,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::dsig11::DEREncodedKeyValue (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::DEREncodedKeyValueType >
    DEREncodedKeyValue (::std::istream& is,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::dsig11::DEREncodedKeyValue (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::DEREncodedKeyValueType >
    DEREncodedKeyValue (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::dsig11::DEREncodedKeyValue (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::DEREncodedKeyValueType >
    DEREncodedKeyValue (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::dsig11::DEREncodedKeyValue (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::DEREncodedKeyValueType >
    DEREncodedKeyValue (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::dsig11::DEREncodedKeyValue (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::DEREncodedKeyValueType >
    DEREncodedKeyValue (::std::istream& is,
                        const ::std::string& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::dsig11::DEREncodedKeyValue (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::DEREncodedKeyValueType >
    DEREncodedKeyValue (::xercesc::InputSource& i,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::DEREncodedKeyValueType > (
        ::oadr2b::dsig11::DEREncodedKeyValue (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::DEREncodedKeyValueType >
    DEREncodedKeyValue (::xercesc::InputSource& i,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::DEREncodedKeyValueType > (
        ::oadr2b::dsig11::DEREncodedKeyValue (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::DEREncodedKeyValueType >
    DEREncodedKeyValue (::xercesc::InputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::DEREncodedKeyValueType > (
        ::oadr2b::dsig11::DEREncodedKeyValue (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::DEREncodedKeyValueType >
    DEREncodedKeyValue (const ::xercesc::DOMDocument& doc,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::dsig11::DEREncodedKeyValueType > (
          ::oadr2b::dsig11::DEREncodedKeyValue (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "DEREncodedKeyValue",
          "http://www.w3.org/2009/xmldsig11#",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::dsig11::DEREncodedKeyValueType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::dsig11::DEREncodedKeyValueType > r (
          dynamic_cast< ::oadr2b::dsig11::DEREncodedKeyValueType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DEREncodedKeyValue",
        "http://www.w3.org/2009/xmldsig11#");
    }

    ::std::auto_ptr< ::oadr2b::dsig11::DEREncodedKeyValueType >
    DEREncodedKeyValue (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "DEREncodedKeyValue",
          "http://www.w3.org/2009/xmldsig11#",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::dsig11::DEREncodedKeyValueType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::dsig11::DEREncodedKeyValueType > r (
          dynamic_cast< ::oadr2b::dsig11::DEREncodedKeyValueType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DEREncodedKeyValue",
        "http://www.w3.org/2009/xmldsig11#");
    }

    ::std::auto_ptr< ::oadr2b::dsig11::KeyInfoReferenceType >
    KeyInfoReference (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::KeyInfoReferenceType > (
        ::oadr2b::dsig11::KeyInfoReference (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::KeyInfoReferenceType >
    KeyInfoReference (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::KeyInfoReferenceType > (
        ::oadr2b::dsig11::KeyInfoReference (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::KeyInfoReferenceType >
    KeyInfoReference (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::KeyInfoReferenceType > (
        ::oadr2b::dsig11::KeyInfoReference (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::KeyInfoReferenceType >
    KeyInfoReference (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::dsig11::KeyInfoReference (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::KeyInfoReferenceType >
    KeyInfoReference (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::dsig11::KeyInfoReference (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::KeyInfoReferenceType >
    KeyInfoReference (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::dsig11::KeyInfoReference (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::KeyInfoReferenceType >
    KeyInfoReference (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::dsig11::KeyInfoReference (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::KeyInfoReferenceType >
    KeyInfoReference (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::dsig11::KeyInfoReference (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::KeyInfoReferenceType >
    KeyInfoReference (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::dsig11::KeyInfoReference (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::KeyInfoReferenceType >
    KeyInfoReference (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::KeyInfoReferenceType > (
        ::oadr2b::dsig11::KeyInfoReference (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::KeyInfoReferenceType >
    KeyInfoReference (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::KeyInfoReferenceType > (
        ::oadr2b::dsig11::KeyInfoReference (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::KeyInfoReferenceType >
    KeyInfoReference (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::KeyInfoReferenceType > (
        ::oadr2b::dsig11::KeyInfoReference (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::KeyInfoReferenceType >
    KeyInfoReference (const ::xercesc::DOMDocument& doc,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::dsig11::KeyInfoReferenceType > (
          ::oadr2b::dsig11::KeyInfoReference (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "KeyInfoReference",
          "http://www.w3.org/2009/xmldsig11#",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::dsig11::KeyInfoReferenceType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::dsig11::KeyInfoReferenceType > r (
          dynamic_cast< ::oadr2b::dsig11::KeyInfoReferenceType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "KeyInfoReference",
        "http://www.w3.org/2009/xmldsig11#");
    }

    ::std::auto_ptr< ::oadr2b::dsig11::KeyInfoReferenceType >
    KeyInfoReference (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "KeyInfoReference",
          "http://www.w3.org/2009/xmldsig11#",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::dsig11::KeyInfoReferenceType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::dsig11::KeyInfoReferenceType > r (
          dynamic_cast< ::oadr2b::dsig11::KeyInfoReferenceType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "KeyInfoReference",
        "http://www.w3.org/2009/xmldsig11#");
    }

    ::std::auto_ptr< ::oadr2b::dsig11::X509DigestType >
    X509Digest (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::X509DigestType > (
        ::oadr2b::dsig11::X509Digest (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::X509DigestType >
    X509Digest (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::X509DigestType > (
        ::oadr2b::dsig11::X509Digest (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::X509DigestType >
    X509Digest (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::X509DigestType > (
        ::oadr2b::dsig11::X509Digest (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::X509DigestType >
    X509Digest (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::dsig11::X509Digest (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::X509DigestType >
    X509Digest (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::dsig11::X509Digest (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::X509DigestType >
    X509Digest (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::dsig11::X509Digest (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::X509DigestType >
    X509Digest (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::dsig11::X509Digest (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::X509DigestType >
    X509Digest (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::dsig11::X509Digest (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::X509DigestType >
    X509Digest (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::dsig11::X509Digest (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::dsig11::X509DigestType >
    X509Digest (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::X509DigestType > (
        ::oadr2b::dsig11::X509Digest (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::X509DigestType >
    X509Digest (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::X509DigestType > (
        ::oadr2b::dsig11::X509Digest (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::X509DigestType >
    X509Digest (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::dsig11::X509DigestType > (
        ::oadr2b::dsig11::X509Digest (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::dsig11::X509DigestType >
    X509Digest (const ::xercesc::DOMDocument& doc,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::dsig11::X509DigestType > (
          ::oadr2b::dsig11::X509Digest (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "X509Digest",
          "http://www.w3.org/2009/xmldsig11#",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::dsig11::X509DigestType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::dsig11::X509DigestType > r (
          dynamic_cast< ::oadr2b::dsig11::X509DigestType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "X509Digest",
        "http://www.w3.org/2009/xmldsig11#");
    }

    ::std::auto_ptr< ::oadr2b::dsig11::X509DigestType >
    X509Digest (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "X509Digest",
          "http://www.w3.org/2009/xmldsig11#",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::dsig11::X509DigestType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::dsig11::X509DigestType > r (
          dynamic_cast< ::oadr2b::dsig11::X509DigestType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "X509Digest",
        "http://www.w3.org/2009/xmldsig11#");
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace oadr2b
{
  namespace dsig11
  {
    void
    ECKeyValue (::std::ostream& o,
                const ::oadr2b::dsig11::ECKeyValueType& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::ECKeyValue (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    ECKeyValue (::std::ostream& o,
                const ::oadr2b::dsig11::ECKeyValueType& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::ECKeyValue (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ECKeyValue (::std::ostream& o,
                const ::oadr2b::dsig11::ECKeyValueType& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::ECKeyValue (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ECKeyValue (::xercesc::XMLFormatTarget& t,
                const ::oadr2b::dsig11::ECKeyValueType& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::ECKeyValue (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    ECKeyValue (::xercesc::XMLFormatTarget& t,
                const ::oadr2b::dsig11::ECKeyValueType& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::ECKeyValue (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ECKeyValue (::xercesc::XMLFormatTarget& t,
                const ::oadr2b::dsig11::ECKeyValueType& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::ECKeyValue (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    ECKeyValue (::xercesc::DOMDocument& d,
                const ::oadr2b::dsig11::ECKeyValueType& s,
                ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::dsig11::ECKeyValueType) == typeid (s))
      {
        if (n.name () == "ECKeyValue" &&
            n.namespace_ () == "http://www.w3.org/2009/xmldsig11#")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "ECKeyValue",
            "http://www.w3.org/2009/xmldsig11#");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "ECKeyValue",
          "http://www.w3.org/2009/xmldsig11#",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ECKeyValue (const ::oadr2b::dsig11::ECKeyValueType& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::dsig11::ECKeyValueType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "ECKeyValue",
          "http://www.w3.org/2009/xmldsig11#",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "ECKeyValue",
          "http://www.w3.org/2009/xmldsig11#",
          m, s, f);
      }

      ::oadr2b::dsig11::ECKeyValue (*d, s, f);
      return d;
    }

    void
    Prime (::std::ostream& o,
           const ::oadr2b::dsig11::PrimeFieldParamsType& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::Prime (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    Prime (::std::ostream& o,
           const ::oadr2b::dsig11::PrimeFieldParamsType& s,
           ::xml_schema::error_handler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::Prime (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    Prime (::std::ostream& o,
           const ::oadr2b::dsig11::PrimeFieldParamsType& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::Prime (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    Prime (::xercesc::XMLFormatTarget& t,
           const ::oadr2b::dsig11::PrimeFieldParamsType& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::Prime (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    Prime (::xercesc::XMLFormatTarget& t,
           const ::oadr2b::dsig11::PrimeFieldParamsType& s,
           ::xml_schema::error_handler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::Prime (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    Prime (::xercesc::XMLFormatTarget& t,
           const ::oadr2b::dsig11::PrimeFieldParamsType& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::Prime (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    Prime (::xercesc::DOMDocument& d,
           const ::oadr2b::dsig11::PrimeFieldParamsType& s,
           ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::dsig11::PrimeFieldParamsType) == typeid (s))
      {
        if (n.name () == "Prime" &&
            n.namespace_ () == "http://www.w3.org/2009/xmldsig11#")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Prime",
            "http://www.w3.org/2009/xmldsig11#");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "Prime",
          "http://www.w3.org/2009/xmldsig11#",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Prime (const ::oadr2b::dsig11::PrimeFieldParamsType& s,
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::dsig11::PrimeFieldParamsType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "Prime",
          "http://www.w3.org/2009/xmldsig11#",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "Prime",
          "http://www.w3.org/2009/xmldsig11#",
          m, s, f);
      }

      ::oadr2b::dsig11::Prime (*d, s, f);
      return d;
    }

    void
    GnB (::std::ostream& o,
         const ::oadr2b::dsig11::CharTwoFieldParamsType& s,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::GnB (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    GnB (::std::ostream& o,
         const ::oadr2b::dsig11::CharTwoFieldParamsType& s,
         ::xml_schema::error_handler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::GnB (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    GnB (::std::ostream& o,
         const ::oadr2b::dsig11::CharTwoFieldParamsType& s,
         ::xercesc::DOMErrorHandler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::GnB (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    GnB (::xercesc::XMLFormatTarget& t,
         const ::oadr2b::dsig11::CharTwoFieldParamsType& s,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::GnB (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    GnB (::xercesc::XMLFormatTarget& t,
         const ::oadr2b::dsig11::CharTwoFieldParamsType& s,
         ::xml_schema::error_handler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::GnB (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    GnB (::xercesc::XMLFormatTarget& t,
         const ::oadr2b::dsig11::CharTwoFieldParamsType& s,
         ::xercesc::DOMErrorHandler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::GnB (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    GnB (::xercesc::DOMDocument& d,
         const ::oadr2b::dsig11::CharTwoFieldParamsType& s,
         ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::dsig11::CharTwoFieldParamsType) == typeid (s))
      {
        if (n.name () == "GnB" &&
            n.namespace_ () == "http://www.w3.org/2009/xmldsig11#")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "GnB",
            "http://www.w3.org/2009/xmldsig11#");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "GnB",
          "http://www.w3.org/2009/xmldsig11#",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    GnB (const ::oadr2b::dsig11::CharTwoFieldParamsType& s,
         const ::xml_schema::namespace_infomap& m,
         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::dsig11::CharTwoFieldParamsType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "GnB",
          "http://www.w3.org/2009/xmldsig11#",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "GnB",
          "http://www.w3.org/2009/xmldsig11#",
          m, s, f);
      }

      ::oadr2b::dsig11::GnB (*d, s, f);
      return d;
    }

    void
    TnB (::std::ostream& o,
         const ::oadr2b::dsig11::TnBFieldParamsType& s,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::TnB (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    TnB (::std::ostream& o,
         const ::oadr2b::dsig11::TnBFieldParamsType& s,
         ::xml_schema::error_handler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::TnB (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    TnB (::std::ostream& o,
         const ::oadr2b::dsig11::TnBFieldParamsType& s,
         ::xercesc::DOMErrorHandler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::TnB (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    TnB (::xercesc::XMLFormatTarget& t,
         const ::oadr2b::dsig11::TnBFieldParamsType& s,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::TnB (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    TnB (::xercesc::XMLFormatTarget& t,
         const ::oadr2b::dsig11::TnBFieldParamsType& s,
         ::xml_schema::error_handler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::TnB (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    TnB (::xercesc::XMLFormatTarget& t,
         const ::oadr2b::dsig11::TnBFieldParamsType& s,
         ::xercesc::DOMErrorHandler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::TnB (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    TnB (::xercesc::DOMDocument& d,
         const ::oadr2b::dsig11::TnBFieldParamsType& s,
         ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::dsig11::TnBFieldParamsType) == typeid (s))
      {
        if (n.name () == "TnB" &&
            n.namespace_ () == "http://www.w3.org/2009/xmldsig11#")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "TnB",
            "http://www.w3.org/2009/xmldsig11#");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "TnB",
          "http://www.w3.org/2009/xmldsig11#",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    TnB (const ::oadr2b::dsig11::TnBFieldParamsType& s,
         const ::xml_schema::namespace_infomap& m,
         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::dsig11::TnBFieldParamsType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "TnB",
          "http://www.w3.org/2009/xmldsig11#",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "TnB",
          "http://www.w3.org/2009/xmldsig11#",
          m, s, f);
      }

      ::oadr2b::dsig11::TnB (*d, s, f);
      return d;
    }

    void
    PnB (::std::ostream& o,
         const ::oadr2b::dsig11::PnBFieldParamsType& s,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::PnB (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    PnB (::std::ostream& o,
         const ::oadr2b::dsig11::PnBFieldParamsType& s,
         ::xml_schema::error_handler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::PnB (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    PnB (::std::ostream& o,
         const ::oadr2b::dsig11::PnBFieldParamsType& s,
         ::xercesc::DOMErrorHandler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::PnB (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    PnB (::xercesc::XMLFormatTarget& t,
         const ::oadr2b::dsig11::PnBFieldParamsType& s,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::PnB (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    PnB (::xercesc::XMLFormatTarget& t,
         const ::oadr2b::dsig11::PnBFieldParamsType& s,
         ::xml_schema::error_handler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::PnB (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    PnB (::xercesc::XMLFormatTarget& t,
         const ::oadr2b::dsig11::PnBFieldParamsType& s,
         ::xercesc::DOMErrorHandler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::PnB (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    PnB (::xercesc::DOMDocument& d,
         const ::oadr2b::dsig11::PnBFieldParamsType& s,
         ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::dsig11::PnBFieldParamsType) == typeid (s))
      {
        if (n.name () == "PnB" &&
            n.namespace_ () == "http://www.w3.org/2009/xmldsig11#")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "PnB",
            "http://www.w3.org/2009/xmldsig11#");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "PnB",
          "http://www.w3.org/2009/xmldsig11#",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PnB (const ::oadr2b::dsig11::PnBFieldParamsType& s,
         const ::xml_schema::namespace_infomap& m,
         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::dsig11::PnBFieldParamsType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "PnB",
          "http://www.w3.org/2009/xmldsig11#",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "PnB",
          "http://www.w3.org/2009/xmldsig11#",
          m, s, f);
      }

      ::oadr2b::dsig11::PnB (*d, s, f);
      return d;
    }

    void
    DEREncodedKeyValue (::std::ostream& o,
                        const ::oadr2b::dsig11::DEREncodedKeyValueType& s,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::DEREncodedKeyValue (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    DEREncodedKeyValue (::std::ostream& o,
                        const ::oadr2b::dsig11::DEREncodedKeyValueType& s,
                        ::xml_schema::error_handler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::DEREncodedKeyValue (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    DEREncodedKeyValue (::std::ostream& o,
                        const ::oadr2b::dsig11::DEREncodedKeyValueType& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::DEREncodedKeyValue (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    DEREncodedKeyValue (::xercesc::XMLFormatTarget& t,
                        const ::oadr2b::dsig11::DEREncodedKeyValueType& s,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::DEREncodedKeyValue (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    DEREncodedKeyValue (::xercesc::XMLFormatTarget& t,
                        const ::oadr2b::dsig11::DEREncodedKeyValueType& s,
                        ::xml_schema::error_handler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::DEREncodedKeyValue (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    DEREncodedKeyValue (::xercesc::XMLFormatTarget& t,
                        const ::oadr2b::dsig11::DEREncodedKeyValueType& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::DEREncodedKeyValue (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    DEREncodedKeyValue (::xercesc::DOMDocument& d,
                        const ::oadr2b::dsig11::DEREncodedKeyValueType& s,
                        ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::dsig11::DEREncodedKeyValueType) == typeid (s))
      {
        if (n.name () == "DEREncodedKeyValue" &&
            n.namespace_ () == "http://www.w3.org/2009/xmldsig11#")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "DEREncodedKeyValue",
            "http://www.w3.org/2009/xmldsig11#");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "DEREncodedKeyValue",
          "http://www.w3.org/2009/xmldsig11#",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    DEREncodedKeyValue (const ::oadr2b::dsig11::DEREncodedKeyValueType& s,
                        const ::xml_schema::namespace_infomap& m,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::dsig11::DEREncodedKeyValueType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "DEREncodedKeyValue",
          "http://www.w3.org/2009/xmldsig11#",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "DEREncodedKeyValue",
          "http://www.w3.org/2009/xmldsig11#",
          m, s, f);
      }

      ::oadr2b::dsig11::DEREncodedKeyValue (*d, s, f);
      return d;
    }

    void
    KeyInfoReference (::std::ostream& o,
                      const ::oadr2b::dsig11::KeyInfoReferenceType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::KeyInfoReference (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    KeyInfoReference (::std::ostream& o,
                      const ::oadr2b::dsig11::KeyInfoReferenceType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::KeyInfoReference (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    KeyInfoReference (::std::ostream& o,
                      const ::oadr2b::dsig11::KeyInfoReferenceType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::KeyInfoReference (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    KeyInfoReference (::xercesc::XMLFormatTarget& t,
                      const ::oadr2b::dsig11::KeyInfoReferenceType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::KeyInfoReference (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    KeyInfoReference (::xercesc::XMLFormatTarget& t,
                      const ::oadr2b::dsig11::KeyInfoReferenceType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::KeyInfoReference (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    KeyInfoReference (::xercesc::XMLFormatTarget& t,
                      const ::oadr2b::dsig11::KeyInfoReferenceType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::KeyInfoReference (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    KeyInfoReference (::xercesc::DOMDocument& d,
                      const ::oadr2b::dsig11::KeyInfoReferenceType& s,
                      ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::dsig11::KeyInfoReferenceType) == typeid (s))
      {
        if (n.name () == "KeyInfoReference" &&
            n.namespace_ () == "http://www.w3.org/2009/xmldsig11#")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "KeyInfoReference",
            "http://www.w3.org/2009/xmldsig11#");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "KeyInfoReference",
          "http://www.w3.org/2009/xmldsig11#",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    KeyInfoReference (const ::oadr2b::dsig11::KeyInfoReferenceType& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::dsig11::KeyInfoReferenceType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "KeyInfoReference",
          "http://www.w3.org/2009/xmldsig11#",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "KeyInfoReference",
          "http://www.w3.org/2009/xmldsig11#",
          m, s, f);
      }

      ::oadr2b::dsig11::KeyInfoReference (*d, s, f);
      return d;
    }

    void
    X509Digest (::std::ostream& o,
                const ::oadr2b::dsig11::X509DigestType& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::X509Digest (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    X509Digest (::std::ostream& o,
                const ::oadr2b::dsig11::X509DigestType& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::X509Digest (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    X509Digest (::std::ostream& o,
                const ::oadr2b::dsig11::X509DigestType& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::X509Digest (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    X509Digest (::xercesc::XMLFormatTarget& t,
                const ::oadr2b::dsig11::X509DigestType& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::X509Digest (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    X509Digest (::xercesc::XMLFormatTarget& t,
                const ::oadr2b::dsig11::X509DigestType& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::X509Digest (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    X509Digest (::xercesc::XMLFormatTarget& t,
                const ::oadr2b::dsig11::X509DigestType& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::dsig11::X509Digest (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    X509Digest (::xercesc::DOMDocument& d,
                const ::oadr2b::dsig11::X509DigestType& s,
                ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::dsig11::X509DigestType) == typeid (s))
      {
        if (n.name () == "X509Digest" &&
            n.namespace_ () == "http://www.w3.org/2009/xmldsig11#")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "X509Digest",
            "http://www.w3.org/2009/xmldsig11#");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "X509Digest",
          "http://www.w3.org/2009/xmldsig11#",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    X509Digest (const ::oadr2b::dsig11::X509DigestType& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::dsig11::X509DigestType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "X509Digest",
          "http://www.w3.org/2009/xmldsig11#",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "X509Digest",
          "http://www.w3.org/2009/xmldsig11#",
          m, s, f);
      }

      ::oadr2b::dsig11::X509Digest (*d, s, f);
      return d;
    }
  }
}

// Begin epilogue.
//
//
// End epilogue.

#include <xsd/cxx/post.hxx>

