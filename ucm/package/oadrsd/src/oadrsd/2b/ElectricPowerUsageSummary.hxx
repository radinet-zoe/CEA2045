// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef ELECTRIC_POWER_USAGE_SUMMARY_HXX
#define ELECTRIC_POWER_USAGE_SUMMARY_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3999913L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace espi
{
  class ElectricPowerUsageSummary;
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "IdentifiedObject.hxx"

namespace espi
{
  class DateTimeInterval;
}

namespace espi
{
  class Int48;
}

namespace espi
{
  class LineItem;
}

namespace espi
{
  class Currency;
}

namespace espi
{
  class SummaryMeasurement;
}

namespace espi
{
  class QualityOfReading;
}

namespace espi
{
  class TimeType;
}

namespace espi
{
  class ElectricPowerUsageSummary: public ::espi::IdentifiedObject
  {
    public:
    // billingPeriod
    // 
    typedef ::espi::DateTimeInterval billingPeriod_type;
    typedef ::xsd::cxx::tree::optional< billingPeriod_type > billingPeriod_optional;
    typedef ::xsd::cxx::tree::traits< billingPeriod_type, char > billingPeriod_traits;

    const billingPeriod_optional&
    billingPeriod () const;

    billingPeriod_optional&
    billingPeriod ();

    void
    billingPeriod (const billingPeriod_type& x);

    void
    billingPeriod (const billingPeriod_optional& x);

    void
    billingPeriod (::std::auto_ptr< billingPeriod_type > p);

    // billLastPeriod
    // 
    typedef ::espi::Int48 billLastPeriod_type;
    typedef ::xsd::cxx::tree::optional< billLastPeriod_type > billLastPeriod_optional;
    typedef ::xsd::cxx::tree::traits< billLastPeriod_type, char > billLastPeriod_traits;

    const billLastPeriod_optional&
    billLastPeriod () const;

    billLastPeriod_optional&
    billLastPeriod ();

    void
    billLastPeriod (const billLastPeriod_type& x);

    void
    billLastPeriod (const billLastPeriod_optional& x);

    void
    billLastPeriod (::std::auto_ptr< billLastPeriod_type > p);

    // billToDate
    // 
    typedef ::espi::Int48 billToDate_type;
    typedef ::xsd::cxx::tree::optional< billToDate_type > billToDate_optional;
    typedef ::xsd::cxx::tree::traits< billToDate_type, char > billToDate_traits;

    const billToDate_optional&
    billToDate () const;

    billToDate_optional&
    billToDate ();

    void
    billToDate (const billToDate_type& x);

    void
    billToDate (const billToDate_optional& x);

    void
    billToDate (::std::auto_ptr< billToDate_type > p);

    // costAdditionalLastPeriod
    // 
    typedef ::espi::Int48 costAdditionalLastPeriod_type;
    typedef ::xsd::cxx::tree::optional< costAdditionalLastPeriod_type > costAdditionalLastPeriod_optional;
    typedef ::xsd::cxx::tree::traits< costAdditionalLastPeriod_type, char > costAdditionalLastPeriod_traits;

    const costAdditionalLastPeriod_optional&
    costAdditionalLastPeriod () const;

    costAdditionalLastPeriod_optional&
    costAdditionalLastPeriod ();

    void
    costAdditionalLastPeriod (const costAdditionalLastPeriod_type& x);

    void
    costAdditionalLastPeriod (const costAdditionalLastPeriod_optional& x);

    void
    costAdditionalLastPeriod (::std::auto_ptr< costAdditionalLastPeriod_type > p);

    // costAdditionalDetailLastPeriod
    // 
    typedef ::espi::LineItem costAdditionalDetailLastPeriod_type;
    typedef ::xsd::cxx::tree::sequence< costAdditionalDetailLastPeriod_type > costAdditionalDetailLastPeriod_sequence;
    typedef costAdditionalDetailLastPeriod_sequence::iterator costAdditionalDetailLastPeriod_iterator;
    typedef costAdditionalDetailLastPeriod_sequence::const_iterator costAdditionalDetailLastPeriod_const_iterator;
    typedef ::xsd::cxx::tree::traits< costAdditionalDetailLastPeriod_type, char > costAdditionalDetailLastPeriod_traits;

    const costAdditionalDetailLastPeriod_sequence&
    costAdditionalDetailLastPeriod () const;

    costAdditionalDetailLastPeriod_sequence&
    costAdditionalDetailLastPeriod ();

    void
    costAdditionalDetailLastPeriod (const costAdditionalDetailLastPeriod_sequence& s);

    // currency
    // 
    typedef ::espi::Currency currency_type;
    typedef ::xsd::cxx::tree::optional< currency_type > currency_optional;
    typedef ::xsd::cxx::tree::traits< currency_type, char > currency_traits;

    const currency_optional&
    currency () const;

    currency_optional&
    currency ();

    void
    currency (const currency_type& x);

    void
    currency (const currency_optional& x);

    void
    currency (::std::auto_ptr< currency_type > p);

    // overallConsumptionLastPeriod
    // 
    typedef ::espi::SummaryMeasurement overallConsumptionLastPeriod_type;
    typedef ::xsd::cxx::tree::optional< overallConsumptionLastPeriod_type > overallConsumptionLastPeriod_optional;
    typedef ::xsd::cxx::tree::traits< overallConsumptionLastPeriod_type, char > overallConsumptionLastPeriod_traits;

    const overallConsumptionLastPeriod_optional&
    overallConsumptionLastPeriod () const;

    overallConsumptionLastPeriod_optional&
    overallConsumptionLastPeriod ();

    void
    overallConsumptionLastPeriod (const overallConsumptionLastPeriod_type& x);

    void
    overallConsumptionLastPeriod (const overallConsumptionLastPeriod_optional& x);

    void
    overallConsumptionLastPeriod (::std::auto_ptr< overallConsumptionLastPeriod_type > p);

    // currentBillingPeriodOverAllConsumption
    // 
    typedef ::espi::SummaryMeasurement currentBillingPeriodOverAllConsumption_type;
    typedef ::xsd::cxx::tree::optional< currentBillingPeriodOverAllConsumption_type > currentBillingPeriodOverAllConsumption_optional;
    typedef ::xsd::cxx::tree::traits< currentBillingPeriodOverAllConsumption_type, char > currentBillingPeriodOverAllConsumption_traits;

    const currentBillingPeriodOverAllConsumption_optional&
    currentBillingPeriodOverAllConsumption () const;

    currentBillingPeriodOverAllConsumption_optional&
    currentBillingPeriodOverAllConsumption ();

    void
    currentBillingPeriodOverAllConsumption (const currentBillingPeriodOverAllConsumption_type& x);

    void
    currentBillingPeriodOverAllConsumption (const currentBillingPeriodOverAllConsumption_optional& x);

    void
    currentBillingPeriodOverAllConsumption (::std::auto_ptr< currentBillingPeriodOverAllConsumption_type > p);

    // currentDayLastYearNetConsumption
    // 
    typedef ::espi::SummaryMeasurement currentDayLastYearNetConsumption_type;
    typedef ::xsd::cxx::tree::optional< currentDayLastYearNetConsumption_type > currentDayLastYearNetConsumption_optional;
    typedef ::xsd::cxx::tree::traits< currentDayLastYearNetConsumption_type, char > currentDayLastYearNetConsumption_traits;

    const currentDayLastYearNetConsumption_optional&
    currentDayLastYearNetConsumption () const;

    currentDayLastYearNetConsumption_optional&
    currentDayLastYearNetConsumption ();

    void
    currentDayLastYearNetConsumption (const currentDayLastYearNetConsumption_type& x);

    void
    currentDayLastYearNetConsumption (const currentDayLastYearNetConsumption_optional& x);

    void
    currentDayLastYearNetConsumption (::std::auto_ptr< currentDayLastYearNetConsumption_type > p);

    // currentDayNetConsumption
    // 
    typedef ::espi::SummaryMeasurement currentDayNetConsumption_type;
    typedef ::xsd::cxx::tree::optional< currentDayNetConsumption_type > currentDayNetConsumption_optional;
    typedef ::xsd::cxx::tree::traits< currentDayNetConsumption_type, char > currentDayNetConsumption_traits;

    const currentDayNetConsumption_optional&
    currentDayNetConsumption () const;

    currentDayNetConsumption_optional&
    currentDayNetConsumption ();

    void
    currentDayNetConsumption (const currentDayNetConsumption_type& x);

    void
    currentDayNetConsumption (const currentDayNetConsumption_optional& x);

    void
    currentDayNetConsumption (::std::auto_ptr< currentDayNetConsumption_type > p);

    // currentDayOverallConsumption
    // 
    typedef ::espi::SummaryMeasurement currentDayOverallConsumption_type;
    typedef ::xsd::cxx::tree::optional< currentDayOverallConsumption_type > currentDayOverallConsumption_optional;
    typedef ::xsd::cxx::tree::traits< currentDayOverallConsumption_type, char > currentDayOverallConsumption_traits;

    const currentDayOverallConsumption_optional&
    currentDayOverallConsumption () const;

    currentDayOverallConsumption_optional&
    currentDayOverallConsumption ();

    void
    currentDayOverallConsumption (const currentDayOverallConsumption_type& x);

    void
    currentDayOverallConsumption (const currentDayOverallConsumption_optional& x);

    void
    currentDayOverallConsumption (::std::auto_ptr< currentDayOverallConsumption_type > p);

    // peakDemand
    // 
    typedef ::espi::SummaryMeasurement peakDemand_type;
    typedef ::xsd::cxx::tree::optional< peakDemand_type > peakDemand_optional;
    typedef ::xsd::cxx::tree::traits< peakDemand_type, char > peakDemand_traits;

    const peakDemand_optional&
    peakDemand () const;

    peakDemand_optional&
    peakDemand ();

    void
    peakDemand (const peakDemand_type& x);

    void
    peakDemand (const peakDemand_optional& x);

    void
    peakDemand (::std::auto_ptr< peakDemand_type > p);

    // previousDayLastYearOverallConsumption
    // 
    typedef ::espi::SummaryMeasurement previousDayLastYearOverallConsumption_type;
    typedef ::xsd::cxx::tree::optional< previousDayLastYearOverallConsumption_type > previousDayLastYearOverallConsumption_optional;
    typedef ::xsd::cxx::tree::traits< previousDayLastYearOverallConsumption_type, char > previousDayLastYearOverallConsumption_traits;

    const previousDayLastYearOverallConsumption_optional&
    previousDayLastYearOverallConsumption () const;

    previousDayLastYearOverallConsumption_optional&
    previousDayLastYearOverallConsumption ();

    void
    previousDayLastYearOverallConsumption (const previousDayLastYearOverallConsumption_type& x);

    void
    previousDayLastYearOverallConsumption (const previousDayLastYearOverallConsumption_optional& x);

    void
    previousDayLastYearOverallConsumption (::std::auto_ptr< previousDayLastYearOverallConsumption_type > p);

    // previousDayNetConsumption
    // 
    typedef ::espi::SummaryMeasurement previousDayNetConsumption_type;
    typedef ::xsd::cxx::tree::optional< previousDayNetConsumption_type > previousDayNetConsumption_optional;
    typedef ::xsd::cxx::tree::traits< previousDayNetConsumption_type, char > previousDayNetConsumption_traits;

    const previousDayNetConsumption_optional&
    previousDayNetConsumption () const;

    previousDayNetConsumption_optional&
    previousDayNetConsumption ();

    void
    previousDayNetConsumption (const previousDayNetConsumption_type& x);

    void
    previousDayNetConsumption (const previousDayNetConsumption_optional& x);

    void
    previousDayNetConsumption (::std::auto_ptr< previousDayNetConsumption_type > p);

    // previousDayOverallConsumption
    // 
    typedef ::espi::SummaryMeasurement previousDayOverallConsumption_type;
    typedef ::xsd::cxx::tree::optional< previousDayOverallConsumption_type > previousDayOverallConsumption_optional;
    typedef ::xsd::cxx::tree::traits< previousDayOverallConsumption_type, char > previousDayOverallConsumption_traits;

    const previousDayOverallConsumption_optional&
    previousDayOverallConsumption () const;

    previousDayOverallConsumption_optional&
    previousDayOverallConsumption ();

    void
    previousDayOverallConsumption (const previousDayOverallConsumption_type& x);

    void
    previousDayOverallConsumption (const previousDayOverallConsumption_optional& x);

    void
    previousDayOverallConsumption (::std::auto_ptr< previousDayOverallConsumption_type > p);

    // qualityOfReading
    // 
    typedef ::espi::QualityOfReading qualityOfReading_type;
    typedef ::xsd::cxx::tree::optional< qualityOfReading_type > qualityOfReading_optional;
    typedef ::xsd::cxx::tree::traits< qualityOfReading_type, char > qualityOfReading_traits;

    const qualityOfReading_optional&
    qualityOfReading () const;

    qualityOfReading_optional&
    qualityOfReading ();

    void
    qualityOfReading (const qualityOfReading_type& x);

    void
    qualityOfReading (const qualityOfReading_optional& x);

    void
    qualityOfReading (::std::auto_ptr< qualityOfReading_type > p);

    // ratchetDemand
    // 
    typedef ::espi::SummaryMeasurement ratchetDemand_type;
    typedef ::xsd::cxx::tree::optional< ratchetDemand_type > ratchetDemand_optional;
    typedef ::xsd::cxx::tree::traits< ratchetDemand_type, char > ratchetDemand_traits;

    const ratchetDemand_optional&
    ratchetDemand () const;

    ratchetDemand_optional&
    ratchetDemand ();

    void
    ratchetDemand (const ratchetDemand_type& x);

    void
    ratchetDemand (const ratchetDemand_optional& x);

    void
    ratchetDemand (::std::auto_ptr< ratchetDemand_type > p);

    // ratchetDemandPeriod
    // 
    typedef ::espi::DateTimeInterval ratchetDemandPeriod_type;
    typedef ::xsd::cxx::tree::optional< ratchetDemandPeriod_type > ratchetDemandPeriod_optional;
    typedef ::xsd::cxx::tree::traits< ratchetDemandPeriod_type, char > ratchetDemandPeriod_traits;

    const ratchetDemandPeriod_optional&
    ratchetDemandPeriod () const;

    ratchetDemandPeriod_optional&
    ratchetDemandPeriod ();

    void
    ratchetDemandPeriod (const ratchetDemandPeriod_type& x);

    void
    ratchetDemandPeriod (const ratchetDemandPeriod_optional& x);

    void
    ratchetDemandPeriod (::std::auto_ptr< ratchetDemandPeriod_type > p);

    // statusTimeStamp
    // 
    typedef ::espi::TimeType statusTimeStamp_type;
    typedef ::xsd::cxx::tree::traits< statusTimeStamp_type, char > statusTimeStamp_traits;

    const statusTimeStamp_type&
    statusTimeStamp () const;

    statusTimeStamp_type&
    statusTimeStamp ();

    void
    statusTimeStamp (const statusTimeStamp_type& x);

    void
    statusTimeStamp (::std::auto_ptr< statusTimeStamp_type > p);

    // Constructors.
    //
    ElectricPowerUsageSummary (const statusTimeStamp_type&);

    ElectricPowerUsageSummary (::std::auto_ptr< statusTimeStamp_type >);

    ElectricPowerUsageSummary (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    ElectricPowerUsageSummary (const ElectricPowerUsageSummary& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    virtual ElectricPowerUsageSummary*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    ElectricPowerUsageSummary&
    operator= (const ElectricPowerUsageSummary& x);

    virtual 
    ~ElectricPowerUsageSummary ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    billingPeriod_optional billingPeriod_;
    billLastPeriod_optional billLastPeriod_;
    billToDate_optional billToDate_;
    costAdditionalLastPeriod_optional costAdditionalLastPeriod_;
    costAdditionalDetailLastPeriod_sequence costAdditionalDetailLastPeriod_;
    currency_optional currency_;
    overallConsumptionLastPeriod_optional overallConsumptionLastPeriod_;
    currentBillingPeriodOverAllConsumption_optional currentBillingPeriodOverAllConsumption_;
    currentDayLastYearNetConsumption_optional currentDayLastYearNetConsumption_;
    currentDayNetConsumption_optional currentDayNetConsumption_;
    currentDayOverallConsumption_optional currentDayOverallConsumption_;
    peakDemand_optional peakDemand_;
    previousDayLastYearOverallConsumption_optional previousDayLastYearOverallConsumption_;
    previousDayNetConsumption_optional previousDayNetConsumption_;
    previousDayOverallConsumption_optional previousDayOverallConsumption_;
    qualityOfReading_optional qualityOfReading_;
    ratchetDemand_optional ratchetDemand_;
    ratchetDemandPeriod_optional ratchetDemandPeriod_;
    ::xsd::cxx::tree::one< statusTimeStamp_type > statusTimeStamp_;
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace espi
{
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace espi
{
  void
  operator<< (::xercesc::DOMElement&, const ElectricPowerUsageSummary&);
}

// Begin epilogue.
//
//
// End epilogue.

#include <xsd/cxx/post.hxx>

#endif // ELECTRIC_POWER_USAGE_SUMMARY_HXX
