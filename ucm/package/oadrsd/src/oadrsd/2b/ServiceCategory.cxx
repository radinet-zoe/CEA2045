// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#include <xsd/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include "ServiceCategory.hxx"

#include "ServiceKind.hxx"

namespace espi
{
  // ServiceCategory
  // 

  const ServiceCategory::kind_type& ServiceCategory::
  kind () const
  {
    return this->kind_.get ();
  }

  ServiceCategory::kind_type& ServiceCategory::
  kind ()
  {
    return this->kind_.get ();
  }

  void ServiceCategory::
  kind (const kind_type& x)
  {
    this->kind_.set (x);
  }

  void ServiceCategory::
  kind (::std::auto_ptr< kind_type > x)
  {
    this->kind_.set (x);
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace espi
{
  // ServiceCategory
  //

  ServiceCategory::
  ServiceCategory (const kind_type& kind)
  : ::espi::Object (),
    kind_ (kind, this)
  {
  }

  ServiceCategory::
  ServiceCategory (::std::auto_ptr< kind_type > kind)
  : ::espi::Object (),
    kind_ (kind, this)
  {
  }

  ServiceCategory::
  ServiceCategory (const ServiceCategory& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::espi::Object (x, f, c),
    kind_ (x.kind_, f, this)
  {
  }

  ServiceCategory::
  ServiceCategory (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::espi::Object (e, f | ::xml_schema::flags::base, c),
    kind_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void ServiceCategory::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    this->::espi::Object::parse (p, f);

    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // kind
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "kind",
            "http://naesb.org/espi",
            &::xsd::cxx::tree::factory_impl< kind_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!kind_.present ())
          {
            ::std::auto_ptr< kind_type > r (
              dynamic_cast< kind_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->kind_.set (r);
            continue;
          }
        }
      }

      break;
    }

    if (!kind_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "kind",
        "http://naesb.org/espi");
    }
  }

  ServiceCategory* ServiceCategory::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ServiceCategory (*this, f, c);
  }

  ServiceCategory& ServiceCategory::
  operator= (const ServiceCategory& x)
  {
    if (this != &x)
    {
      static_cast< ::espi::Object& > (*this) = x;
      this->kind_ = x.kind_;
    }

    return *this;
  }

  ServiceCategory::
  ~ServiceCategory ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ServiceCategory >
  _xsd_ServiceCategory_type_factory_init (
    "ServiceCategory",
    "http://naesb.org/espi");
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace espi
{
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace espi
{
  void
  operator<< (::xercesc::DOMElement& e, const ServiceCategory& i)
  {
    e << static_cast< const ::espi::Object& > (i);

    // kind
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      const ServiceCategory::kind_type& x (i.kind ());
      if (typeid (ServiceCategory::kind_type) == typeid (x))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "kind",
            "http://naesb.org/espi",
            e));

        s << x;
      }
      else
        tsm.serialize (
          "kind",
          "http://naesb.org/espi",
          false, true, e, x);
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ServiceCategory >
  _xsd_ServiceCategory_type_serializer_init (
    "ServiceCategory",
    "http://naesb.org/espi");
}

// Begin epilogue.
//
//
// End epilogue.

#include <xsd/cxx/post.hxx>

