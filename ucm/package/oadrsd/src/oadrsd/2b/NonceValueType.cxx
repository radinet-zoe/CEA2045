// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#include <xsd/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include "NonceValueType.hxx"

namespace oadr2b
{
  namespace dsp
  {
    // NonceValueType
    // 

    const NonceValueType::EncodingType_optional& NonceValueType::
    EncodingType () const
    {
      return this->EncodingType_;
    }

    NonceValueType::EncodingType_optional& NonceValueType::
    EncodingType ()
    {
      return this->EncodingType_;
    }

    void NonceValueType::
    EncodingType (const EncodingType_type& x)
    {
      this->EncodingType_.set (x);
    }

    void NonceValueType::
    EncodingType (const EncodingType_optional& x)
    {
      this->EncodingType_ = x;
    }

    void NonceValueType::
    EncodingType (::std::auto_ptr< EncodingType_type > x)
    {
      this->EncodingType_.set (x);
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace oadr2b
{
  namespace dsp
  {
    // NonceValueType
    //

    NonceValueType::
    NonceValueType ()
    : ::xml_schema::string (),
      EncodingType_ (this)
    {
    }

    NonceValueType::
    NonceValueType (const char* _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base),
      EncodingType_ (this)
    {
    }

    NonceValueType::
    NonceValueType (const ::std::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base),
      EncodingType_ (this)
    {
    }

    NonceValueType::
    NonceValueType (const ::xml_schema::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base),
      EncodingType_ (this)
    {
    }

    NonceValueType::
    NonceValueType (const NonceValueType& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::string (x, f, c),
      EncodingType_ (x.EncodingType_, f, this)
    {
    }

    NonceValueType::
    NonceValueType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::string (e, f | ::xml_schema::flags::base, c),
      EncodingType_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
        this->parse (p, f);
      }
    }

    void NonceValueType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "EncodingType" && n.namespace_ ().empty ())
        {
          this->EncodingType_.set (EncodingType_traits::create (i, f, this));
          continue;
        }
      }
    }

    NonceValueType* NonceValueType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class NonceValueType (*this, f, c);
    }

    NonceValueType& NonceValueType::
    operator= (const NonceValueType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::string& > (*this) = x;
        this->EncodingType_ = x.EncodingType_;
      }

      return *this;
    }

    NonceValueType::
    ~NonceValueType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, NonceValueType >
    _xsd_NonceValueType_type_factory_init (
      "NonceValueType",
      "http://openadr.org/oadr-2.0b/2012/07/xmldsig-properties");
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace oadr2b
{
  namespace dsp
  {
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace oadr2b
{
  namespace dsp
  {
    void
    operator<< (::xercesc::DOMElement& e, const NonceValueType& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);

      // EncodingType
      //
      if (i.EncodingType ())
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "EncodingType",
            e));

        a << *i.EncodingType ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, NonceValueType >
    _xsd_NonceValueType_type_serializer_init (
      "NonceValueType",
      "http://openadr.org/oadr-2.0b/2012/07/xmldsig-properties");
  }
}

// Begin epilogue.
//
//
// End epilogue.

#include <xsd/cxx/post.hxx>

