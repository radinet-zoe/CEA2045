// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#include <xsd/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include "StreamBaseType.hxx"

#include "dtstart.hxx"

#include "DurationPropType.hxx"

#include "intervals.hxx"

namespace stream
{
  // StreamBaseType
  // 

  const StreamBaseType::dtstart_optional& StreamBaseType::
  dtstart () const
  {
    return this->dtstart_;
  }

  StreamBaseType::dtstart_optional& StreamBaseType::
  dtstart ()
  {
    return this->dtstart_;
  }

  void StreamBaseType::
  dtstart (const dtstart_type& x)
  {
    this->dtstart_.set (x);
  }

  void StreamBaseType::
  dtstart (const dtstart_optional& x)
  {
    this->dtstart_ = x;
  }

  void StreamBaseType::
  dtstart (::std::auto_ptr< dtstart_type > x)
  {
    this->dtstart_.set (x);
  }

  const StreamBaseType::duration_optional& StreamBaseType::
  duration () const
  {
    return this->duration_;
  }

  StreamBaseType::duration_optional& StreamBaseType::
  duration ()
  {
    return this->duration_;
  }

  void StreamBaseType::
  duration (const duration_type& x)
  {
    this->duration_.set (x);
  }

  void StreamBaseType::
  duration (const duration_optional& x)
  {
    this->duration_ = x;
  }

  void StreamBaseType::
  duration (::std::auto_ptr< duration_type > x)
  {
    this->duration_.set (x);
  }

  const StreamBaseType::intervals_optional& StreamBaseType::
  intervals () const
  {
    return this->intervals_;
  }

  StreamBaseType::intervals_optional& StreamBaseType::
  intervals ()
  {
    return this->intervals_;
  }

  void StreamBaseType::
  intervals (const intervals_type& x)
  {
    this->intervals_.set (x);
  }

  void StreamBaseType::
  intervals (const intervals_optional& x)
  {
    this->intervals_ = x;
  }

  void StreamBaseType::
  intervals (::std::auto_ptr< intervals_type > x)
  {
    this->intervals_.set (x);
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace stream
{
  // StreamBaseType
  //

  StreamBaseType::
  StreamBaseType ()
  : ::xml_schema::type (),
    dtstart_ (this),
    duration_ (this),
    intervals_ (this)
  {
  }

  StreamBaseType::
  StreamBaseType (const StreamBaseType& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    dtstart_ (x.dtstart_, f, this),
    duration_ (x.duration_, f, this),
    intervals_ (x.intervals_, f, this)
  {
  }

  StreamBaseType::
  StreamBaseType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    dtstart_ (this),
    duration_ (this),
    intervals_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void StreamBaseType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // dtstart
      //
      if (n.name () == "dtstart" && n.namespace_ () == "urn:ietf:params:xml:ns:icalendar-2.0")
      {
        ::std::auto_ptr< dtstart_type > r (
          dtstart_traits::create (i, f, this));

        if (!this->dtstart_)
        {
          this->dtstart_.set (r);
          continue;
        }
      }

      // duration
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "duration",
            "urn:ietf:params:xml:ns:icalendar-2.0",
            &::xsd::cxx::tree::factory_impl< duration_type >,
            true, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->duration_)
          {
            ::std::auto_ptr< duration_type > r (
              dynamic_cast< duration_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->duration_.set (r);
            continue;
          }
        }
      }

      // intervals
      //
      if (n.name () == "intervals" && n.namespace_ () == "urn:ietf:params:xml:ns:icalendar-2.0:stream")
      {
        ::std::auto_ptr< intervals_type > r (
          intervals_traits::create (i, f, this));

        if (!this->intervals_)
        {
          this->intervals_.set (r);
          continue;
        }
      }

      break;
    }
  }

  StreamBaseType* StreamBaseType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class StreamBaseType (*this, f, c);
  }

  StreamBaseType& StreamBaseType::
  operator= (const StreamBaseType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->dtstart_ = x.dtstart_;
      this->duration_ = x.duration_;
      this->intervals_ = x.intervals_;
    }

    return *this;
  }

  StreamBaseType::
  ~StreamBaseType ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, StreamBaseType >
  _xsd_StreamBaseType_type_factory_init (
    "StreamBaseType",
    "urn:ietf:params:xml:ns:icalendar-2.0:stream");
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace stream
{
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace stream
{
  void
  operator<< (::xercesc::DOMElement& e, const StreamBaseType& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // dtstart
    //
    if (i.dtstart ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "dtstart",
          "urn:ietf:params:xml:ns:icalendar-2.0",
          e));

      s << *i.dtstart ();
    }

    // duration
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.duration ())
      {
        const StreamBaseType::duration_type& x (*i.duration ());
        if (typeid (StreamBaseType::duration_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "duration",
              "urn:ietf:params:xml:ns:icalendar-2.0",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "duration",
            "urn:ietf:params:xml:ns:icalendar-2.0",
            true, true, e, x);
      }
    }

    // intervals
    //
    if (i.intervals ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "intervals",
          "urn:ietf:params:xml:ns:icalendar-2.0:stream",
          e));

      s << *i.intervals ();
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, StreamBaseType >
  _xsd_StreamBaseType_type_serializer_init (
    "StreamBaseType",
    "urn:ietf:params:xml:ns:icalendar-2.0:stream");
}

// Begin epilogue.
//
//
// End epilogue.

#include <xsd/cxx/post.hxx>

