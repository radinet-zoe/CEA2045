// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#include <xsd/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include "RSAKeyValueType.hxx"

#include "CryptoBinary.hxx"

namespace oadr2b
{
  namespace sig
  {
    // RSAKeyValueType
    // 

    const RSAKeyValueType::Modulus_type& RSAKeyValueType::
    Modulus () const
    {
      return this->Modulus_.get ();
    }

    RSAKeyValueType::Modulus_type& RSAKeyValueType::
    Modulus ()
    {
      return this->Modulus_.get ();
    }

    void RSAKeyValueType::
    Modulus (const Modulus_type& x)
    {
      this->Modulus_.set (x);
    }

    void RSAKeyValueType::
    Modulus (::std::auto_ptr< Modulus_type > x)
    {
      this->Modulus_.set (x);
    }

    const RSAKeyValueType::Exponent_type& RSAKeyValueType::
    Exponent () const
    {
      return this->Exponent_.get ();
    }

    RSAKeyValueType::Exponent_type& RSAKeyValueType::
    Exponent ()
    {
      return this->Exponent_.get ();
    }

    void RSAKeyValueType::
    Exponent (const Exponent_type& x)
    {
      this->Exponent_.set (x);
    }

    void RSAKeyValueType::
    Exponent (::std::auto_ptr< Exponent_type > x)
    {
      this->Exponent_.set (x);
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace oadr2b
{
  namespace sig
  {
    // RSAKeyValueType
    //

    RSAKeyValueType::
    RSAKeyValueType (const Modulus_type& Modulus,
                     const Exponent_type& Exponent)
    : ::xml_schema::type (),
      Modulus_ (Modulus, this),
      Exponent_ (Exponent, this)
    {
    }

    RSAKeyValueType::
    RSAKeyValueType (::std::auto_ptr< Modulus_type > Modulus,
                     ::std::auto_ptr< Exponent_type > Exponent)
    : ::xml_schema::type (),
      Modulus_ (Modulus, this),
      Exponent_ (Exponent, this)
    {
    }

    RSAKeyValueType::
    RSAKeyValueType (const RSAKeyValueType& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Modulus_ (x.Modulus_, f, this),
      Exponent_ (x.Exponent_, f, this)
    {
    }

    RSAKeyValueType::
    RSAKeyValueType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Modulus_ (this),
      Exponent_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void RSAKeyValueType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // Modulus
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "Modulus",
              "http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< Modulus_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!Modulus_.present ())
            {
              ::std::auto_ptr< Modulus_type > r (
                dynamic_cast< Modulus_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->Modulus_.set (r);
              continue;
            }
          }
        }

        // Exponent
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "Exponent",
              "http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< Exponent_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!Exponent_.present ())
            {
              ::std::auto_ptr< Exponent_type > r (
                dynamic_cast< Exponent_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->Exponent_.set (r);
              continue;
            }
          }
        }

        break;
      }

      if (!Modulus_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Modulus",
          "http://www.w3.org/2000/09/xmldsig#");
      }

      if (!Exponent_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Exponent",
          "http://www.w3.org/2000/09/xmldsig#");
      }
    }

    RSAKeyValueType* RSAKeyValueType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class RSAKeyValueType (*this, f, c);
    }

    RSAKeyValueType& RSAKeyValueType::
    operator= (const RSAKeyValueType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->Modulus_ = x.Modulus_;
        this->Exponent_ = x.Exponent_;
      }

      return *this;
    }

    RSAKeyValueType::
    ~RSAKeyValueType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, RSAKeyValueType >
    _xsd_RSAKeyValueType_type_factory_init (
      "RSAKeyValueType",
      "http://www.w3.org/2000/09/xmldsig#");
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace oadr2b
{
  namespace sig
  {
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace oadr2b
{
  namespace sig
  {
    void
    operator<< (::xercesc::DOMElement& e, const RSAKeyValueType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Modulus
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        const RSAKeyValueType::Modulus_type& x (i.Modulus ());
        if (typeid (RSAKeyValueType::Modulus_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Modulus",
              "http://www.w3.org/2000/09/xmldsig#",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "Modulus",
            "http://www.w3.org/2000/09/xmldsig#",
            false, true, e, x);
      }

      // Exponent
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        const RSAKeyValueType::Exponent_type& x (i.Exponent ());
        if (typeid (RSAKeyValueType::Exponent_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Exponent",
              "http://www.w3.org/2000/09/xmldsig#",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "Exponent",
            "http://www.w3.org/2000/09/xmldsig#",
            false, true, e, x);
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, RSAKeyValueType >
    _xsd_RSAKeyValueType_type_serializer_init (
      "RSAKeyValueType",
      "http://www.w3.org/2000/09/xmldsig#");
  }
}

// Begin epilogue.
//
//
// End epilogue.

#include <xsd/cxx/post.hxx>

