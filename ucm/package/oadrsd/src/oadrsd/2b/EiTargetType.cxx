// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#include <xsd/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include "EiTargetType.hxx"

#include "AggregatedPnodeType.hxx"

#include "EndDeviceAssetType.hxx"

#include "MeterAssetType.hxx"

#include "PnodeType.hxx"

#include "ServiceAreaType.hxx"

#include "ServiceDeliveryPointType.hxx"

#include "ServiceLocationType.hxx"

#include "TransportInterfaceType.hxx"

namespace oadr2b
{
  namespace ei
  {
    // EiTargetType
    // 

    const EiTargetType::aggregatedPnode_sequence& EiTargetType::
    aggregatedPnode () const
    {
      return this->aggregatedPnode_;
    }

    EiTargetType::aggregatedPnode_sequence& EiTargetType::
    aggregatedPnode ()
    {
      return this->aggregatedPnode_;
    }

    void EiTargetType::
    aggregatedPnode (const aggregatedPnode_sequence& s)
    {
      this->aggregatedPnode_ = s;
    }

    const EiTargetType::endDeviceAsset_sequence& EiTargetType::
    endDeviceAsset () const
    {
      return this->endDeviceAsset_;
    }

    EiTargetType::endDeviceAsset_sequence& EiTargetType::
    endDeviceAsset ()
    {
      return this->endDeviceAsset_;
    }

    void EiTargetType::
    endDeviceAsset (const endDeviceAsset_sequence& s)
    {
      this->endDeviceAsset_ = s;
    }

    const EiTargetType::meterAsset_sequence& EiTargetType::
    meterAsset () const
    {
      return this->meterAsset_;
    }

    EiTargetType::meterAsset_sequence& EiTargetType::
    meterAsset ()
    {
      return this->meterAsset_;
    }

    void EiTargetType::
    meterAsset (const meterAsset_sequence& s)
    {
      this->meterAsset_ = s;
    }

    const EiTargetType::pnode_sequence& EiTargetType::
    pnode () const
    {
      return this->pnode_;
    }

    EiTargetType::pnode_sequence& EiTargetType::
    pnode ()
    {
      return this->pnode_;
    }

    void EiTargetType::
    pnode (const pnode_sequence& s)
    {
      this->pnode_ = s;
    }

    const EiTargetType::serviceArea_sequence& EiTargetType::
    serviceArea () const
    {
      return this->serviceArea_;
    }

    EiTargetType::serviceArea_sequence& EiTargetType::
    serviceArea ()
    {
      return this->serviceArea_;
    }

    void EiTargetType::
    serviceArea (const serviceArea_sequence& s)
    {
      this->serviceArea_ = s;
    }

    const EiTargetType::serviceDeliveryPoint_sequence& EiTargetType::
    serviceDeliveryPoint () const
    {
      return this->serviceDeliveryPoint_;
    }

    EiTargetType::serviceDeliveryPoint_sequence& EiTargetType::
    serviceDeliveryPoint ()
    {
      return this->serviceDeliveryPoint_;
    }

    void EiTargetType::
    serviceDeliveryPoint (const serviceDeliveryPoint_sequence& s)
    {
      this->serviceDeliveryPoint_ = s;
    }

    const EiTargetType::serviceLocation_sequence& EiTargetType::
    serviceLocation () const
    {
      return this->serviceLocation_;
    }

    EiTargetType::serviceLocation_sequence& EiTargetType::
    serviceLocation ()
    {
      return this->serviceLocation_;
    }

    void EiTargetType::
    serviceLocation (const serviceLocation_sequence& s)
    {
      this->serviceLocation_ = s;
    }

    const EiTargetType::transportInterface_sequence& EiTargetType::
    transportInterface () const
    {
      return this->transportInterface_;
    }

    EiTargetType::transportInterface_sequence& EiTargetType::
    transportInterface ()
    {
      return this->transportInterface_;
    }

    void EiTargetType::
    transportInterface (const transportInterface_sequence& s)
    {
      this->transportInterface_ = s;
    }

    const EiTargetType::groupID_sequence& EiTargetType::
    groupID () const
    {
      return this->groupID_;
    }

    EiTargetType::groupID_sequence& EiTargetType::
    groupID ()
    {
      return this->groupID_;
    }

    void EiTargetType::
    groupID (const groupID_sequence& s)
    {
      this->groupID_ = s;
    }

    const EiTargetType::groupName_sequence& EiTargetType::
    groupName () const
    {
      return this->groupName_;
    }

    EiTargetType::groupName_sequence& EiTargetType::
    groupName ()
    {
      return this->groupName_;
    }

    void EiTargetType::
    groupName (const groupName_sequence& s)
    {
      this->groupName_ = s;
    }

    const EiTargetType::resourceID_sequence& EiTargetType::
    resourceID () const
    {
      return this->resourceID_;
    }

    EiTargetType::resourceID_sequence& EiTargetType::
    resourceID ()
    {
      return this->resourceID_;
    }

    void EiTargetType::
    resourceID (const resourceID_sequence& s)
    {
      this->resourceID_ = s;
    }

    const EiTargetType::venID_sequence& EiTargetType::
    venID () const
    {
      return this->venID_;
    }

    EiTargetType::venID_sequence& EiTargetType::
    venID ()
    {
      return this->venID_;
    }

    void EiTargetType::
    venID (const venID_sequence& s)
    {
      this->venID_ = s;
    }

    const EiTargetType::partyID_sequence& EiTargetType::
    partyID () const
    {
      return this->partyID_;
    }

    EiTargetType::partyID_sequence& EiTargetType::
    partyID ()
    {
      return this->partyID_;
    }

    void EiTargetType::
    partyID (const partyID_sequence& s)
    {
      this->partyID_ = s;
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace oadr2b
{
  namespace ei
  {
    // EiTargetType
    //

    EiTargetType::
    EiTargetType ()
    : ::xml_schema::type (),
      aggregatedPnode_ (this),
      endDeviceAsset_ (this),
      meterAsset_ (this),
      pnode_ (this),
      serviceArea_ (this),
      serviceDeliveryPoint_ (this),
      serviceLocation_ (this),
      transportInterface_ (this),
      groupID_ (this),
      groupName_ (this),
      resourceID_ (this),
      venID_ (this),
      partyID_ (this)
    {
    }

    EiTargetType::
    EiTargetType (const EiTargetType& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      aggregatedPnode_ (x.aggregatedPnode_, f, this),
      endDeviceAsset_ (x.endDeviceAsset_, f, this),
      meterAsset_ (x.meterAsset_, f, this),
      pnode_ (x.pnode_, f, this),
      serviceArea_ (x.serviceArea_, f, this),
      serviceDeliveryPoint_ (x.serviceDeliveryPoint_, f, this),
      serviceLocation_ (x.serviceLocation_, f, this),
      transportInterface_ (x.transportInterface_, f, this),
      groupID_ (x.groupID_, f, this),
      groupName_ (x.groupName_, f, this),
      resourceID_ (x.resourceID_, f, this),
      venID_ (x.venID_, f, this),
      partyID_ (x.partyID_, f, this)
    {
    }

    EiTargetType::
    EiTargetType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      aggregatedPnode_ (this),
      endDeviceAsset_ (this),
      meterAsset_ (this),
      pnode_ (this),
      serviceArea_ (this),
      serviceDeliveryPoint_ (this),
      serviceLocation_ (this),
      transportInterface_ (this),
      groupID_ (this),
      groupName_ (this),
      resourceID_ (this),
      venID_ (this),
      partyID_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void EiTargetType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // aggregatedPnode
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "aggregatedPnode",
              "http://docs.oasis-open.org/ns/emix/2011/06/power",
              &::xsd::cxx::tree::factory_impl< aggregatedPnode_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< aggregatedPnode_type > r (
              dynamic_cast< aggregatedPnode_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->aggregatedPnode_.push_back (r);
            continue;
          }
        }

        // endDeviceAsset
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "endDeviceAsset",
              "http://docs.oasis-open.org/ns/emix/2011/06/power",
              &::xsd::cxx::tree::factory_impl< endDeviceAsset_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< endDeviceAsset_type > r (
              dynamic_cast< endDeviceAsset_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->endDeviceAsset_.push_back (r);
            continue;
          }
        }

        // meterAsset
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "meterAsset",
              "http://docs.oasis-open.org/ns/emix/2011/06/power",
              &::xsd::cxx::tree::factory_impl< meterAsset_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< meterAsset_type > r (
              dynamic_cast< meterAsset_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->meterAsset_.push_back (r);
            continue;
          }
        }

        // pnode
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "pnode",
              "http://docs.oasis-open.org/ns/emix/2011/06/power",
              &::xsd::cxx::tree::factory_impl< pnode_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< pnode_type > r (
              dynamic_cast< pnode_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->pnode_.push_back (r);
            continue;
          }
        }

        // serviceArea
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "serviceArea",
              "http://docs.oasis-open.org/ns/emix/2011/06",
              &::xsd::cxx::tree::factory_impl< serviceArea_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< serviceArea_type > r (
              dynamic_cast< serviceArea_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->serviceArea_.push_back (r);
            continue;
          }
        }

        // serviceDeliveryPoint
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "serviceDeliveryPoint",
              "http://docs.oasis-open.org/ns/emix/2011/06/power",
              &::xsd::cxx::tree::factory_impl< serviceDeliveryPoint_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< serviceDeliveryPoint_type > r (
              dynamic_cast< serviceDeliveryPoint_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->serviceDeliveryPoint_.push_back (r);
            continue;
          }
        }

        // serviceLocation
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "serviceLocation",
              "http://docs.oasis-open.org/ns/emix/2011/06/power",
              &::xsd::cxx::tree::factory_impl< serviceLocation_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< serviceLocation_type > r (
              dynamic_cast< serviceLocation_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->serviceLocation_.push_back (r);
            continue;
          }
        }

        // transportInterface
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "transportInterface",
              "http://docs.oasis-open.org/ns/emix/2011/06/power",
              &::xsd::cxx::tree::factory_impl< transportInterface_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< transportInterface_type > r (
              dynamic_cast< transportInterface_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->transportInterface_.push_back (r);
            continue;
          }
        }

        // groupID
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "groupID",
              "http://docs.oasis-open.org/ns/energyinterop/201110",
              &::xsd::cxx::tree::factory_impl< groupID_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< groupID_type > r (
              dynamic_cast< groupID_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->groupID_.push_back (r);
            continue;
          }
        }

        // groupName
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "groupName",
              "http://docs.oasis-open.org/ns/energyinterop/201110",
              &::xsd::cxx::tree::factory_impl< groupName_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< groupName_type > r (
              dynamic_cast< groupName_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->groupName_.push_back (r);
            continue;
          }
        }

        // resourceID
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "resourceID",
              "http://docs.oasis-open.org/ns/energyinterop/201110",
              &::xsd::cxx::tree::factory_impl< resourceID_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< resourceID_type > r (
              dynamic_cast< resourceID_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->resourceID_.push_back (r);
            continue;
          }
        }

        // venID
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "venID",
              "http://docs.oasis-open.org/ns/energyinterop/201110",
              &::xsd::cxx::tree::factory_impl< venID_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< venID_type > r (
              dynamic_cast< venID_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->venID_.push_back (r);
            continue;
          }
        }

        // partyID
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "partyID",
              "http://docs.oasis-open.org/ns/energyinterop/201110",
              &::xsd::cxx::tree::factory_impl< partyID_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< partyID_type > r (
              dynamic_cast< partyID_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->partyID_.push_back (r);
            continue;
          }
        }

        break;
      }
    }

    EiTargetType* EiTargetType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class EiTargetType (*this, f, c);
    }

    EiTargetType& EiTargetType::
    operator= (const EiTargetType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->aggregatedPnode_ = x.aggregatedPnode_;
        this->endDeviceAsset_ = x.endDeviceAsset_;
        this->meterAsset_ = x.meterAsset_;
        this->pnode_ = x.pnode_;
        this->serviceArea_ = x.serviceArea_;
        this->serviceDeliveryPoint_ = x.serviceDeliveryPoint_;
        this->serviceLocation_ = x.serviceLocation_;
        this->transportInterface_ = x.transportInterface_;
        this->groupID_ = x.groupID_;
        this->groupName_ = x.groupName_;
        this->resourceID_ = x.resourceID_;
        this->venID_ = x.venID_;
        this->partyID_ = x.partyID_;
      }

      return *this;
    }

    EiTargetType::
    ~EiTargetType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, EiTargetType >
    _xsd_EiTargetType_type_factory_init (
      "EiTargetType",
      "http://docs.oasis-open.org/ns/energyinterop/201110");
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace oadr2b
{
  namespace ei
  {
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace oadr2b
{
  namespace ei
  {
    void
    operator<< (::xercesc::DOMElement& e, const EiTargetType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // aggregatedPnode
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        for (EiTargetType::aggregatedPnode_const_iterator
             b (i.aggregatedPnode ().begin ()), n (i.aggregatedPnode ().end ());
             b != n; ++b)
        {
          if (typeid (EiTargetType::aggregatedPnode_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "aggregatedPnode",
                "http://docs.oasis-open.org/ns/emix/2011/06/power",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              "aggregatedPnode",
              "http://docs.oasis-open.org/ns/emix/2011/06/power",
              true, true, e, *b);
        }
      }

      // endDeviceAsset
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        for (EiTargetType::endDeviceAsset_const_iterator
             b (i.endDeviceAsset ().begin ()), n (i.endDeviceAsset ().end ());
             b != n; ++b)
        {
          if (typeid (EiTargetType::endDeviceAsset_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "endDeviceAsset",
                "http://docs.oasis-open.org/ns/emix/2011/06/power",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              "endDeviceAsset",
              "http://docs.oasis-open.org/ns/emix/2011/06/power",
              true, true, e, *b);
        }
      }

      // meterAsset
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        for (EiTargetType::meterAsset_const_iterator
             b (i.meterAsset ().begin ()), n (i.meterAsset ().end ());
             b != n; ++b)
        {
          if (typeid (EiTargetType::meterAsset_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "meterAsset",
                "http://docs.oasis-open.org/ns/emix/2011/06/power",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              "meterAsset",
              "http://docs.oasis-open.org/ns/emix/2011/06/power",
              true, true, e, *b);
        }
      }

      // pnode
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        for (EiTargetType::pnode_const_iterator
             b (i.pnode ().begin ()), n (i.pnode ().end ());
             b != n; ++b)
        {
          if (typeid (EiTargetType::pnode_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "pnode",
                "http://docs.oasis-open.org/ns/emix/2011/06/power",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              "pnode",
              "http://docs.oasis-open.org/ns/emix/2011/06/power",
              true, true, e, *b);
        }
      }

      // serviceArea
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        for (EiTargetType::serviceArea_const_iterator
             b (i.serviceArea ().begin ()), n (i.serviceArea ().end ());
             b != n; ++b)
        {
          if (typeid (EiTargetType::serviceArea_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "serviceArea",
                "http://docs.oasis-open.org/ns/emix/2011/06",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              "serviceArea",
              "http://docs.oasis-open.org/ns/emix/2011/06",
              true, true, e, *b);
        }
      }

      // serviceDeliveryPoint
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        for (EiTargetType::serviceDeliveryPoint_const_iterator
             b (i.serviceDeliveryPoint ().begin ()), n (i.serviceDeliveryPoint ().end ());
             b != n; ++b)
        {
          if (typeid (EiTargetType::serviceDeliveryPoint_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "serviceDeliveryPoint",
                "http://docs.oasis-open.org/ns/emix/2011/06/power",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              "serviceDeliveryPoint",
              "http://docs.oasis-open.org/ns/emix/2011/06/power",
              true, true, e, *b);
        }
      }

      // serviceLocation
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        for (EiTargetType::serviceLocation_const_iterator
             b (i.serviceLocation ().begin ()), n (i.serviceLocation ().end ());
             b != n; ++b)
        {
          if (typeid (EiTargetType::serviceLocation_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "serviceLocation",
                "http://docs.oasis-open.org/ns/emix/2011/06/power",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              "serviceLocation",
              "http://docs.oasis-open.org/ns/emix/2011/06/power",
              true, true, e, *b);
        }
      }

      // transportInterface
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        for (EiTargetType::transportInterface_const_iterator
             b (i.transportInterface ().begin ()), n (i.transportInterface ().end ());
             b != n; ++b)
        {
          if (typeid (EiTargetType::transportInterface_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "transportInterface",
                "http://docs.oasis-open.org/ns/emix/2011/06/power",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              "transportInterface",
              "http://docs.oasis-open.org/ns/emix/2011/06/power",
              true, true, e, *b);
        }
      }

      // groupID
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        for (EiTargetType::groupID_const_iterator
             b (i.groupID ().begin ()), n (i.groupID ().end ());
             b != n; ++b)
        {
          if (typeid (EiTargetType::groupID_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "groupID",
                "http://docs.oasis-open.org/ns/energyinterop/201110",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              "groupID",
              "http://docs.oasis-open.org/ns/energyinterop/201110",
              true, true, e, *b);
        }
      }

      // groupName
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        for (EiTargetType::groupName_const_iterator
             b (i.groupName ().begin ()), n (i.groupName ().end ());
             b != n; ++b)
        {
          if (typeid (EiTargetType::groupName_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "groupName",
                "http://docs.oasis-open.org/ns/energyinterop/201110",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              "groupName",
              "http://docs.oasis-open.org/ns/energyinterop/201110",
              true, true, e, *b);
        }
      }

      // resourceID
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        for (EiTargetType::resourceID_const_iterator
             b (i.resourceID ().begin ()), n (i.resourceID ().end ());
             b != n; ++b)
        {
          if (typeid (EiTargetType::resourceID_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "resourceID",
                "http://docs.oasis-open.org/ns/energyinterop/201110",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              "resourceID",
              "http://docs.oasis-open.org/ns/energyinterop/201110",
              true, true, e, *b);
        }
      }

      // venID
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        for (EiTargetType::venID_const_iterator
             b (i.venID ().begin ()), n (i.venID ().end ());
             b != n; ++b)
        {
          if (typeid (EiTargetType::venID_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "venID",
                "http://docs.oasis-open.org/ns/energyinterop/201110",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              "venID",
              "http://docs.oasis-open.org/ns/energyinterop/201110",
              true, true, e, *b);
        }
      }

      // partyID
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        for (EiTargetType::partyID_const_iterator
             b (i.partyID ().begin ()), n (i.partyID ().end ());
             b != n; ++b)
        {
          if (typeid (EiTargetType::partyID_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "partyID",
                "http://docs.oasis-open.org/ns/energyinterop/201110",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              "partyID",
              "http://docs.oasis-open.org/ns/energyinterop/201110",
              true, true, e, *b);
        }
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, EiTargetType >
    _xsd_EiTargetType_type_serializer_init (
      "EiTargetType",
      "http://docs.oasis-open.org/ns/energyinterop/201110");
  }
}

// Begin epilogue.
//
//
// End epilogue.

#include <xsd/cxx/post.hxx>

