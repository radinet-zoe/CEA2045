// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#include <xsd/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include "oadrReportDescriptionType.hxx"

#include "EiTargetType.hxx"

#include "ReportTypeType.hxx"

#include "ItemBaseType.hxx"

#include "ReadingTypeType.hxx"

#include "MarketContextType.hxx"

#include "oadrSamplingRateType.hxx"

namespace oadr2b
{
  namespace oadr
  {
    // oadrReportDescriptionType
    // 

    const oadrReportDescriptionType::rID_type& oadrReportDescriptionType::
    rID () const
    {
      return this->rID_.get ();
    }

    oadrReportDescriptionType::rID_type& oadrReportDescriptionType::
    rID ()
    {
      return this->rID_.get ();
    }

    void oadrReportDescriptionType::
    rID (const rID_type& x)
    {
      this->rID_.set (x);
    }

    void oadrReportDescriptionType::
    rID (::std::auto_ptr< rID_type > x)
    {
      this->rID_.set (x);
    }

    const oadrReportDescriptionType::reportSubject_optional& oadrReportDescriptionType::
    reportSubject () const
    {
      return this->reportSubject_;
    }

    oadrReportDescriptionType::reportSubject_optional& oadrReportDescriptionType::
    reportSubject ()
    {
      return this->reportSubject_;
    }

    void oadrReportDescriptionType::
    reportSubject (const reportSubject_type& x)
    {
      this->reportSubject_.set (x);
    }

    void oadrReportDescriptionType::
    reportSubject (const reportSubject_optional& x)
    {
      this->reportSubject_ = x;
    }

    void oadrReportDescriptionType::
    reportSubject (::std::auto_ptr< reportSubject_type > x)
    {
      this->reportSubject_.set (x);
    }

    const oadrReportDescriptionType::reportDataSource_optional& oadrReportDescriptionType::
    reportDataSource () const
    {
      return this->reportDataSource_;
    }

    oadrReportDescriptionType::reportDataSource_optional& oadrReportDescriptionType::
    reportDataSource ()
    {
      return this->reportDataSource_;
    }

    void oadrReportDescriptionType::
    reportDataSource (const reportDataSource_type& x)
    {
      this->reportDataSource_.set (x);
    }

    void oadrReportDescriptionType::
    reportDataSource (const reportDataSource_optional& x)
    {
      this->reportDataSource_ = x;
    }

    void oadrReportDescriptionType::
    reportDataSource (::std::auto_ptr< reportDataSource_type > x)
    {
      this->reportDataSource_.set (x);
    }

    const oadrReportDescriptionType::reportType_type& oadrReportDescriptionType::
    reportType () const
    {
      return this->reportType_.get ();
    }

    oadrReportDescriptionType::reportType_type& oadrReportDescriptionType::
    reportType ()
    {
      return this->reportType_.get ();
    }

    void oadrReportDescriptionType::
    reportType (const reportType_type& x)
    {
      this->reportType_.set (x);
    }

    void oadrReportDescriptionType::
    reportType (::std::auto_ptr< reportType_type > x)
    {
      this->reportType_.set (x);
    }

    const oadrReportDescriptionType::itemBase_optional& oadrReportDescriptionType::
    itemBase () const
    {
      return this->itemBase_;
    }

    oadrReportDescriptionType::itemBase_optional& oadrReportDescriptionType::
    itemBase ()
    {
      return this->itemBase_;
    }

    void oadrReportDescriptionType::
    itemBase (const itemBase_type& x)
    {
      this->itemBase_.set (x);
    }

    void oadrReportDescriptionType::
    itemBase (const itemBase_optional& x)
    {
      this->itemBase_ = x;
    }

    void oadrReportDescriptionType::
    itemBase (::std::auto_ptr< itemBase_type > x)
    {
      this->itemBase_.set (x);
    }

    const oadrReportDescriptionType::readingType_type& oadrReportDescriptionType::
    readingType () const
    {
      return this->readingType_.get ();
    }

    oadrReportDescriptionType::readingType_type& oadrReportDescriptionType::
    readingType ()
    {
      return this->readingType_.get ();
    }

    void oadrReportDescriptionType::
    readingType (const readingType_type& x)
    {
      this->readingType_.set (x);
    }

    void oadrReportDescriptionType::
    readingType (::std::auto_ptr< readingType_type > x)
    {
      this->readingType_.set (x);
    }

    const oadrReportDescriptionType::marketContext_optional& oadrReportDescriptionType::
    marketContext () const
    {
      return this->marketContext_;
    }

    oadrReportDescriptionType::marketContext_optional& oadrReportDescriptionType::
    marketContext ()
    {
      return this->marketContext_;
    }

    void oadrReportDescriptionType::
    marketContext (const marketContext_type& x)
    {
      this->marketContext_.set (x);
    }

    void oadrReportDescriptionType::
    marketContext (const marketContext_optional& x)
    {
      this->marketContext_ = x;
    }

    void oadrReportDescriptionType::
    marketContext (::std::auto_ptr< marketContext_type > x)
    {
      this->marketContext_.set (x);
    }

    const oadrReportDescriptionType::oadrSamplingRate_optional& oadrReportDescriptionType::
    oadrSamplingRate () const
    {
      return this->oadrSamplingRate_;
    }

    oadrReportDescriptionType::oadrSamplingRate_optional& oadrReportDescriptionType::
    oadrSamplingRate ()
    {
      return this->oadrSamplingRate_;
    }

    void oadrReportDescriptionType::
    oadrSamplingRate (const oadrSamplingRate_type& x)
    {
      this->oadrSamplingRate_.set (x);
    }

    void oadrReportDescriptionType::
    oadrSamplingRate (const oadrSamplingRate_optional& x)
    {
      this->oadrSamplingRate_ = x;
    }

    void oadrReportDescriptionType::
    oadrSamplingRate (::std::auto_ptr< oadrSamplingRate_type > x)
    {
      this->oadrSamplingRate_.set (x);
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace oadr2b
{
  namespace oadr
  {
    // oadrReportDescriptionType
    //

    oadrReportDescriptionType::
    oadrReportDescriptionType (const rID_type& rID,
                               const reportType_type& reportType,
                               const readingType_type& readingType)
    : ::xml_schema::type (),
      rID_ (rID, this),
      reportSubject_ (this),
      reportDataSource_ (this),
      reportType_ (reportType, this),
      itemBase_ (this),
      readingType_ (readingType, this),
      marketContext_ (this),
      oadrSamplingRate_ (this)
    {
    }

    oadrReportDescriptionType::
    oadrReportDescriptionType (::std::auto_ptr< rID_type > rID,
                               ::std::auto_ptr< reportType_type > reportType,
                               ::std::auto_ptr< readingType_type > readingType)
    : ::xml_schema::type (),
      rID_ (rID, this),
      reportSubject_ (this),
      reportDataSource_ (this),
      reportType_ (reportType, this),
      itemBase_ (this),
      readingType_ (readingType, this),
      marketContext_ (this),
      oadrSamplingRate_ (this)
    {
    }

    oadrReportDescriptionType::
    oadrReportDescriptionType (const oadrReportDescriptionType& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      rID_ (x.rID_, f, this),
      reportSubject_ (x.reportSubject_, f, this),
      reportDataSource_ (x.reportDataSource_, f, this),
      reportType_ (x.reportType_, f, this),
      itemBase_ (x.itemBase_, f, this),
      readingType_ (x.readingType_, f, this),
      marketContext_ (x.marketContext_, f, this),
      oadrSamplingRate_ (x.oadrSamplingRate_, f, this)
    {
    }

    oadrReportDescriptionType::
    oadrReportDescriptionType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      rID_ (this),
      reportSubject_ (this),
      reportDataSource_ (this),
      reportType_ (this),
      itemBase_ (this),
      readingType_ (this),
      marketContext_ (this),
      oadrSamplingRate_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void oadrReportDescriptionType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // rID
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "rID",
              "http://docs.oasis-open.org/ns/energyinterop/201110",
              &::xsd::cxx::tree::factory_impl< rID_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!rID_.present ())
            {
              ::std::auto_ptr< rID_type > r (
                dynamic_cast< rID_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->rID_.set (r);
              continue;
            }
          }
        }

        // reportSubject
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "reportSubject",
              "http://docs.oasis-open.org/ns/energyinterop/201110",
              &::xsd::cxx::tree::factory_impl< reportSubject_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->reportSubject_)
            {
              ::std::auto_ptr< reportSubject_type > r (
                dynamic_cast< reportSubject_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->reportSubject_.set (r);
              continue;
            }
          }
        }

        // reportDataSource
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "reportDataSource",
              "http://docs.oasis-open.org/ns/energyinterop/201110",
              &::xsd::cxx::tree::factory_impl< reportDataSource_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->reportDataSource_)
            {
              ::std::auto_ptr< reportDataSource_type > r (
                dynamic_cast< reportDataSource_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->reportDataSource_.set (r);
              continue;
            }
          }
        }

        // reportType
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "reportType",
              "http://docs.oasis-open.org/ns/energyinterop/201110",
              &::xsd::cxx::tree::factory_impl< reportType_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!reportType_.present ())
            {
              ::std::auto_ptr< reportType_type > r (
                dynamic_cast< reportType_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->reportType_.set (r);
              continue;
            }
          }
        }

        // itemBase
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "itemBase",
              "http://docs.oasis-open.org/ns/emix/2011/06",
              &::xsd::cxx::tree::factory_impl< itemBase_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->itemBase_)
            {
              ::std::auto_ptr< itemBase_type > r (
                dynamic_cast< itemBase_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->itemBase_.set (r);
              continue;
            }
          }
        }

        // readingType
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "readingType",
              "http://docs.oasis-open.org/ns/energyinterop/201110",
              &::xsd::cxx::tree::factory_impl< readingType_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!readingType_.present ())
            {
              ::std::auto_ptr< readingType_type > r (
                dynamic_cast< readingType_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->readingType_.set (r);
              continue;
            }
          }
        }

        // marketContext
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "marketContext",
              "http://docs.oasis-open.org/ns/emix/2011/06",
              &::xsd::cxx::tree::factory_impl< marketContext_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->marketContext_)
            {
              ::std::auto_ptr< marketContext_type > r (
                dynamic_cast< marketContext_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->marketContext_.set (r);
              continue;
            }
          }
        }

        // oadrSamplingRate
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "oadrSamplingRate",
              "http://openadr.org/oadr-2.0b/2012/07",
              &::xsd::cxx::tree::factory_impl< oadrSamplingRate_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->oadrSamplingRate_)
            {
              ::std::auto_ptr< oadrSamplingRate_type > r (
                dynamic_cast< oadrSamplingRate_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->oadrSamplingRate_.set (r);
              continue;
            }
          }
        }

        break;
      }

      if (!rID_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "rID",
          "http://docs.oasis-open.org/ns/energyinterop/201110");
      }

      if (!reportType_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "reportType",
          "http://docs.oasis-open.org/ns/energyinterop/201110");
      }

      if (!readingType_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "readingType",
          "http://docs.oasis-open.org/ns/energyinterop/201110");
      }
    }

    oadrReportDescriptionType* oadrReportDescriptionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class oadrReportDescriptionType (*this, f, c);
    }

    oadrReportDescriptionType& oadrReportDescriptionType::
    operator= (const oadrReportDescriptionType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->rID_ = x.rID_;
        this->reportSubject_ = x.reportSubject_;
        this->reportDataSource_ = x.reportDataSource_;
        this->reportType_ = x.reportType_;
        this->itemBase_ = x.itemBase_;
        this->readingType_ = x.readingType_;
        this->marketContext_ = x.marketContext_;
        this->oadrSamplingRate_ = x.oadrSamplingRate_;
      }

      return *this;
    }

    oadrReportDescriptionType::
    ~oadrReportDescriptionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, oadrReportDescriptionType >
    _xsd_oadrReportDescriptionType_type_factory_init (
      "oadrReportDescriptionType",
      "http://openadr.org/oadr-2.0b/2012/07");
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace oadr2b
{
  namespace oadr
  {
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace oadr2b
{
  namespace oadr
  {
    void
    operator<< (::xercesc::DOMElement& e, const oadrReportDescriptionType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // rID
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        const oadrReportDescriptionType::rID_type& x (i.rID ());
        if (typeid (oadrReportDescriptionType::rID_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "rID",
              "http://docs.oasis-open.org/ns/energyinterop/201110",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "rID",
            "http://docs.oasis-open.org/ns/energyinterop/201110",
            true, true, e, x);
      }

      // reportSubject
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        if (i.reportSubject ())
        {
          const oadrReportDescriptionType::reportSubject_type& x (*i.reportSubject ());
          if (typeid (oadrReportDescriptionType::reportSubject_type) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "reportSubject",
                "http://docs.oasis-open.org/ns/energyinterop/201110",
                e));

            s << x;
          }
          else
            tsm.serialize (
              "reportSubject",
              "http://docs.oasis-open.org/ns/energyinterop/201110",
              true, true, e, x);
        }
      }

      // reportDataSource
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        if (i.reportDataSource ())
        {
          const oadrReportDescriptionType::reportDataSource_type& x (*i.reportDataSource ());
          if (typeid (oadrReportDescriptionType::reportDataSource_type) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "reportDataSource",
                "http://docs.oasis-open.org/ns/energyinterop/201110",
                e));

            s << x;
          }
          else
            tsm.serialize (
              "reportDataSource",
              "http://docs.oasis-open.org/ns/energyinterop/201110",
              true, true, e, x);
        }
      }

      // reportType
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        const oadrReportDescriptionType::reportType_type& x (i.reportType ());
        if (typeid (oadrReportDescriptionType::reportType_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "reportType",
              "http://docs.oasis-open.org/ns/energyinterop/201110",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "reportType",
            "http://docs.oasis-open.org/ns/energyinterop/201110",
            true, true, e, x);
      }

      // itemBase
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        if (i.itemBase ())
        {
          const oadrReportDescriptionType::itemBase_type& x (*i.itemBase ());
          if (typeid (oadrReportDescriptionType::itemBase_type) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "itemBase",
                "http://docs.oasis-open.org/ns/emix/2011/06",
                e));

            s << x;
          }
          else
            tsm.serialize (
              "itemBase",
              "http://docs.oasis-open.org/ns/emix/2011/06",
              true, true, e, x);
        }
      }

      // readingType
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        const oadrReportDescriptionType::readingType_type& x (i.readingType ());
        if (typeid (oadrReportDescriptionType::readingType_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "readingType",
              "http://docs.oasis-open.org/ns/energyinterop/201110",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "readingType",
            "http://docs.oasis-open.org/ns/energyinterop/201110",
            true, true, e, x);
      }

      // marketContext
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        if (i.marketContext ())
        {
          const oadrReportDescriptionType::marketContext_type& x (*i.marketContext ());
          if (typeid (oadrReportDescriptionType::marketContext_type) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "marketContext",
                "http://docs.oasis-open.org/ns/emix/2011/06",
                e));

            s << x;
          }
          else
            tsm.serialize (
              "marketContext",
              "http://docs.oasis-open.org/ns/emix/2011/06",
              true, true, e, x);
        }
      }

      // oadrSamplingRate
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        if (i.oadrSamplingRate ())
        {
          const oadrReportDescriptionType::oadrSamplingRate_type& x (*i.oadrSamplingRate ());
          if (typeid (oadrReportDescriptionType::oadrSamplingRate_type) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "oadrSamplingRate",
                "http://openadr.org/oadr-2.0b/2012/07",
                e));

            s << x;
          }
          else
            tsm.serialize (
              "oadrSamplingRate",
              "http://openadr.org/oadr-2.0b/2012/07",
              true, true, e, x);
        }
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, oadrReportDescriptionType >
    _xsd_oadrReportDescriptionType_type_serializer_init (
      "oadrReportDescriptionType",
      "http://openadr.org/oadr-2.0b/2012/07");
  }
}

// Begin epilogue.
//
//
// End epilogue.

#include <xsd/cxx/post.hxx>

