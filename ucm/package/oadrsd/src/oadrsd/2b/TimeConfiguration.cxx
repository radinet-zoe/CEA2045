// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#include <xsd/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include "TimeConfiguration.hxx"

#include "DstRuleType.hxx"

#include "TimeType.hxx"

namespace espi
{
  // TimeConfiguration
  // 

  const TimeConfiguration::dstEndRule_type& TimeConfiguration::
  dstEndRule () const
  {
    return this->dstEndRule_.get ();
  }

  TimeConfiguration::dstEndRule_type& TimeConfiguration::
  dstEndRule ()
  {
    return this->dstEndRule_.get ();
  }

  void TimeConfiguration::
  dstEndRule (const dstEndRule_type& x)
  {
    this->dstEndRule_.set (x);
  }

  void TimeConfiguration::
  dstEndRule (::std::auto_ptr< dstEndRule_type > x)
  {
    this->dstEndRule_.set (x);
  }

  const TimeConfiguration::dstOffset_type& TimeConfiguration::
  dstOffset () const
  {
    return this->dstOffset_.get ();
  }

  TimeConfiguration::dstOffset_type& TimeConfiguration::
  dstOffset ()
  {
    return this->dstOffset_.get ();
  }

  void TimeConfiguration::
  dstOffset (const dstOffset_type& x)
  {
    this->dstOffset_.set (x);
  }

  void TimeConfiguration::
  dstOffset (::std::auto_ptr< dstOffset_type > x)
  {
    this->dstOffset_.set (x);
  }

  const TimeConfiguration::dstStartRule_type& TimeConfiguration::
  dstStartRule () const
  {
    return this->dstStartRule_.get ();
  }

  TimeConfiguration::dstStartRule_type& TimeConfiguration::
  dstStartRule ()
  {
    return this->dstStartRule_.get ();
  }

  void TimeConfiguration::
  dstStartRule (const dstStartRule_type& x)
  {
    this->dstStartRule_.set (x);
  }

  void TimeConfiguration::
  dstStartRule (::std::auto_ptr< dstStartRule_type > x)
  {
    this->dstStartRule_.set (x);
  }

  const TimeConfiguration::tzOffset_type& TimeConfiguration::
  tzOffset () const
  {
    return this->tzOffset_.get ();
  }

  TimeConfiguration::tzOffset_type& TimeConfiguration::
  tzOffset ()
  {
    return this->tzOffset_.get ();
  }

  void TimeConfiguration::
  tzOffset (const tzOffset_type& x)
  {
    this->tzOffset_.set (x);
  }

  void TimeConfiguration::
  tzOffset (::std::auto_ptr< tzOffset_type > x)
  {
    this->tzOffset_.set (x);
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace espi
{
  // TimeConfiguration
  //

  TimeConfiguration::
  TimeConfiguration (const dstEndRule_type& dstEndRule,
                     const dstOffset_type& dstOffset,
                     const dstStartRule_type& dstStartRule,
                     const tzOffset_type& tzOffset)
  : ::espi::IdentifiedObject (),
    dstEndRule_ (dstEndRule, this),
    dstOffset_ (dstOffset, this),
    dstStartRule_ (dstStartRule, this),
    tzOffset_ (tzOffset, this)
  {
  }

  TimeConfiguration::
  TimeConfiguration (::std::auto_ptr< dstEndRule_type > dstEndRule,
                     ::std::auto_ptr< dstOffset_type > dstOffset,
                     ::std::auto_ptr< dstStartRule_type > dstStartRule,
                     ::std::auto_ptr< tzOffset_type > tzOffset)
  : ::espi::IdentifiedObject (),
    dstEndRule_ (dstEndRule, this),
    dstOffset_ (dstOffset, this),
    dstStartRule_ (dstStartRule, this),
    tzOffset_ (tzOffset, this)
  {
  }

  TimeConfiguration::
  TimeConfiguration (const TimeConfiguration& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::espi::IdentifiedObject (x, f, c),
    dstEndRule_ (x.dstEndRule_, f, this),
    dstOffset_ (x.dstOffset_, f, this),
    dstStartRule_ (x.dstStartRule_, f, this),
    tzOffset_ (x.tzOffset_, f, this)
  {
  }

  TimeConfiguration::
  TimeConfiguration (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::espi::IdentifiedObject (e, f | ::xml_schema::flags::base, c),
    dstEndRule_ (this),
    dstOffset_ (this),
    dstStartRule_ (this),
    tzOffset_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void TimeConfiguration::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    this->::espi::IdentifiedObject::parse (p, f);

    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // dstEndRule
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "dstEndRule",
            "http://naesb.org/espi",
            &::xsd::cxx::tree::factory_impl< dstEndRule_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!dstEndRule_.present ())
          {
            ::std::auto_ptr< dstEndRule_type > r (
              dynamic_cast< dstEndRule_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->dstEndRule_.set (r);
            continue;
          }
        }
      }

      // dstOffset
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "dstOffset",
            "http://naesb.org/espi",
            &::xsd::cxx::tree::factory_impl< dstOffset_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!dstOffset_.present ())
          {
            ::std::auto_ptr< dstOffset_type > r (
              dynamic_cast< dstOffset_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->dstOffset_.set (r);
            continue;
          }
        }
      }

      // dstStartRule
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "dstStartRule",
            "http://naesb.org/espi",
            &::xsd::cxx::tree::factory_impl< dstStartRule_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!dstStartRule_.present ())
          {
            ::std::auto_ptr< dstStartRule_type > r (
              dynamic_cast< dstStartRule_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->dstStartRule_.set (r);
            continue;
          }
        }
      }

      // tzOffset
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "tzOffset",
            "http://naesb.org/espi",
            &::xsd::cxx::tree::factory_impl< tzOffset_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!tzOffset_.present ())
          {
            ::std::auto_ptr< tzOffset_type > r (
              dynamic_cast< tzOffset_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->tzOffset_.set (r);
            continue;
          }
        }
      }

      break;
    }

    if (!dstEndRule_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "dstEndRule",
        "http://naesb.org/espi");
    }

    if (!dstOffset_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "dstOffset",
        "http://naesb.org/espi");
    }

    if (!dstStartRule_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "dstStartRule",
        "http://naesb.org/espi");
    }

    if (!tzOffset_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "tzOffset",
        "http://naesb.org/espi");
    }
  }

  TimeConfiguration* TimeConfiguration::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class TimeConfiguration (*this, f, c);
  }

  TimeConfiguration& TimeConfiguration::
  operator= (const TimeConfiguration& x)
  {
    if (this != &x)
    {
      static_cast< ::espi::IdentifiedObject& > (*this) = x;
      this->dstEndRule_ = x.dstEndRule_;
      this->dstOffset_ = x.dstOffset_;
      this->dstStartRule_ = x.dstStartRule_;
      this->tzOffset_ = x.tzOffset_;
    }

    return *this;
  }

  TimeConfiguration::
  ~TimeConfiguration ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, TimeConfiguration >
  _xsd_TimeConfiguration_type_factory_init (
    "TimeConfiguration",
    "http://naesb.org/espi");
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace espi
{
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace espi
{
  void
  operator<< (::xercesc::DOMElement& e, const TimeConfiguration& i)
  {
    e << static_cast< const ::espi::IdentifiedObject& > (i);

    // dstEndRule
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      const TimeConfiguration::dstEndRule_type& x (i.dstEndRule ());
      if (typeid (TimeConfiguration::dstEndRule_type) == typeid (x))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "dstEndRule",
            "http://naesb.org/espi",
            e));

        s << x;
      }
      else
        tsm.serialize (
          "dstEndRule",
          "http://naesb.org/espi",
          false, true, e, x);
    }

    // dstOffset
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      const TimeConfiguration::dstOffset_type& x (i.dstOffset ());
      if (typeid (TimeConfiguration::dstOffset_type) == typeid (x))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "dstOffset",
            "http://naesb.org/espi",
            e));

        s << x;
      }
      else
        tsm.serialize (
          "dstOffset",
          "http://naesb.org/espi",
          false, true, e, x);
    }

    // dstStartRule
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      const TimeConfiguration::dstStartRule_type& x (i.dstStartRule ());
      if (typeid (TimeConfiguration::dstStartRule_type) == typeid (x))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "dstStartRule",
            "http://naesb.org/espi",
            e));

        s << x;
      }
      else
        tsm.serialize (
          "dstStartRule",
          "http://naesb.org/espi",
          false, true, e, x);
    }

    // tzOffset
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      const TimeConfiguration::tzOffset_type& x (i.tzOffset ());
      if (typeid (TimeConfiguration::tzOffset_type) == typeid (x))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "tzOffset",
            "http://naesb.org/espi",
            e));

        s << x;
      }
      else
        tsm.serialize (
          "tzOffset",
          "http://naesb.org/espi",
          false, true, e, x);
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, TimeConfiguration >
  _xsd_TimeConfiguration_type_serializer_init (
    "TimeConfiguration",
    "http://naesb.org/espi");
}

// Begin epilogue.
//
//
// End epilogue.

#include <xsd/cxx/post.hxx>

