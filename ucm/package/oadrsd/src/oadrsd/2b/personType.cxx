// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#include <xsd/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include "personType.hxx"

#include "uriType.hxx"

#include "emailType.hxx"

namespace Atom
{
  // personType
  // 

  const personType::name_sequence& personType::
  name () const
  {
    return this->name_;
  }

  personType::name_sequence& personType::
  name ()
  {
    return this->name_;
  }

  void personType::
  name (const name_sequence& s)
  {
    this->name_ = s;
  }

  const personType::uri_sequence& personType::
  uri () const
  {
    return this->uri_;
  }

  personType::uri_sequence& personType::
  uri ()
  {
    return this->uri_;
  }

  void personType::
  uri (const uri_sequence& s)
  {
    this->uri_ = s;
  }

  const personType::email_sequence& personType::
  email () const
  {
    return this->email_;
  }

  personType::email_sequence& personType::
  email ()
  {
    return this->email_;
  }

  void personType::
  email (const email_sequence& s)
  {
    this->email_ = s;
  }

  const personType::base_optional& personType::
  base () const
  {
    return this->base_;
  }

  personType::base_optional& personType::
  base ()
  {
    return this->base_;
  }

  void personType::
  base (const base_type& x)
  {
    this->base_.set (x);
  }

  void personType::
  base (const base_optional& x)
  {
    this->base_ = x;
  }

  void personType::
  base (::std::auto_ptr< base_type > x)
  {
    this->base_.set (x);
  }

  const personType::lang_optional& personType::
  lang () const
  {
    return this->lang_;
  }

  personType::lang_optional& personType::
  lang ()
  {
    return this->lang_;
  }

  void personType::
  lang (const lang_type& x)
  {
    this->lang_.set (x);
  }

  void personType::
  lang (const lang_optional& x)
  {
    this->lang_ = x;
  }

  void personType::
  lang (::std::auto_ptr< lang_type > x)
  {
    this->lang_.set (x);
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace Atom
{
  // personType
  //

  personType::
  personType ()
  : ::xml_schema::type (),
    name_ (this),
    uri_ (this),
    email_ (this),
    base_ (this),
    lang_ (this)
  {
  }

  personType::
  personType (const personType& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    name_ (x.name_, f, this),
    uri_ (x.uri_, f, this),
    email_ (x.email_, f, this),
    base_ (x.base_, f, this),
    lang_ (x.lang_, f, this)
  {
  }

  personType::
  personType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    name_ (this),
    uri_ (this),
    email_ (this),
    base_ (this),
    lang_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void personType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // name
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "name",
            "http://www.w3.org/2005/Atom",
            &::xsd::cxx::tree::factory_impl< name_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::auto_ptr< name_type > r (
            dynamic_cast< name_type* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->name_.push_back (r);
          continue;
        }
      }

      // uri
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "uri",
            "http://www.w3.org/2005/Atom",
            &::xsd::cxx::tree::factory_impl< uri_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::auto_ptr< uri_type > r (
            dynamic_cast< uri_type* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->uri_.push_back (r);
          continue;
        }
      }

      // email
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "email",
            "http://www.w3.org/2005/Atom",
            &::xsd::cxx::tree::factory_impl< email_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::auto_ptr< email_type > r (
            dynamic_cast< email_type* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->email_.push_back (r);
          continue;
        }
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "base" && n.namespace_ () == "http://www.w3.org/XML/1998/namespace")
      {
        this->base_.set (base_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "lang" && n.namespace_ () == "http://www.w3.org/XML/1998/namespace")
      {
        this->lang_.set (lang_traits::create (i, f, this));
        continue;
      }
    }
  }

  personType* personType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class personType (*this, f, c);
  }

  personType& personType::
  operator= (const personType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->name_ = x.name_;
      this->uri_ = x.uri_;
      this->email_ = x.email_;
      this->base_ = x.base_;
      this->lang_ = x.lang_;
    }

    return *this;
  }

  personType::
  ~personType ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, personType >
  _xsd_personType_type_factory_init (
    "personType",
    "http://www.w3.org/2005/Atom");
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace Atom
{
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace Atom
{
  void
  operator<< (::xercesc::DOMElement& e, const personType& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // name
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (personType::name_const_iterator
           b (i.name ().begin ()), n (i.name ().end ());
           b != n; ++b)
      {
        if (typeid (personType::name_type) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "name",
              "http://www.w3.org/2005/Atom",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "name",
            "http://www.w3.org/2005/Atom",
            false, true, e, *b);
      }
    }

    // uri
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (personType::uri_const_iterator
           b (i.uri ().begin ()), n (i.uri ().end ());
           b != n; ++b)
      {
        if (typeid (personType::uri_type) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "uri",
              "http://www.w3.org/2005/Atom",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "uri",
            "http://www.w3.org/2005/Atom",
            false, true, e, *b);
      }
    }

    // email
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (personType::email_const_iterator
           b (i.email ().begin ()), n (i.email ().end ());
           b != n; ++b)
      {
        if (typeid (personType::email_type) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "email",
              "http://www.w3.org/2005/Atom",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "email",
            "http://www.w3.org/2005/Atom",
            false, true, e, *b);
      }
    }

    // base
    //
    if (i.base ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "base",
          "http://www.w3.org/XML/1998/namespace",
          e));

      a << *i.base ();
    }

    // lang
    //
    if (i.lang ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "lang",
          "http://www.w3.org/XML/1998/namespace",
          e));

      a << *i.lang ();
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, personType >
  _xsd_personType_type_serializer_init (
    "personType",
    "http://www.w3.org/2005/Atom");
}

// Begin epilogue.
//
//
// End epilogue.

#include <xsd/cxx/post.hxx>

