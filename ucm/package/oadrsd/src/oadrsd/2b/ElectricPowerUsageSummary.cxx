// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#include <xsd/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include "ElectricPowerUsageSummary.hxx"

#include "DateTimeInterval.hxx"

#include "Int48.hxx"

#include "LineItem.hxx"

#include "Currency.hxx"

#include "SummaryMeasurement.hxx"

#include "QualityOfReading.hxx"

#include "TimeType.hxx"

namespace espi
{
  // ElectricPowerUsageSummary
  // 

  const ElectricPowerUsageSummary::billingPeriod_optional& ElectricPowerUsageSummary::
  billingPeriod () const
  {
    return this->billingPeriod_;
  }

  ElectricPowerUsageSummary::billingPeriod_optional& ElectricPowerUsageSummary::
  billingPeriod ()
  {
    return this->billingPeriod_;
  }

  void ElectricPowerUsageSummary::
  billingPeriod (const billingPeriod_type& x)
  {
    this->billingPeriod_.set (x);
  }

  void ElectricPowerUsageSummary::
  billingPeriod (const billingPeriod_optional& x)
  {
    this->billingPeriod_ = x;
  }

  void ElectricPowerUsageSummary::
  billingPeriod (::std::auto_ptr< billingPeriod_type > x)
  {
    this->billingPeriod_.set (x);
  }

  const ElectricPowerUsageSummary::billLastPeriod_optional& ElectricPowerUsageSummary::
  billLastPeriod () const
  {
    return this->billLastPeriod_;
  }

  ElectricPowerUsageSummary::billLastPeriod_optional& ElectricPowerUsageSummary::
  billLastPeriod ()
  {
    return this->billLastPeriod_;
  }

  void ElectricPowerUsageSummary::
  billLastPeriod (const billLastPeriod_type& x)
  {
    this->billLastPeriod_.set (x);
  }

  void ElectricPowerUsageSummary::
  billLastPeriod (const billLastPeriod_optional& x)
  {
    this->billLastPeriod_ = x;
  }

  void ElectricPowerUsageSummary::
  billLastPeriod (::std::auto_ptr< billLastPeriod_type > x)
  {
    this->billLastPeriod_.set (x);
  }

  const ElectricPowerUsageSummary::billToDate_optional& ElectricPowerUsageSummary::
  billToDate () const
  {
    return this->billToDate_;
  }

  ElectricPowerUsageSummary::billToDate_optional& ElectricPowerUsageSummary::
  billToDate ()
  {
    return this->billToDate_;
  }

  void ElectricPowerUsageSummary::
  billToDate (const billToDate_type& x)
  {
    this->billToDate_.set (x);
  }

  void ElectricPowerUsageSummary::
  billToDate (const billToDate_optional& x)
  {
    this->billToDate_ = x;
  }

  void ElectricPowerUsageSummary::
  billToDate (::std::auto_ptr< billToDate_type > x)
  {
    this->billToDate_.set (x);
  }

  const ElectricPowerUsageSummary::costAdditionalLastPeriod_optional& ElectricPowerUsageSummary::
  costAdditionalLastPeriod () const
  {
    return this->costAdditionalLastPeriod_;
  }

  ElectricPowerUsageSummary::costAdditionalLastPeriod_optional& ElectricPowerUsageSummary::
  costAdditionalLastPeriod ()
  {
    return this->costAdditionalLastPeriod_;
  }

  void ElectricPowerUsageSummary::
  costAdditionalLastPeriod (const costAdditionalLastPeriod_type& x)
  {
    this->costAdditionalLastPeriod_.set (x);
  }

  void ElectricPowerUsageSummary::
  costAdditionalLastPeriod (const costAdditionalLastPeriod_optional& x)
  {
    this->costAdditionalLastPeriod_ = x;
  }

  void ElectricPowerUsageSummary::
  costAdditionalLastPeriod (::std::auto_ptr< costAdditionalLastPeriod_type > x)
  {
    this->costAdditionalLastPeriod_.set (x);
  }

  const ElectricPowerUsageSummary::costAdditionalDetailLastPeriod_sequence& ElectricPowerUsageSummary::
  costAdditionalDetailLastPeriod () const
  {
    return this->costAdditionalDetailLastPeriod_;
  }

  ElectricPowerUsageSummary::costAdditionalDetailLastPeriod_sequence& ElectricPowerUsageSummary::
  costAdditionalDetailLastPeriod ()
  {
    return this->costAdditionalDetailLastPeriod_;
  }

  void ElectricPowerUsageSummary::
  costAdditionalDetailLastPeriod (const costAdditionalDetailLastPeriod_sequence& s)
  {
    this->costAdditionalDetailLastPeriod_ = s;
  }

  const ElectricPowerUsageSummary::currency_optional& ElectricPowerUsageSummary::
  currency () const
  {
    return this->currency_;
  }

  ElectricPowerUsageSummary::currency_optional& ElectricPowerUsageSummary::
  currency ()
  {
    return this->currency_;
  }

  void ElectricPowerUsageSummary::
  currency (const currency_type& x)
  {
    this->currency_.set (x);
  }

  void ElectricPowerUsageSummary::
  currency (const currency_optional& x)
  {
    this->currency_ = x;
  }

  void ElectricPowerUsageSummary::
  currency (::std::auto_ptr< currency_type > x)
  {
    this->currency_.set (x);
  }

  const ElectricPowerUsageSummary::overallConsumptionLastPeriod_optional& ElectricPowerUsageSummary::
  overallConsumptionLastPeriod () const
  {
    return this->overallConsumptionLastPeriod_;
  }

  ElectricPowerUsageSummary::overallConsumptionLastPeriod_optional& ElectricPowerUsageSummary::
  overallConsumptionLastPeriod ()
  {
    return this->overallConsumptionLastPeriod_;
  }

  void ElectricPowerUsageSummary::
  overallConsumptionLastPeriod (const overallConsumptionLastPeriod_type& x)
  {
    this->overallConsumptionLastPeriod_.set (x);
  }

  void ElectricPowerUsageSummary::
  overallConsumptionLastPeriod (const overallConsumptionLastPeriod_optional& x)
  {
    this->overallConsumptionLastPeriod_ = x;
  }

  void ElectricPowerUsageSummary::
  overallConsumptionLastPeriod (::std::auto_ptr< overallConsumptionLastPeriod_type > x)
  {
    this->overallConsumptionLastPeriod_.set (x);
  }

  const ElectricPowerUsageSummary::currentBillingPeriodOverAllConsumption_optional& ElectricPowerUsageSummary::
  currentBillingPeriodOverAllConsumption () const
  {
    return this->currentBillingPeriodOverAllConsumption_;
  }

  ElectricPowerUsageSummary::currentBillingPeriodOverAllConsumption_optional& ElectricPowerUsageSummary::
  currentBillingPeriodOverAllConsumption ()
  {
    return this->currentBillingPeriodOverAllConsumption_;
  }

  void ElectricPowerUsageSummary::
  currentBillingPeriodOverAllConsumption (const currentBillingPeriodOverAllConsumption_type& x)
  {
    this->currentBillingPeriodOverAllConsumption_.set (x);
  }

  void ElectricPowerUsageSummary::
  currentBillingPeriodOverAllConsumption (const currentBillingPeriodOverAllConsumption_optional& x)
  {
    this->currentBillingPeriodOverAllConsumption_ = x;
  }

  void ElectricPowerUsageSummary::
  currentBillingPeriodOverAllConsumption (::std::auto_ptr< currentBillingPeriodOverAllConsumption_type > x)
  {
    this->currentBillingPeriodOverAllConsumption_.set (x);
  }

  const ElectricPowerUsageSummary::currentDayLastYearNetConsumption_optional& ElectricPowerUsageSummary::
  currentDayLastYearNetConsumption () const
  {
    return this->currentDayLastYearNetConsumption_;
  }

  ElectricPowerUsageSummary::currentDayLastYearNetConsumption_optional& ElectricPowerUsageSummary::
  currentDayLastYearNetConsumption ()
  {
    return this->currentDayLastYearNetConsumption_;
  }

  void ElectricPowerUsageSummary::
  currentDayLastYearNetConsumption (const currentDayLastYearNetConsumption_type& x)
  {
    this->currentDayLastYearNetConsumption_.set (x);
  }

  void ElectricPowerUsageSummary::
  currentDayLastYearNetConsumption (const currentDayLastYearNetConsumption_optional& x)
  {
    this->currentDayLastYearNetConsumption_ = x;
  }

  void ElectricPowerUsageSummary::
  currentDayLastYearNetConsumption (::std::auto_ptr< currentDayLastYearNetConsumption_type > x)
  {
    this->currentDayLastYearNetConsumption_.set (x);
  }

  const ElectricPowerUsageSummary::currentDayNetConsumption_optional& ElectricPowerUsageSummary::
  currentDayNetConsumption () const
  {
    return this->currentDayNetConsumption_;
  }

  ElectricPowerUsageSummary::currentDayNetConsumption_optional& ElectricPowerUsageSummary::
  currentDayNetConsumption ()
  {
    return this->currentDayNetConsumption_;
  }

  void ElectricPowerUsageSummary::
  currentDayNetConsumption (const currentDayNetConsumption_type& x)
  {
    this->currentDayNetConsumption_.set (x);
  }

  void ElectricPowerUsageSummary::
  currentDayNetConsumption (const currentDayNetConsumption_optional& x)
  {
    this->currentDayNetConsumption_ = x;
  }

  void ElectricPowerUsageSummary::
  currentDayNetConsumption (::std::auto_ptr< currentDayNetConsumption_type > x)
  {
    this->currentDayNetConsumption_.set (x);
  }

  const ElectricPowerUsageSummary::currentDayOverallConsumption_optional& ElectricPowerUsageSummary::
  currentDayOverallConsumption () const
  {
    return this->currentDayOverallConsumption_;
  }

  ElectricPowerUsageSummary::currentDayOverallConsumption_optional& ElectricPowerUsageSummary::
  currentDayOverallConsumption ()
  {
    return this->currentDayOverallConsumption_;
  }

  void ElectricPowerUsageSummary::
  currentDayOverallConsumption (const currentDayOverallConsumption_type& x)
  {
    this->currentDayOverallConsumption_.set (x);
  }

  void ElectricPowerUsageSummary::
  currentDayOverallConsumption (const currentDayOverallConsumption_optional& x)
  {
    this->currentDayOverallConsumption_ = x;
  }

  void ElectricPowerUsageSummary::
  currentDayOverallConsumption (::std::auto_ptr< currentDayOverallConsumption_type > x)
  {
    this->currentDayOverallConsumption_.set (x);
  }

  const ElectricPowerUsageSummary::peakDemand_optional& ElectricPowerUsageSummary::
  peakDemand () const
  {
    return this->peakDemand_;
  }

  ElectricPowerUsageSummary::peakDemand_optional& ElectricPowerUsageSummary::
  peakDemand ()
  {
    return this->peakDemand_;
  }

  void ElectricPowerUsageSummary::
  peakDemand (const peakDemand_type& x)
  {
    this->peakDemand_.set (x);
  }

  void ElectricPowerUsageSummary::
  peakDemand (const peakDemand_optional& x)
  {
    this->peakDemand_ = x;
  }

  void ElectricPowerUsageSummary::
  peakDemand (::std::auto_ptr< peakDemand_type > x)
  {
    this->peakDemand_.set (x);
  }

  const ElectricPowerUsageSummary::previousDayLastYearOverallConsumption_optional& ElectricPowerUsageSummary::
  previousDayLastYearOverallConsumption () const
  {
    return this->previousDayLastYearOverallConsumption_;
  }

  ElectricPowerUsageSummary::previousDayLastYearOverallConsumption_optional& ElectricPowerUsageSummary::
  previousDayLastYearOverallConsumption ()
  {
    return this->previousDayLastYearOverallConsumption_;
  }

  void ElectricPowerUsageSummary::
  previousDayLastYearOverallConsumption (const previousDayLastYearOverallConsumption_type& x)
  {
    this->previousDayLastYearOverallConsumption_.set (x);
  }

  void ElectricPowerUsageSummary::
  previousDayLastYearOverallConsumption (const previousDayLastYearOverallConsumption_optional& x)
  {
    this->previousDayLastYearOverallConsumption_ = x;
  }

  void ElectricPowerUsageSummary::
  previousDayLastYearOverallConsumption (::std::auto_ptr< previousDayLastYearOverallConsumption_type > x)
  {
    this->previousDayLastYearOverallConsumption_.set (x);
  }

  const ElectricPowerUsageSummary::previousDayNetConsumption_optional& ElectricPowerUsageSummary::
  previousDayNetConsumption () const
  {
    return this->previousDayNetConsumption_;
  }

  ElectricPowerUsageSummary::previousDayNetConsumption_optional& ElectricPowerUsageSummary::
  previousDayNetConsumption ()
  {
    return this->previousDayNetConsumption_;
  }

  void ElectricPowerUsageSummary::
  previousDayNetConsumption (const previousDayNetConsumption_type& x)
  {
    this->previousDayNetConsumption_.set (x);
  }

  void ElectricPowerUsageSummary::
  previousDayNetConsumption (const previousDayNetConsumption_optional& x)
  {
    this->previousDayNetConsumption_ = x;
  }

  void ElectricPowerUsageSummary::
  previousDayNetConsumption (::std::auto_ptr< previousDayNetConsumption_type > x)
  {
    this->previousDayNetConsumption_.set (x);
  }

  const ElectricPowerUsageSummary::previousDayOverallConsumption_optional& ElectricPowerUsageSummary::
  previousDayOverallConsumption () const
  {
    return this->previousDayOverallConsumption_;
  }

  ElectricPowerUsageSummary::previousDayOverallConsumption_optional& ElectricPowerUsageSummary::
  previousDayOverallConsumption ()
  {
    return this->previousDayOverallConsumption_;
  }

  void ElectricPowerUsageSummary::
  previousDayOverallConsumption (const previousDayOverallConsumption_type& x)
  {
    this->previousDayOverallConsumption_.set (x);
  }

  void ElectricPowerUsageSummary::
  previousDayOverallConsumption (const previousDayOverallConsumption_optional& x)
  {
    this->previousDayOverallConsumption_ = x;
  }

  void ElectricPowerUsageSummary::
  previousDayOverallConsumption (::std::auto_ptr< previousDayOverallConsumption_type > x)
  {
    this->previousDayOverallConsumption_.set (x);
  }

  const ElectricPowerUsageSummary::qualityOfReading_optional& ElectricPowerUsageSummary::
  qualityOfReading () const
  {
    return this->qualityOfReading_;
  }

  ElectricPowerUsageSummary::qualityOfReading_optional& ElectricPowerUsageSummary::
  qualityOfReading ()
  {
    return this->qualityOfReading_;
  }

  void ElectricPowerUsageSummary::
  qualityOfReading (const qualityOfReading_type& x)
  {
    this->qualityOfReading_.set (x);
  }

  void ElectricPowerUsageSummary::
  qualityOfReading (const qualityOfReading_optional& x)
  {
    this->qualityOfReading_ = x;
  }

  void ElectricPowerUsageSummary::
  qualityOfReading (::std::auto_ptr< qualityOfReading_type > x)
  {
    this->qualityOfReading_.set (x);
  }

  const ElectricPowerUsageSummary::ratchetDemand_optional& ElectricPowerUsageSummary::
  ratchetDemand () const
  {
    return this->ratchetDemand_;
  }

  ElectricPowerUsageSummary::ratchetDemand_optional& ElectricPowerUsageSummary::
  ratchetDemand ()
  {
    return this->ratchetDemand_;
  }

  void ElectricPowerUsageSummary::
  ratchetDemand (const ratchetDemand_type& x)
  {
    this->ratchetDemand_.set (x);
  }

  void ElectricPowerUsageSummary::
  ratchetDemand (const ratchetDemand_optional& x)
  {
    this->ratchetDemand_ = x;
  }

  void ElectricPowerUsageSummary::
  ratchetDemand (::std::auto_ptr< ratchetDemand_type > x)
  {
    this->ratchetDemand_.set (x);
  }

  const ElectricPowerUsageSummary::ratchetDemandPeriod_optional& ElectricPowerUsageSummary::
  ratchetDemandPeriod () const
  {
    return this->ratchetDemandPeriod_;
  }

  ElectricPowerUsageSummary::ratchetDemandPeriod_optional& ElectricPowerUsageSummary::
  ratchetDemandPeriod ()
  {
    return this->ratchetDemandPeriod_;
  }

  void ElectricPowerUsageSummary::
  ratchetDemandPeriod (const ratchetDemandPeriod_type& x)
  {
    this->ratchetDemandPeriod_.set (x);
  }

  void ElectricPowerUsageSummary::
  ratchetDemandPeriod (const ratchetDemandPeriod_optional& x)
  {
    this->ratchetDemandPeriod_ = x;
  }

  void ElectricPowerUsageSummary::
  ratchetDemandPeriod (::std::auto_ptr< ratchetDemandPeriod_type > x)
  {
    this->ratchetDemandPeriod_.set (x);
  }

  const ElectricPowerUsageSummary::statusTimeStamp_type& ElectricPowerUsageSummary::
  statusTimeStamp () const
  {
    return this->statusTimeStamp_.get ();
  }

  ElectricPowerUsageSummary::statusTimeStamp_type& ElectricPowerUsageSummary::
  statusTimeStamp ()
  {
    return this->statusTimeStamp_.get ();
  }

  void ElectricPowerUsageSummary::
  statusTimeStamp (const statusTimeStamp_type& x)
  {
    this->statusTimeStamp_.set (x);
  }

  void ElectricPowerUsageSummary::
  statusTimeStamp (::std::auto_ptr< statusTimeStamp_type > x)
  {
    this->statusTimeStamp_.set (x);
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace espi
{
  // ElectricPowerUsageSummary
  //

  ElectricPowerUsageSummary::
  ElectricPowerUsageSummary (const statusTimeStamp_type& statusTimeStamp)
  : ::espi::IdentifiedObject (),
    billingPeriod_ (this),
    billLastPeriod_ (this),
    billToDate_ (this),
    costAdditionalLastPeriod_ (this),
    costAdditionalDetailLastPeriod_ (this),
    currency_ (this),
    overallConsumptionLastPeriod_ (this),
    currentBillingPeriodOverAllConsumption_ (this),
    currentDayLastYearNetConsumption_ (this),
    currentDayNetConsumption_ (this),
    currentDayOverallConsumption_ (this),
    peakDemand_ (this),
    previousDayLastYearOverallConsumption_ (this),
    previousDayNetConsumption_ (this),
    previousDayOverallConsumption_ (this),
    qualityOfReading_ (this),
    ratchetDemand_ (this),
    ratchetDemandPeriod_ (this),
    statusTimeStamp_ (statusTimeStamp, this)
  {
  }

  ElectricPowerUsageSummary::
  ElectricPowerUsageSummary (::std::auto_ptr< statusTimeStamp_type > statusTimeStamp)
  : ::espi::IdentifiedObject (),
    billingPeriod_ (this),
    billLastPeriod_ (this),
    billToDate_ (this),
    costAdditionalLastPeriod_ (this),
    costAdditionalDetailLastPeriod_ (this),
    currency_ (this),
    overallConsumptionLastPeriod_ (this),
    currentBillingPeriodOverAllConsumption_ (this),
    currentDayLastYearNetConsumption_ (this),
    currentDayNetConsumption_ (this),
    currentDayOverallConsumption_ (this),
    peakDemand_ (this),
    previousDayLastYearOverallConsumption_ (this),
    previousDayNetConsumption_ (this),
    previousDayOverallConsumption_ (this),
    qualityOfReading_ (this),
    ratchetDemand_ (this),
    ratchetDemandPeriod_ (this),
    statusTimeStamp_ (statusTimeStamp, this)
  {
  }

  ElectricPowerUsageSummary::
  ElectricPowerUsageSummary (const ElectricPowerUsageSummary& x,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::espi::IdentifiedObject (x, f, c),
    billingPeriod_ (x.billingPeriod_, f, this),
    billLastPeriod_ (x.billLastPeriod_, f, this),
    billToDate_ (x.billToDate_, f, this),
    costAdditionalLastPeriod_ (x.costAdditionalLastPeriod_, f, this),
    costAdditionalDetailLastPeriod_ (x.costAdditionalDetailLastPeriod_, f, this),
    currency_ (x.currency_, f, this),
    overallConsumptionLastPeriod_ (x.overallConsumptionLastPeriod_, f, this),
    currentBillingPeriodOverAllConsumption_ (x.currentBillingPeriodOverAllConsumption_, f, this),
    currentDayLastYearNetConsumption_ (x.currentDayLastYearNetConsumption_, f, this),
    currentDayNetConsumption_ (x.currentDayNetConsumption_, f, this),
    currentDayOverallConsumption_ (x.currentDayOverallConsumption_, f, this),
    peakDemand_ (x.peakDemand_, f, this),
    previousDayLastYearOverallConsumption_ (x.previousDayLastYearOverallConsumption_, f, this),
    previousDayNetConsumption_ (x.previousDayNetConsumption_, f, this),
    previousDayOverallConsumption_ (x.previousDayOverallConsumption_, f, this),
    qualityOfReading_ (x.qualityOfReading_, f, this),
    ratchetDemand_ (x.ratchetDemand_, f, this),
    ratchetDemandPeriod_ (x.ratchetDemandPeriod_, f, this),
    statusTimeStamp_ (x.statusTimeStamp_, f, this)
  {
  }

  ElectricPowerUsageSummary::
  ElectricPowerUsageSummary (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::espi::IdentifiedObject (e, f | ::xml_schema::flags::base, c),
    billingPeriod_ (this),
    billLastPeriod_ (this),
    billToDate_ (this),
    costAdditionalLastPeriod_ (this),
    costAdditionalDetailLastPeriod_ (this),
    currency_ (this),
    overallConsumptionLastPeriod_ (this),
    currentBillingPeriodOverAllConsumption_ (this),
    currentDayLastYearNetConsumption_ (this),
    currentDayNetConsumption_ (this),
    currentDayOverallConsumption_ (this),
    peakDemand_ (this),
    previousDayLastYearOverallConsumption_ (this),
    previousDayNetConsumption_ (this),
    previousDayOverallConsumption_ (this),
    qualityOfReading_ (this),
    ratchetDemand_ (this),
    ratchetDemandPeriod_ (this),
    statusTimeStamp_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void ElectricPowerUsageSummary::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    this->::espi::IdentifiedObject::parse (p, f);

    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // billingPeriod
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "billingPeriod",
            "http://naesb.org/espi",
            &::xsd::cxx::tree::factory_impl< billingPeriod_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->billingPeriod_)
          {
            ::std::auto_ptr< billingPeriod_type > r (
              dynamic_cast< billingPeriod_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->billingPeriod_.set (r);
            continue;
          }
        }
      }

      // billLastPeriod
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "billLastPeriod",
            "http://naesb.org/espi",
            &::xsd::cxx::tree::factory_impl< billLastPeriod_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->billLastPeriod_)
          {
            ::std::auto_ptr< billLastPeriod_type > r (
              dynamic_cast< billLastPeriod_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->billLastPeriod_.set (r);
            continue;
          }
        }
      }

      // billToDate
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "billToDate",
            "http://naesb.org/espi",
            &::xsd::cxx::tree::factory_impl< billToDate_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->billToDate_)
          {
            ::std::auto_ptr< billToDate_type > r (
              dynamic_cast< billToDate_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->billToDate_.set (r);
            continue;
          }
        }
      }

      // costAdditionalLastPeriod
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "costAdditionalLastPeriod",
            "http://naesb.org/espi",
            &::xsd::cxx::tree::factory_impl< costAdditionalLastPeriod_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->costAdditionalLastPeriod_)
          {
            ::std::auto_ptr< costAdditionalLastPeriod_type > r (
              dynamic_cast< costAdditionalLastPeriod_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->costAdditionalLastPeriod_.set (r);
            continue;
          }
        }
      }

      // costAdditionalDetailLastPeriod
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "costAdditionalDetailLastPeriod",
            "http://naesb.org/espi",
            &::xsd::cxx::tree::factory_impl< costAdditionalDetailLastPeriod_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          ::std::auto_ptr< costAdditionalDetailLastPeriod_type > r (
            dynamic_cast< costAdditionalDetailLastPeriod_type* > (tmp.get ()));

          if (r.get ())
            tmp.release ();
          else
            throw ::xsd::cxx::tree::not_derived< char > ();

          this->costAdditionalDetailLastPeriod_.push_back (r);
          continue;
        }
      }

      // currency
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "currency",
            "http://naesb.org/espi",
            &::xsd::cxx::tree::factory_impl< currency_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->currency_)
          {
            ::std::auto_ptr< currency_type > r (
              dynamic_cast< currency_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->currency_.set (r);
            continue;
          }
        }
      }

      // overallConsumptionLastPeriod
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "overallConsumptionLastPeriod",
            "http://naesb.org/espi",
            &::xsd::cxx::tree::factory_impl< overallConsumptionLastPeriod_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->overallConsumptionLastPeriod_)
          {
            ::std::auto_ptr< overallConsumptionLastPeriod_type > r (
              dynamic_cast< overallConsumptionLastPeriod_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->overallConsumptionLastPeriod_.set (r);
            continue;
          }
        }
      }

      // currentBillingPeriodOverAllConsumption
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "currentBillingPeriodOverAllConsumption",
            "http://naesb.org/espi",
            &::xsd::cxx::tree::factory_impl< currentBillingPeriodOverAllConsumption_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->currentBillingPeriodOverAllConsumption_)
          {
            ::std::auto_ptr< currentBillingPeriodOverAllConsumption_type > r (
              dynamic_cast< currentBillingPeriodOverAllConsumption_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->currentBillingPeriodOverAllConsumption_.set (r);
            continue;
          }
        }
      }

      // currentDayLastYearNetConsumption
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "currentDayLastYearNetConsumption",
            "http://naesb.org/espi",
            &::xsd::cxx::tree::factory_impl< currentDayLastYearNetConsumption_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->currentDayLastYearNetConsumption_)
          {
            ::std::auto_ptr< currentDayLastYearNetConsumption_type > r (
              dynamic_cast< currentDayLastYearNetConsumption_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->currentDayLastYearNetConsumption_.set (r);
            continue;
          }
        }
      }

      // currentDayNetConsumption
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "currentDayNetConsumption",
            "http://naesb.org/espi",
            &::xsd::cxx::tree::factory_impl< currentDayNetConsumption_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->currentDayNetConsumption_)
          {
            ::std::auto_ptr< currentDayNetConsumption_type > r (
              dynamic_cast< currentDayNetConsumption_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->currentDayNetConsumption_.set (r);
            continue;
          }
        }
      }

      // currentDayOverallConsumption
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "currentDayOverallConsumption",
            "http://naesb.org/espi",
            &::xsd::cxx::tree::factory_impl< currentDayOverallConsumption_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->currentDayOverallConsumption_)
          {
            ::std::auto_ptr< currentDayOverallConsumption_type > r (
              dynamic_cast< currentDayOverallConsumption_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->currentDayOverallConsumption_.set (r);
            continue;
          }
        }
      }

      // peakDemand
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "peakDemand",
            "http://naesb.org/espi",
            &::xsd::cxx::tree::factory_impl< peakDemand_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->peakDemand_)
          {
            ::std::auto_ptr< peakDemand_type > r (
              dynamic_cast< peakDemand_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->peakDemand_.set (r);
            continue;
          }
        }
      }

      // previousDayLastYearOverallConsumption
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "previousDayLastYearOverallConsumption",
            "http://naesb.org/espi",
            &::xsd::cxx::tree::factory_impl< previousDayLastYearOverallConsumption_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->previousDayLastYearOverallConsumption_)
          {
            ::std::auto_ptr< previousDayLastYearOverallConsumption_type > r (
              dynamic_cast< previousDayLastYearOverallConsumption_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->previousDayLastYearOverallConsumption_.set (r);
            continue;
          }
        }
      }

      // previousDayNetConsumption
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "previousDayNetConsumption",
            "http://naesb.org/espi",
            &::xsd::cxx::tree::factory_impl< previousDayNetConsumption_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->previousDayNetConsumption_)
          {
            ::std::auto_ptr< previousDayNetConsumption_type > r (
              dynamic_cast< previousDayNetConsumption_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->previousDayNetConsumption_.set (r);
            continue;
          }
        }
      }

      // previousDayOverallConsumption
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "previousDayOverallConsumption",
            "http://naesb.org/espi",
            &::xsd::cxx::tree::factory_impl< previousDayOverallConsumption_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->previousDayOverallConsumption_)
          {
            ::std::auto_ptr< previousDayOverallConsumption_type > r (
              dynamic_cast< previousDayOverallConsumption_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->previousDayOverallConsumption_.set (r);
            continue;
          }
        }
      }

      // qualityOfReading
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "qualityOfReading",
            "http://naesb.org/espi",
            &::xsd::cxx::tree::factory_impl< qualityOfReading_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->qualityOfReading_)
          {
            ::std::auto_ptr< qualityOfReading_type > r (
              dynamic_cast< qualityOfReading_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->qualityOfReading_.set (r);
            continue;
          }
        }
      }

      // ratchetDemand
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "ratchetDemand",
            "http://naesb.org/espi",
            &::xsd::cxx::tree::factory_impl< ratchetDemand_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->ratchetDemand_)
          {
            ::std::auto_ptr< ratchetDemand_type > r (
              dynamic_cast< ratchetDemand_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->ratchetDemand_.set (r);
            continue;
          }
        }
      }

      // ratchetDemandPeriod
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "ratchetDemandPeriod",
            "http://naesb.org/espi",
            &::xsd::cxx::tree::factory_impl< ratchetDemandPeriod_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->ratchetDemandPeriod_)
          {
            ::std::auto_ptr< ratchetDemandPeriod_type > r (
              dynamic_cast< ratchetDemandPeriod_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->ratchetDemandPeriod_.set (r);
            continue;
          }
        }
      }

      // statusTimeStamp
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "statusTimeStamp",
            "http://naesb.org/espi",
            &::xsd::cxx::tree::factory_impl< statusTimeStamp_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!statusTimeStamp_.present ())
          {
            ::std::auto_ptr< statusTimeStamp_type > r (
              dynamic_cast< statusTimeStamp_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->statusTimeStamp_.set (r);
            continue;
          }
        }
      }

      break;
    }

    if (!statusTimeStamp_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "statusTimeStamp",
        "http://naesb.org/espi");
    }
  }

  ElectricPowerUsageSummary* ElectricPowerUsageSummary::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ElectricPowerUsageSummary (*this, f, c);
  }

  ElectricPowerUsageSummary& ElectricPowerUsageSummary::
  operator= (const ElectricPowerUsageSummary& x)
  {
    if (this != &x)
    {
      static_cast< ::espi::IdentifiedObject& > (*this) = x;
      this->billingPeriod_ = x.billingPeriod_;
      this->billLastPeriod_ = x.billLastPeriod_;
      this->billToDate_ = x.billToDate_;
      this->costAdditionalLastPeriod_ = x.costAdditionalLastPeriod_;
      this->costAdditionalDetailLastPeriod_ = x.costAdditionalDetailLastPeriod_;
      this->currency_ = x.currency_;
      this->overallConsumptionLastPeriod_ = x.overallConsumptionLastPeriod_;
      this->currentBillingPeriodOverAllConsumption_ = x.currentBillingPeriodOverAllConsumption_;
      this->currentDayLastYearNetConsumption_ = x.currentDayLastYearNetConsumption_;
      this->currentDayNetConsumption_ = x.currentDayNetConsumption_;
      this->currentDayOverallConsumption_ = x.currentDayOverallConsumption_;
      this->peakDemand_ = x.peakDemand_;
      this->previousDayLastYearOverallConsumption_ = x.previousDayLastYearOverallConsumption_;
      this->previousDayNetConsumption_ = x.previousDayNetConsumption_;
      this->previousDayOverallConsumption_ = x.previousDayOverallConsumption_;
      this->qualityOfReading_ = x.qualityOfReading_;
      this->ratchetDemand_ = x.ratchetDemand_;
      this->ratchetDemandPeriod_ = x.ratchetDemandPeriod_;
      this->statusTimeStamp_ = x.statusTimeStamp_;
    }

    return *this;
  }

  ElectricPowerUsageSummary::
  ~ElectricPowerUsageSummary ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ElectricPowerUsageSummary >
  _xsd_ElectricPowerUsageSummary_type_factory_init (
    "ElectricPowerUsageSummary",
    "http://naesb.org/espi");
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace espi
{
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace espi
{
  void
  operator<< (::xercesc::DOMElement& e, const ElectricPowerUsageSummary& i)
  {
    e << static_cast< const ::espi::IdentifiedObject& > (i);

    // billingPeriod
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.billingPeriod ())
      {
        const ElectricPowerUsageSummary::billingPeriod_type& x (*i.billingPeriod ());
        if (typeid (ElectricPowerUsageSummary::billingPeriod_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "billingPeriod",
              "http://naesb.org/espi",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "billingPeriod",
            "http://naesb.org/espi",
            false, true, e, x);
      }
    }

    // billLastPeriod
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.billLastPeriod ())
      {
        const ElectricPowerUsageSummary::billLastPeriod_type& x (*i.billLastPeriod ());
        if (typeid (ElectricPowerUsageSummary::billLastPeriod_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "billLastPeriod",
              "http://naesb.org/espi",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "billLastPeriod",
            "http://naesb.org/espi",
            false, true, e, x);
      }
    }

    // billToDate
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.billToDate ())
      {
        const ElectricPowerUsageSummary::billToDate_type& x (*i.billToDate ());
        if (typeid (ElectricPowerUsageSummary::billToDate_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "billToDate",
              "http://naesb.org/espi",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "billToDate",
            "http://naesb.org/espi",
            false, true, e, x);
      }
    }

    // costAdditionalLastPeriod
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.costAdditionalLastPeriod ())
      {
        const ElectricPowerUsageSummary::costAdditionalLastPeriod_type& x (*i.costAdditionalLastPeriod ());
        if (typeid (ElectricPowerUsageSummary::costAdditionalLastPeriod_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "costAdditionalLastPeriod",
              "http://naesb.org/espi",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "costAdditionalLastPeriod",
            "http://naesb.org/espi",
            false, true, e, x);
      }
    }

    // costAdditionalDetailLastPeriod
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      for (ElectricPowerUsageSummary::costAdditionalDetailLastPeriod_const_iterator
           b (i.costAdditionalDetailLastPeriod ().begin ()), n (i.costAdditionalDetailLastPeriod ().end ());
           b != n; ++b)
      {
        if (typeid (ElectricPowerUsageSummary::costAdditionalDetailLastPeriod_type) == typeid (*b))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "costAdditionalDetailLastPeriod",
              "http://naesb.org/espi",
              e));

          s << *b;
        }
        else
          tsm.serialize (
            "costAdditionalDetailLastPeriod",
            "http://naesb.org/espi",
            false, true, e, *b);
      }
    }

    // currency
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.currency ())
      {
        const ElectricPowerUsageSummary::currency_type& x (*i.currency ());
        if (typeid (ElectricPowerUsageSummary::currency_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "currency",
              "http://naesb.org/espi",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "currency",
            "http://naesb.org/espi",
            false, true, e, x);
      }
    }

    // overallConsumptionLastPeriod
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.overallConsumptionLastPeriod ())
      {
        const ElectricPowerUsageSummary::overallConsumptionLastPeriod_type& x (*i.overallConsumptionLastPeriod ());
        if (typeid (ElectricPowerUsageSummary::overallConsumptionLastPeriod_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "overallConsumptionLastPeriod",
              "http://naesb.org/espi",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "overallConsumptionLastPeriod",
            "http://naesb.org/espi",
            false, true, e, x);
      }
    }

    // currentBillingPeriodOverAllConsumption
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.currentBillingPeriodOverAllConsumption ())
      {
        const ElectricPowerUsageSummary::currentBillingPeriodOverAllConsumption_type& x (*i.currentBillingPeriodOverAllConsumption ());
        if (typeid (ElectricPowerUsageSummary::currentBillingPeriodOverAllConsumption_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "currentBillingPeriodOverAllConsumption",
              "http://naesb.org/espi",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "currentBillingPeriodOverAllConsumption",
            "http://naesb.org/espi",
            false, true, e, x);
      }
    }

    // currentDayLastYearNetConsumption
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.currentDayLastYearNetConsumption ())
      {
        const ElectricPowerUsageSummary::currentDayLastYearNetConsumption_type& x (*i.currentDayLastYearNetConsumption ());
        if (typeid (ElectricPowerUsageSummary::currentDayLastYearNetConsumption_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "currentDayLastYearNetConsumption",
              "http://naesb.org/espi",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "currentDayLastYearNetConsumption",
            "http://naesb.org/espi",
            false, true, e, x);
      }
    }

    // currentDayNetConsumption
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.currentDayNetConsumption ())
      {
        const ElectricPowerUsageSummary::currentDayNetConsumption_type& x (*i.currentDayNetConsumption ());
        if (typeid (ElectricPowerUsageSummary::currentDayNetConsumption_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "currentDayNetConsumption",
              "http://naesb.org/espi",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "currentDayNetConsumption",
            "http://naesb.org/espi",
            false, true, e, x);
      }
    }

    // currentDayOverallConsumption
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.currentDayOverallConsumption ())
      {
        const ElectricPowerUsageSummary::currentDayOverallConsumption_type& x (*i.currentDayOverallConsumption ());
        if (typeid (ElectricPowerUsageSummary::currentDayOverallConsumption_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "currentDayOverallConsumption",
              "http://naesb.org/espi",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "currentDayOverallConsumption",
            "http://naesb.org/espi",
            false, true, e, x);
      }
    }

    // peakDemand
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.peakDemand ())
      {
        const ElectricPowerUsageSummary::peakDemand_type& x (*i.peakDemand ());
        if (typeid (ElectricPowerUsageSummary::peakDemand_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "peakDemand",
              "http://naesb.org/espi",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "peakDemand",
            "http://naesb.org/espi",
            false, true, e, x);
      }
    }

    // previousDayLastYearOverallConsumption
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.previousDayLastYearOverallConsumption ())
      {
        const ElectricPowerUsageSummary::previousDayLastYearOverallConsumption_type& x (*i.previousDayLastYearOverallConsumption ());
        if (typeid (ElectricPowerUsageSummary::previousDayLastYearOverallConsumption_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "previousDayLastYearOverallConsumption",
              "http://naesb.org/espi",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "previousDayLastYearOverallConsumption",
            "http://naesb.org/espi",
            false, true, e, x);
      }
    }

    // previousDayNetConsumption
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.previousDayNetConsumption ())
      {
        const ElectricPowerUsageSummary::previousDayNetConsumption_type& x (*i.previousDayNetConsumption ());
        if (typeid (ElectricPowerUsageSummary::previousDayNetConsumption_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "previousDayNetConsumption",
              "http://naesb.org/espi",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "previousDayNetConsumption",
            "http://naesb.org/espi",
            false, true, e, x);
      }
    }

    // previousDayOverallConsumption
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.previousDayOverallConsumption ())
      {
        const ElectricPowerUsageSummary::previousDayOverallConsumption_type& x (*i.previousDayOverallConsumption ());
        if (typeid (ElectricPowerUsageSummary::previousDayOverallConsumption_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "previousDayOverallConsumption",
              "http://naesb.org/espi",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "previousDayOverallConsumption",
            "http://naesb.org/espi",
            false, true, e, x);
      }
    }

    // qualityOfReading
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.qualityOfReading ())
      {
        const ElectricPowerUsageSummary::qualityOfReading_type& x (*i.qualityOfReading ());
        if (typeid (ElectricPowerUsageSummary::qualityOfReading_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "qualityOfReading",
              "http://naesb.org/espi",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "qualityOfReading",
            "http://naesb.org/espi",
            false, true, e, x);
      }
    }

    // ratchetDemand
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.ratchetDemand ())
      {
        const ElectricPowerUsageSummary::ratchetDemand_type& x (*i.ratchetDemand ());
        if (typeid (ElectricPowerUsageSummary::ratchetDemand_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ratchetDemand",
              "http://naesb.org/espi",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "ratchetDemand",
            "http://naesb.org/espi",
            false, true, e, x);
      }
    }

    // ratchetDemandPeriod
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.ratchetDemandPeriod ())
      {
        const ElectricPowerUsageSummary::ratchetDemandPeriod_type& x (*i.ratchetDemandPeriod ());
        if (typeid (ElectricPowerUsageSummary::ratchetDemandPeriod_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "ratchetDemandPeriod",
              "http://naesb.org/espi",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "ratchetDemandPeriod",
            "http://naesb.org/espi",
            false, true, e, x);
      }
    }

    // statusTimeStamp
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      const ElectricPowerUsageSummary::statusTimeStamp_type& x (i.statusTimeStamp ());
      if (typeid (ElectricPowerUsageSummary::statusTimeStamp_type) == typeid (x))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "statusTimeStamp",
            "http://naesb.org/espi",
            e));

        s << x;
      }
      else
        tsm.serialize (
          "statusTimeStamp",
          "http://naesb.org/espi",
          false, true, e, x);
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ElectricPowerUsageSummary >
  _xsd_ElectricPowerUsageSummary_type_serializer_init (
    "ElectricPowerUsageSummary",
    "http://naesb.org/espi");
}

// Begin epilogue.
//
//
// End epilogue.

#include <xsd/cxx/post.hxx>

