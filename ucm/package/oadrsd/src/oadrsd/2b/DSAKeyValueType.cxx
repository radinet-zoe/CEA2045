// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#include <xsd/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include "DSAKeyValueType.hxx"

#include "CryptoBinary.hxx"

namespace oadr2b
{
  namespace sig
  {
    // DSAKeyValueType
    // 

    const DSAKeyValueType::P_optional& DSAKeyValueType::
    P () const
    {
      return this->P_;
    }

    DSAKeyValueType::P_optional& DSAKeyValueType::
    P ()
    {
      return this->P_;
    }

    void DSAKeyValueType::
    P (const P_type& x)
    {
      this->P_.set (x);
    }

    void DSAKeyValueType::
    P (const P_optional& x)
    {
      this->P_ = x;
    }

    void DSAKeyValueType::
    P (::std::auto_ptr< P_type > x)
    {
      this->P_.set (x);
    }

    const DSAKeyValueType::Q_optional& DSAKeyValueType::
    Q () const
    {
      return this->Q_;
    }

    DSAKeyValueType::Q_optional& DSAKeyValueType::
    Q ()
    {
      return this->Q_;
    }

    void DSAKeyValueType::
    Q (const Q_type& x)
    {
      this->Q_.set (x);
    }

    void DSAKeyValueType::
    Q (const Q_optional& x)
    {
      this->Q_ = x;
    }

    void DSAKeyValueType::
    Q (::std::auto_ptr< Q_type > x)
    {
      this->Q_.set (x);
    }

    const DSAKeyValueType::G_optional& DSAKeyValueType::
    G () const
    {
      return this->G_;
    }

    DSAKeyValueType::G_optional& DSAKeyValueType::
    G ()
    {
      return this->G_;
    }

    void DSAKeyValueType::
    G (const G_type& x)
    {
      this->G_.set (x);
    }

    void DSAKeyValueType::
    G (const G_optional& x)
    {
      this->G_ = x;
    }

    void DSAKeyValueType::
    G (::std::auto_ptr< G_type > x)
    {
      this->G_.set (x);
    }

    const DSAKeyValueType::Y_type& DSAKeyValueType::
    Y () const
    {
      return this->Y_.get ();
    }

    DSAKeyValueType::Y_type& DSAKeyValueType::
    Y ()
    {
      return this->Y_.get ();
    }

    void DSAKeyValueType::
    Y (const Y_type& x)
    {
      this->Y_.set (x);
    }

    void DSAKeyValueType::
    Y (::std::auto_ptr< Y_type > x)
    {
      this->Y_.set (x);
    }

    const DSAKeyValueType::J_optional& DSAKeyValueType::
    J () const
    {
      return this->J_;
    }

    DSAKeyValueType::J_optional& DSAKeyValueType::
    J ()
    {
      return this->J_;
    }

    void DSAKeyValueType::
    J (const J_type& x)
    {
      this->J_.set (x);
    }

    void DSAKeyValueType::
    J (const J_optional& x)
    {
      this->J_ = x;
    }

    void DSAKeyValueType::
    J (::std::auto_ptr< J_type > x)
    {
      this->J_.set (x);
    }

    const DSAKeyValueType::Seed_optional& DSAKeyValueType::
    Seed () const
    {
      return this->Seed_;
    }

    DSAKeyValueType::Seed_optional& DSAKeyValueType::
    Seed ()
    {
      return this->Seed_;
    }

    void DSAKeyValueType::
    Seed (const Seed_type& x)
    {
      this->Seed_.set (x);
    }

    void DSAKeyValueType::
    Seed (const Seed_optional& x)
    {
      this->Seed_ = x;
    }

    void DSAKeyValueType::
    Seed (::std::auto_ptr< Seed_type > x)
    {
      this->Seed_.set (x);
    }

    const DSAKeyValueType::PgenCounter_optional& DSAKeyValueType::
    PgenCounter () const
    {
      return this->PgenCounter_;
    }

    DSAKeyValueType::PgenCounter_optional& DSAKeyValueType::
    PgenCounter ()
    {
      return this->PgenCounter_;
    }

    void DSAKeyValueType::
    PgenCounter (const PgenCounter_type& x)
    {
      this->PgenCounter_.set (x);
    }

    void DSAKeyValueType::
    PgenCounter (const PgenCounter_optional& x)
    {
      this->PgenCounter_ = x;
    }

    void DSAKeyValueType::
    PgenCounter (::std::auto_ptr< PgenCounter_type > x)
    {
      this->PgenCounter_.set (x);
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace oadr2b
{
  namespace sig
  {
    // DSAKeyValueType
    //

    DSAKeyValueType::
    DSAKeyValueType (const Y_type& Y)
    : ::xml_schema::type (),
      P_ (this),
      Q_ (this),
      G_ (this),
      Y_ (Y, this),
      J_ (this),
      Seed_ (this),
      PgenCounter_ (this)
    {
    }

    DSAKeyValueType::
    DSAKeyValueType (::std::auto_ptr< Y_type > Y)
    : ::xml_schema::type (),
      P_ (this),
      Q_ (this),
      G_ (this),
      Y_ (Y, this),
      J_ (this),
      Seed_ (this),
      PgenCounter_ (this)
    {
    }

    DSAKeyValueType::
    DSAKeyValueType (const DSAKeyValueType& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      P_ (x.P_, f, this),
      Q_ (x.Q_, f, this),
      G_ (x.G_, f, this),
      Y_ (x.Y_, f, this),
      J_ (x.J_, f, this),
      Seed_ (x.Seed_, f, this),
      PgenCounter_ (x.PgenCounter_, f, this)
    {
    }

    DSAKeyValueType::
    DSAKeyValueType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      P_ (this),
      Q_ (this),
      G_ (this),
      Y_ (this),
      J_ (this),
      Seed_ (this),
      PgenCounter_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void DSAKeyValueType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // P
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "P",
              "http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< P_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->P_)
            {
              ::std::auto_ptr< P_type > r (
                dynamic_cast< P_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->P_.set (r);
              continue;
            }
          }
        }

        // Q
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "Q",
              "http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< Q_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->Q_)
            {
              ::std::auto_ptr< Q_type > r (
                dynamic_cast< Q_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->Q_.set (r);
              continue;
            }
          }
        }

        // G
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "G",
              "http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< G_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->G_)
            {
              ::std::auto_ptr< G_type > r (
                dynamic_cast< G_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->G_.set (r);
              continue;
            }
          }
        }

        // Y
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "Y",
              "http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< Y_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!Y_.present ())
            {
              ::std::auto_ptr< Y_type > r (
                dynamic_cast< Y_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->Y_.set (r);
              continue;
            }
          }
        }

        // J
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "J",
              "http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< J_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->J_)
            {
              ::std::auto_ptr< J_type > r (
                dynamic_cast< J_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->J_.set (r);
              continue;
            }
          }
        }

        // Seed
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "Seed",
              "http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< Seed_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->Seed_)
            {
              ::std::auto_ptr< Seed_type > r (
                dynamic_cast< Seed_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->Seed_.set (r);
              continue;
            }
          }
        }

        // PgenCounter
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "PgenCounter",
              "http://www.w3.org/2000/09/xmldsig#",
              &::xsd::cxx::tree::factory_impl< PgenCounter_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->PgenCounter_)
            {
              ::std::auto_ptr< PgenCounter_type > r (
                dynamic_cast< PgenCounter_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->PgenCounter_.set (r);
              continue;
            }
          }
        }

        break;
      }

      if (!Y_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "Y",
          "http://www.w3.org/2000/09/xmldsig#");
      }
    }

    DSAKeyValueType* DSAKeyValueType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DSAKeyValueType (*this, f, c);
    }

    DSAKeyValueType& DSAKeyValueType::
    operator= (const DSAKeyValueType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->P_ = x.P_;
        this->Q_ = x.Q_;
        this->G_ = x.G_;
        this->Y_ = x.Y_;
        this->J_ = x.J_;
        this->Seed_ = x.Seed_;
        this->PgenCounter_ = x.PgenCounter_;
      }

      return *this;
    }

    DSAKeyValueType::
    ~DSAKeyValueType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, DSAKeyValueType >
    _xsd_DSAKeyValueType_type_factory_init (
      "DSAKeyValueType",
      "http://www.w3.org/2000/09/xmldsig#");
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace oadr2b
{
  namespace sig
  {
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace oadr2b
{
  namespace sig
  {
    void
    operator<< (::xercesc::DOMElement& e, const DSAKeyValueType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // P
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        if (i.P ())
        {
          const DSAKeyValueType::P_type& x (*i.P ());
          if (typeid (DSAKeyValueType::P_type) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "P",
                "http://www.w3.org/2000/09/xmldsig#",
                e));

            s << x;
          }
          else
            tsm.serialize (
              "P",
              "http://www.w3.org/2000/09/xmldsig#",
              false, true, e, x);
        }
      }

      // Q
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        if (i.Q ())
        {
          const DSAKeyValueType::Q_type& x (*i.Q ());
          if (typeid (DSAKeyValueType::Q_type) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Q",
                "http://www.w3.org/2000/09/xmldsig#",
                e));

            s << x;
          }
          else
            tsm.serialize (
              "Q",
              "http://www.w3.org/2000/09/xmldsig#",
              false, true, e, x);
        }
      }

      // G
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        if (i.G ())
        {
          const DSAKeyValueType::G_type& x (*i.G ());
          if (typeid (DSAKeyValueType::G_type) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "G",
                "http://www.w3.org/2000/09/xmldsig#",
                e));

            s << x;
          }
          else
            tsm.serialize (
              "G",
              "http://www.w3.org/2000/09/xmldsig#",
              false, true, e, x);
        }
      }

      // Y
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        const DSAKeyValueType::Y_type& x (i.Y ());
        if (typeid (DSAKeyValueType::Y_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Y",
              "http://www.w3.org/2000/09/xmldsig#",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "Y",
            "http://www.w3.org/2000/09/xmldsig#",
            false, true, e, x);
      }

      // J
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        if (i.J ())
        {
          const DSAKeyValueType::J_type& x (*i.J ());
          if (typeid (DSAKeyValueType::J_type) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "J",
                "http://www.w3.org/2000/09/xmldsig#",
                e));

            s << x;
          }
          else
            tsm.serialize (
              "J",
              "http://www.w3.org/2000/09/xmldsig#",
              false, true, e, x);
        }
      }

      // Seed
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        if (i.Seed ())
        {
          const DSAKeyValueType::Seed_type& x (*i.Seed ());
          if (typeid (DSAKeyValueType::Seed_type) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "Seed",
                "http://www.w3.org/2000/09/xmldsig#",
                e));

            s << x;
          }
          else
            tsm.serialize (
              "Seed",
              "http://www.w3.org/2000/09/xmldsig#",
              false, true, e, x);
        }
      }

      // PgenCounter
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        if (i.PgenCounter ())
        {
          const DSAKeyValueType::PgenCounter_type& x (*i.PgenCounter ());
          if (typeid (DSAKeyValueType::PgenCounter_type) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "PgenCounter",
                "http://www.w3.org/2000/09/xmldsig#",
                e));

            s << x;
          }
          else
            tsm.serialize (
              "PgenCounter",
              "http://www.w3.org/2000/09/xmldsig#",
              false, true, e, x);
        }
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, DSAKeyValueType >
    _xsd_DSAKeyValueType_type_serializer_init (
      "DSAKeyValueType",
      "http://www.w3.org/2000/09/xmldsig#");
  }
}

// Begin epilogue.
//
//
// End epilogue.

#include <xsd/cxx/post.hxx>

