// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#include <xsd/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include "TransportInterfaceType.hxx"

#include "NodeType.hxx"

namespace power
{
  // TransportInterfaceType
  // 

  const TransportInterfaceType::pointOfReceipt_type& TransportInterfaceType::
  pointOfReceipt () const
  {
    return this->pointOfReceipt_.get ();
  }

  TransportInterfaceType::pointOfReceipt_type& TransportInterfaceType::
  pointOfReceipt ()
  {
    return this->pointOfReceipt_.get ();
  }

  void TransportInterfaceType::
  pointOfReceipt (const pointOfReceipt_type& x)
  {
    this->pointOfReceipt_.set (x);
  }

  void TransportInterfaceType::
  pointOfReceipt (::std::auto_ptr< pointOfReceipt_type > x)
  {
    this->pointOfReceipt_.set (x);
  }

  const TransportInterfaceType::pointOfDelivery_type& TransportInterfaceType::
  pointOfDelivery () const
  {
    return this->pointOfDelivery_.get ();
  }

  TransportInterfaceType::pointOfDelivery_type& TransportInterfaceType::
  pointOfDelivery ()
  {
    return this->pointOfDelivery_.get ();
  }

  void TransportInterfaceType::
  pointOfDelivery (const pointOfDelivery_type& x)
  {
    this->pointOfDelivery_.set (x);
  }

  void TransportInterfaceType::
  pointOfDelivery (::std::auto_ptr< pointOfDelivery_type > x)
  {
    this->pointOfDelivery_.set (x);
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace power
{
  // TransportInterfaceType
  //

  TransportInterfaceType::
  TransportInterfaceType (const pointOfReceipt_type& pointOfReceipt,
                          const pointOfDelivery_type& pointOfDelivery)
  : ::xml_schema::type (),
    pointOfReceipt_ (pointOfReceipt, this),
    pointOfDelivery_ (pointOfDelivery, this)
  {
  }

  TransportInterfaceType::
  TransportInterfaceType (::std::auto_ptr< pointOfReceipt_type > pointOfReceipt,
                          ::std::auto_ptr< pointOfDelivery_type > pointOfDelivery)
  : ::xml_schema::type (),
    pointOfReceipt_ (pointOfReceipt, this),
    pointOfDelivery_ (pointOfDelivery, this)
  {
  }

  TransportInterfaceType::
  TransportInterfaceType (const TransportInterfaceType& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    pointOfReceipt_ (x.pointOfReceipt_, f, this),
    pointOfDelivery_ (x.pointOfDelivery_, f, this)
  {
  }

  TransportInterfaceType::
  TransportInterfaceType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    pointOfReceipt_ (this),
    pointOfDelivery_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void TransportInterfaceType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // pointOfReceipt
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "pointOfReceipt",
            "http://docs.oasis-open.org/ns/emix/2011/06/power",
            &::xsd::cxx::tree::factory_impl< pointOfReceipt_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!pointOfReceipt_.present ())
          {
            ::std::auto_ptr< pointOfReceipt_type > r (
              dynamic_cast< pointOfReceipt_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->pointOfReceipt_.set (r);
            continue;
          }
        }
      }

      // pointOfDelivery
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "pointOfDelivery",
            "http://docs.oasis-open.org/ns/emix/2011/06/power",
            &::xsd::cxx::tree::factory_impl< pointOfDelivery_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!pointOfDelivery_.present ())
          {
            ::std::auto_ptr< pointOfDelivery_type > r (
              dynamic_cast< pointOfDelivery_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->pointOfDelivery_.set (r);
            continue;
          }
        }
      }

      break;
    }

    if (!pointOfReceipt_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "pointOfReceipt",
        "http://docs.oasis-open.org/ns/emix/2011/06/power");
    }

    if (!pointOfDelivery_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "pointOfDelivery",
        "http://docs.oasis-open.org/ns/emix/2011/06/power");
    }
  }

  TransportInterfaceType* TransportInterfaceType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class TransportInterfaceType (*this, f, c);
  }

  TransportInterfaceType& TransportInterfaceType::
  operator= (const TransportInterfaceType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->pointOfReceipt_ = x.pointOfReceipt_;
      this->pointOfDelivery_ = x.pointOfDelivery_;
    }

    return *this;
  }

  TransportInterfaceType::
  ~TransportInterfaceType ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, TransportInterfaceType >
  _xsd_TransportInterfaceType_type_factory_init (
    "TransportInterfaceType",
    "http://docs.oasis-open.org/ns/emix/2011/06/power");
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace power
{
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace power
{
  void
  operator<< (::xercesc::DOMElement& e, const TransportInterfaceType& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // pointOfReceipt
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      const TransportInterfaceType::pointOfReceipt_type& x (i.pointOfReceipt ());
      if (typeid (TransportInterfaceType::pointOfReceipt_type) == typeid (x))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "pointOfReceipt",
            "http://docs.oasis-open.org/ns/emix/2011/06/power",
            e));

        s << x;
      }
      else
        tsm.serialize (
          "pointOfReceipt",
          "http://docs.oasis-open.org/ns/emix/2011/06/power",
          false, true, e, x);
    }

    // pointOfDelivery
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      const TransportInterfaceType::pointOfDelivery_type& x (i.pointOfDelivery ());
      if (typeid (TransportInterfaceType::pointOfDelivery_type) == typeid (x))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "pointOfDelivery",
            "http://docs.oasis-open.org/ns/emix/2011/06/power",
            e));

        s << x;
      }
      else
        tsm.serialize (
          "pointOfDelivery",
          "http://docs.oasis-open.org/ns/emix/2011/06/power",
          false, true, e, x);
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, TransportInterfaceType >
  _xsd_TransportInterfaceType_type_serializer_init (
    "TransportInterfaceType",
    "http://docs.oasis-open.org/ns/emix/2011/06/power");
}

// Begin epilogue.
//
//
// End epilogue.

#include <xsd/cxx/post.hxx>

