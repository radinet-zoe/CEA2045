// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#include <xsd/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include "ElectricPowerQualitySummary.hxx"

#include "Int48.hxx"

#include "UInt8.hxx"

#include "DateTimeInterval.hxx"

namespace espi
{
  // ElectricPowerQualitySummary
  // 

  const ElectricPowerQualitySummary::flickerPlt_optional& ElectricPowerQualitySummary::
  flickerPlt () const
  {
    return this->flickerPlt_;
  }

  ElectricPowerQualitySummary::flickerPlt_optional& ElectricPowerQualitySummary::
  flickerPlt ()
  {
    return this->flickerPlt_;
  }

  void ElectricPowerQualitySummary::
  flickerPlt (const flickerPlt_type& x)
  {
    this->flickerPlt_.set (x);
  }

  void ElectricPowerQualitySummary::
  flickerPlt (const flickerPlt_optional& x)
  {
    this->flickerPlt_ = x;
  }

  void ElectricPowerQualitySummary::
  flickerPlt (::std::auto_ptr< flickerPlt_type > x)
  {
    this->flickerPlt_.set (x);
  }

  const ElectricPowerQualitySummary::flickerPst_optional& ElectricPowerQualitySummary::
  flickerPst () const
  {
    return this->flickerPst_;
  }

  ElectricPowerQualitySummary::flickerPst_optional& ElectricPowerQualitySummary::
  flickerPst ()
  {
    return this->flickerPst_;
  }

  void ElectricPowerQualitySummary::
  flickerPst (const flickerPst_type& x)
  {
    this->flickerPst_.set (x);
  }

  void ElectricPowerQualitySummary::
  flickerPst (const flickerPst_optional& x)
  {
    this->flickerPst_ = x;
  }

  void ElectricPowerQualitySummary::
  flickerPst (::std::auto_ptr< flickerPst_type > x)
  {
    this->flickerPst_.set (x);
  }

  const ElectricPowerQualitySummary::harmonicVoltage_optional& ElectricPowerQualitySummary::
  harmonicVoltage () const
  {
    return this->harmonicVoltage_;
  }

  ElectricPowerQualitySummary::harmonicVoltage_optional& ElectricPowerQualitySummary::
  harmonicVoltage ()
  {
    return this->harmonicVoltage_;
  }

  void ElectricPowerQualitySummary::
  harmonicVoltage (const harmonicVoltage_type& x)
  {
    this->harmonicVoltage_.set (x);
  }

  void ElectricPowerQualitySummary::
  harmonicVoltage (const harmonicVoltage_optional& x)
  {
    this->harmonicVoltage_ = x;
  }

  void ElectricPowerQualitySummary::
  harmonicVoltage (::std::auto_ptr< harmonicVoltage_type > x)
  {
    this->harmonicVoltage_.set (x);
  }

  const ElectricPowerQualitySummary::longInterruptions_optional& ElectricPowerQualitySummary::
  longInterruptions () const
  {
    return this->longInterruptions_;
  }

  ElectricPowerQualitySummary::longInterruptions_optional& ElectricPowerQualitySummary::
  longInterruptions ()
  {
    return this->longInterruptions_;
  }

  void ElectricPowerQualitySummary::
  longInterruptions (const longInterruptions_type& x)
  {
    this->longInterruptions_.set (x);
  }

  void ElectricPowerQualitySummary::
  longInterruptions (const longInterruptions_optional& x)
  {
    this->longInterruptions_ = x;
  }

  void ElectricPowerQualitySummary::
  longInterruptions (::std::auto_ptr< longInterruptions_type > x)
  {
    this->longInterruptions_.set (x);
  }

  const ElectricPowerQualitySummary::mainsVoltage_optional& ElectricPowerQualitySummary::
  mainsVoltage () const
  {
    return this->mainsVoltage_;
  }

  ElectricPowerQualitySummary::mainsVoltage_optional& ElectricPowerQualitySummary::
  mainsVoltage ()
  {
    return this->mainsVoltage_;
  }

  void ElectricPowerQualitySummary::
  mainsVoltage (const mainsVoltage_type& x)
  {
    this->mainsVoltage_.set (x);
  }

  void ElectricPowerQualitySummary::
  mainsVoltage (const mainsVoltage_optional& x)
  {
    this->mainsVoltage_ = x;
  }

  void ElectricPowerQualitySummary::
  mainsVoltage (::std::auto_ptr< mainsVoltage_type > x)
  {
    this->mainsVoltage_.set (x);
  }

  const ElectricPowerQualitySummary::measurementProtocol_optional& ElectricPowerQualitySummary::
  measurementProtocol () const
  {
    return this->measurementProtocol_;
  }

  ElectricPowerQualitySummary::measurementProtocol_optional& ElectricPowerQualitySummary::
  measurementProtocol ()
  {
    return this->measurementProtocol_;
  }

  void ElectricPowerQualitySummary::
  measurementProtocol (const measurementProtocol_type& x)
  {
    this->measurementProtocol_.set (x);
  }

  void ElectricPowerQualitySummary::
  measurementProtocol (const measurementProtocol_optional& x)
  {
    this->measurementProtocol_ = x;
  }

  void ElectricPowerQualitySummary::
  measurementProtocol (::std::auto_ptr< measurementProtocol_type > x)
  {
    this->measurementProtocol_.set (x);
  }

  const ElectricPowerQualitySummary::powerFrequency_optional& ElectricPowerQualitySummary::
  powerFrequency () const
  {
    return this->powerFrequency_;
  }

  ElectricPowerQualitySummary::powerFrequency_optional& ElectricPowerQualitySummary::
  powerFrequency ()
  {
    return this->powerFrequency_;
  }

  void ElectricPowerQualitySummary::
  powerFrequency (const powerFrequency_type& x)
  {
    this->powerFrequency_.set (x);
  }

  void ElectricPowerQualitySummary::
  powerFrequency (const powerFrequency_optional& x)
  {
    this->powerFrequency_ = x;
  }

  void ElectricPowerQualitySummary::
  powerFrequency (::std::auto_ptr< powerFrequency_type > x)
  {
    this->powerFrequency_.set (x);
  }

  const ElectricPowerQualitySummary::rapidVoltageChanges_optional& ElectricPowerQualitySummary::
  rapidVoltageChanges () const
  {
    return this->rapidVoltageChanges_;
  }

  ElectricPowerQualitySummary::rapidVoltageChanges_optional& ElectricPowerQualitySummary::
  rapidVoltageChanges ()
  {
    return this->rapidVoltageChanges_;
  }

  void ElectricPowerQualitySummary::
  rapidVoltageChanges (const rapidVoltageChanges_type& x)
  {
    this->rapidVoltageChanges_.set (x);
  }

  void ElectricPowerQualitySummary::
  rapidVoltageChanges (const rapidVoltageChanges_optional& x)
  {
    this->rapidVoltageChanges_ = x;
  }

  void ElectricPowerQualitySummary::
  rapidVoltageChanges (::std::auto_ptr< rapidVoltageChanges_type > x)
  {
    this->rapidVoltageChanges_.set (x);
  }

  const ElectricPowerQualitySummary::shortInterruptions_optional& ElectricPowerQualitySummary::
  shortInterruptions () const
  {
    return this->shortInterruptions_;
  }

  ElectricPowerQualitySummary::shortInterruptions_optional& ElectricPowerQualitySummary::
  shortInterruptions ()
  {
    return this->shortInterruptions_;
  }

  void ElectricPowerQualitySummary::
  shortInterruptions (const shortInterruptions_type& x)
  {
    this->shortInterruptions_.set (x);
  }

  void ElectricPowerQualitySummary::
  shortInterruptions (const shortInterruptions_optional& x)
  {
    this->shortInterruptions_ = x;
  }

  void ElectricPowerQualitySummary::
  shortInterruptions (::std::auto_ptr< shortInterruptions_type > x)
  {
    this->shortInterruptions_.set (x);
  }

  const ElectricPowerQualitySummary::summaryInterval_type& ElectricPowerQualitySummary::
  summaryInterval () const
  {
    return this->summaryInterval_.get ();
  }

  ElectricPowerQualitySummary::summaryInterval_type& ElectricPowerQualitySummary::
  summaryInterval ()
  {
    return this->summaryInterval_.get ();
  }

  void ElectricPowerQualitySummary::
  summaryInterval (const summaryInterval_type& x)
  {
    this->summaryInterval_.set (x);
  }

  void ElectricPowerQualitySummary::
  summaryInterval (::std::auto_ptr< summaryInterval_type > x)
  {
    this->summaryInterval_.set (x);
  }

  const ElectricPowerQualitySummary::supplyVoltageDips_optional& ElectricPowerQualitySummary::
  supplyVoltageDips () const
  {
    return this->supplyVoltageDips_;
  }

  ElectricPowerQualitySummary::supplyVoltageDips_optional& ElectricPowerQualitySummary::
  supplyVoltageDips ()
  {
    return this->supplyVoltageDips_;
  }

  void ElectricPowerQualitySummary::
  supplyVoltageDips (const supplyVoltageDips_type& x)
  {
    this->supplyVoltageDips_.set (x);
  }

  void ElectricPowerQualitySummary::
  supplyVoltageDips (const supplyVoltageDips_optional& x)
  {
    this->supplyVoltageDips_ = x;
  }

  void ElectricPowerQualitySummary::
  supplyVoltageDips (::std::auto_ptr< supplyVoltageDips_type > x)
  {
    this->supplyVoltageDips_.set (x);
  }

  const ElectricPowerQualitySummary::supplyVoltageImbalance_optional& ElectricPowerQualitySummary::
  supplyVoltageImbalance () const
  {
    return this->supplyVoltageImbalance_;
  }

  ElectricPowerQualitySummary::supplyVoltageImbalance_optional& ElectricPowerQualitySummary::
  supplyVoltageImbalance ()
  {
    return this->supplyVoltageImbalance_;
  }

  void ElectricPowerQualitySummary::
  supplyVoltageImbalance (const supplyVoltageImbalance_type& x)
  {
    this->supplyVoltageImbalance_.set (x);
  }

  void ElectricPowerQualitySummary::
  supplyVoltageImbalance (const supplyVoltageImbalance_optional& x)
  {
    this->supplyVoltageImbalance_ = x;
  }

  void ElectricPowerQualitySummary::
  supplyVoltageImbalance (::std::auto_ptr< supplyVoltageImbalance_type > x)
  {
    this->supplyVoltageImbalance_.set (x);
  }

  const ElectricPowerQualitySummary::supplyVoltageVariations_optional& ElectricPowerQualitySummary::
  supplyVoltageVariations () const
  {
    return this->supplyVoltageVariations_;
  }

  ElectricPowerQualitySummary::supplyVoltageVariations_optional& ElectricPowerQualitySummary::
  supplyVoltageVariations ()
  {
    return this->supplyVoltageVariations_;
  }

  void ElectricPowerQualitySummary::
  supplyVoltageVariations (const supplyVoltageVariations_type& x)
  {
    this->supplyVoltageVariations_.set (x);
  }

  void ElectricPowerQualitySummary::
  supplyVoltageVariations (const supplyVoltageVariations_optional& x)
  {
    this->supplyVoltageVariations_ = x;
  }

  void ElectricPowerQualitySummary::
  supplyVoltageVariations (::std::auto_ptr< supplyVoltageVariations_type > x)
  {
    this->supplyVoltageVariations_.set (x);
  }

  const ElectricPowerQualitySummary::tempOvervoltage_optional& ElectricPowerQualitySummary::
  tempOvervoltage () const
  {
    return this->tempOvervoltage_;
  }

  ElectricPowerQualitySummary::tempOvervoltage_optional& ElectricPowerQualitySummary::
  tempOvervoltage ()
  {
    return this->tempOvervoltage_;
  }

  void ElectricPowerQualitySummary::
  tempOvervoltage (const tempOvervoltage_type& x)
  {
    this->tempOvervoltage_.set (x);
  }

  void ElectricPowerQualitySummary::
  tempOvervoltage (const tempOvervoltage_optional& x)
  {
    this->tempOvervoltage_ = x;
  }

  void ElectricPowerQualitySummary::
  tempOvervoltage (::std::auto_ptr< tempOvervoltage_type > x)
  {
    this->tempOvervoltage_.set (x);
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace espi
{
  // ElectricPowerQualitySummary
  //

  ElectricPowerQualitySummary::
  ElectricPowerQualitySummary (const summaryInterval_type& summaryInterval)
  : ::espi::IdentifiedObject (),
    flickerPlt_ (this),
    flickerPst_ (this),
    harmonicVoltage_ (this),
    longInterruptions_ (this),
    mainsVoltage_ (this),
    measurementProtocol_ (this),
    powerFrequency_ (this),
    rapidVoltageChanges_ (this),
    shortInterruptions_ (this),
    summaryInterval_ (summaryInterval, this),
    supplyVoltageDips_ (this),
    supplyVoltageImbalance_ (this),
    supplyVoltageVariations_ (this),
    tempOvervoltage_ (this)
  {
  }

  ElectricPowerQualitySummary::
  ElectricPowerQualitySummary (::std::auto_ptr< summaryInterval_type > summaryInterval)
  : ::espi::IdentifiedObject (),
    flickerPlt_ (this),
    flickerPst_ (this),
    harmonicVoltage_ (this),
    longInterruptions_ (this),
    mainsVoltage_ (this),
    measurementProtocol_ (this),
    powerFrequency_ (this),
    rapidVoltageChanges_ (this),
    shortInterruptions_ (this),
    summaryInterval_ (summaryInterval, this),
    supplyVoltageDips_ (this),
    supplyVoltageImbalance_ (this),
    supplyVoltageVariations_ (this),
    tempOvervoltage_ (this)
  {
  }

  ElectricPowerQualitySummary::
  ElectricPowerQualitySummary (const ElectricPowerQualitySummary& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::espi::IdentifiedObject (x, f, c),
    flickerPlt_ (x.flickerPlt_, f, this),
    flickerPst_ (x.flickerPst_, f, this),
    harmonicVoltage_ (x.harmonicVoltage_, f, this),
    longInterruptions_ (x.longInterruptions_, f, this),
    mainsVoltage_ (x.mainsVoltage_, f, this),
    measurementProtocol_ (x.measurementProtocol_, f, this),
    powerFrequency_ (x.powerFrequency_, f, this),
    rapidVoltageChanges_ (x.rapidVoltageChanges_, f, this),
    shortInterruptions_ (x.shortInterruptions_, f, this),
    summaryInterval_ (x.summaryInterval_, f, this),
    supplyVoltageDips_ (x.supplyVoltageDips_, f, this),
    supplyVoltageImbalance_ (x.supplyVoltageImbalance_, f, this),
    supplyVoltageVariations_ (x.supplyVoltageVariations_, f, this),
    tempOvervoltage_ (x.tempOvervoltage_, f, this)
  {
  }

  ElectricPowerQualitySummary::
  ElectricPowerQualitySummary (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::espi::IdentifiedObject (e, f | ::xml_schema::flags::base, c),
    flickerPlt_ (this),
    flickerPst_ (this),
    harmonicVoltage_ (this),
    longInterruptions_ (this),
    mainsVoltage_ (this),
    measurementProtocol_ (this),
    powerFrequency_ (this),
    rapidVoltageChanges_ (this),
    shortInterruptions_ (this),
    summaryInterval_ (this),
    supplyVoltageDips_ (this),
    supplyVoltageImbalance_ (this),
    supplyVoltageVariations_ (this),
    tempOvervoltage_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void ElectricPowerQualitySummary::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    this->::espi::IdentifiedObject::parse (p, f);

    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // flickerPlt
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "flickerPlt",
            "http://naesb.org/espi",
            &::xsd::cxx::tree::factory_impl< flickerPlt_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->flickerPlt_)
          {
            ::std::auto_ptr< flickerPlt_type > r (
              dynamic_cast< flickerPlt_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->flickerPlt_.set (r);
            continue;
          }
        }
      }

      // flickerPst
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "flickerPst",
            "http://naesb.org/espi",
            &::xsd::cxx::tree::factory_impl< flickerPst_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->flickerPst_)
          {
            ::std::auto_ptr< flickerPst_type > r (
              dynamic_cast< flickerPst_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->flickerPst_.set (r);
            continue;
          }
        }
      }

      // harmonicVoltage
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "harmonicVoltage",
            "http://naesb.org/espi",
            &::xsd::cxx::tree::factory_impl< harmonicVoltage_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->harmonicVoltage_)
          {
            ::std::auto_ptr< harmonicVoltage_type > r (
              dynamic_cast< harmonicVoltage_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->harmonicVoltage_.set (r);
            continue;
          }
        }
      }

      // longInterruptions
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "longInterruptions",
            "http://naesb.org/espi",
            &::xsd::cxx::tree::factory_impl< longInterruptions_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->longInterruptions_)
          {
            ::std::auto_ptr< longInterruptions_type > r (
              dynamic_cast< longInterruptions_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->longInterruptions_.set (r);
            continue;
          }
        }
      }

      // mainsVoltage
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "mainsVoltage",
            "http://naesb.org/espi",
            &::xsd::cxx::tree::factory_impl< mainsVoltage_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->mainsVoltage_)
          {
            ::std::auto_ptr< mainsVoltage_type > r (
              dynamic_cast< mainsVoltage_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->mainsVoltage_.set (r);
            continue;
          }
        }
      }

      // measurementProtocol
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "measurementProtocol",
            "http://naesb.org/espi",
            &::xsd::cxx::tree::factory_impl< measurementProtocol_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->measurementProtocol_)
          {
            ::std::auto_ptr< measurementProtocol_type > r (
              dynamic_cast< measurementProtocol_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->measurementProtocol_.set (r);
            continue;
          }
        }
      }

      // powerFrequency
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "powerFrequency",
            "http://naesb.org/espi",
            &::xsd::cxx::tree::factory_impl< powerFrequency_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->powerFrequency_)
          {
            ::std::auto_ptr< powerFrequency_type > r (
              dynamic_cast< powerFrequency_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->powerFrequency_.set (r);
            continue;
          }
        }
      }

      // rapidVoltageChanges
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "rapidVoltageChanges",
            "http://naesb.org/espi",
            &::xsd::cxx::tree::factory_impl< rapidVoltageChanges_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->rapidVoltageChanges_)
          {
            ::std::auto_ptr< rapidVoltageChanges_type > r (
              dynamic_cast< rapidVoltageChanges_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->rapidVoltageChanges_.set (r);
            continue;
          }
        }
      }

      // shortInterruptions
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "shortInterruptions",
            "http://naesb.org/espi",
            &::xsd::cxx::tree::factory_impl< shortInterruptions_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->shortInterruptions_)
          {
            ::std::auto_ptr< shortInterruptions_type > r (
              dynamic_cast< shortInterruptions_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->shortInterruptions_.set (r);
            continue;
          }
        }
      }

      // summaryInterval
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "summaryInterval",
            "http://naesb.org/espi",
            &::xsd::cxx::tree::factory_impl< summaryInterval_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!summaryInterval_.present ())
          {
            ::std::auto_ptr< summaryInterval_type > r (
              dynamic_cast< summaryInterval_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->summaryInterval_.set (r);
            continue;
          }
        }
      }

      // supplyVoltageDips
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "supplyVoltageDips",
            "http://naesb.org/espi",
            &::xsd::cxx::tree::factory_impl< supplyVoltageDips_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->supplyVoltageDips_)
          {
            ::std::auto_ptr< supplyVoltageDips_type > r (
              dynamic_cast< supplyVoltageDips_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->supplyVoltageDips_.set (r);
            continue;
          }
        }
      }

      // supplyVoltageImbalance
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "supplyVoltageImbalance",
            "http://naesb.org/espi",
            &::xsd::cxx::tree::factory_impl< supplyVoltageImbalance_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->supplyVoltageImbalance_)
          {
            ::std::auto_ptr< supplyVoltageImbalance_type > r (
              dynamic_cast< supplyVoltageImbalance_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->supplyVoltageImbalance_.set (r);
            continue;
          }
        }
      }

      // supplyVoltageVariations
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "supplyVoltageVariations",
            "http://naesb.org/espi",
            &::xsd::cxx::tree::factory_impl< supplyVoltageVariations_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->supplyVoltageVariations_)
          {
            ::std::auto_ptr< supplyVoltageVariations_type > r (
              dynamic_cast< supplyVoltageVariations_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->supplyVoltageVariations_.set (r);
            continue;
          }
        }
      }

      // tempOvervoltage
      //
      {
        ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
          ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
            "tempOvervoltage",
            "http://naesb.org/espi",
            &::xsd::cxx::tree::factory_impl< tempOvervoltage_type >,
            false, true, i, n, f, this));

        if (tmp.get () != 0)
        {
          if (!this->tempOvervoltage_)
          {
            ::std::auto_ptr< tempOvervoltage_type > r (
              dynamic_cast< tempOvervoltage_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->tempOvervoltage_.set (r);
            continue;
          }
        }
      }

      break;
    }

    if (!summaryInterval_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "summaryInterval",
        "http://naesb.org/espi");
    }
  }

  ElectricPowerQualitySummary* ElectricPowerQualitySummary::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ElectricPowerQualitySummary (*this, f, c);
  }

  ElectricPowerQualitySummary& ElectricPowerQualitySummary::
  operator= (const ElectricPowerQualitySummary& x)
  {
    if (this != &x)
    {
      static_cast< ::espi::IdentifiedObject& > (*this) = x;
      this->flickerPlt_ = x.flickerPlt_;
      this->flickerPst_ = x.flickerPst_;
      this->harmonicVoltage_ = x.harmonicVoltage_;
      this->longInterruptions_ = x.longInterruptions_;
      this->mainsVoltage_ = x.mainsVoltage_;
      this->measurementProtocol_ = x.measurementProtocol_;
      this->powerFrequency_ = x.powerFrequency_;
      this->rapidVoltageChanges_ = x.rapidVoltageChanges_;
      this->shortInterruptions_ = x.shortInterruptions_;
      this->summaryInterval_ = x.summaryInterval_;
      this->supplyVoltageDips_ = x.supplyVoltageDips_;
      this->supplyVoltageImbalance_ = x.supplyVoltageImbalance_;
      this->supplyVoltageVariations_ = x.supplyVoltageVariations_;
      this->tempOvervoltage_ = x.tempOvervoltage_;
    }

    return *this;
  }

  ElectricPowerQualitySummary::
  ~ElectricPowerQualitySummary ()
  {
  }

  static
  const ::xsd::cxx::tree::type_factory_initializer< 0, char, ElectricPowerQualitySummary >
  _xsd_ElectricPowerQualitySummary_type_factory_init (
    "ElectricPowerQualitySummary",
    "http://naesb.org/espi");
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace espi
{
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace espi
{
  void
  operator<< (::xercesc::DOMElement& e, const ElectricPowerQualitySummary& i)
  {
    e << static_cast< const ::espi::IdentifiedObject& > (i);

    // flickerPlt
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.flickerPlt ())
      {
        const ElectricPowerQualitySummary::flickerPlt_type& x (*i.flickerPlt ());
        if (typeid (ElectricPowerQualitySummary::flickerPlt_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "flickerPlt",
              "http://naesb.org/espi",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "flickerPlt",
            "http://naesb.org/espi",
            false, true, e, x);
      }
    }

    // flickerPst
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.flickerPst ())
      {
        const ElectricPowerQualitySummary::flickerPst_type& x (*i.flickerPst ());
        if (typeid (ElectricPowerQualitySummary::flickerPst_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "flickerPst",
              "http://naesb.org/espi",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "flickerPst",
            "http://naesb.org/espi",
            false, true, e, x);
      }
    }

    // harmonicVoltage
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.harmonicVoltage ())
      {
        const ElectricPowerQualitySummary::harmonicVoltage_type& x (*i.harmonicVoltage ());
        if (typeid (ElectricPowerQualitySummary::harmonicVoltage_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "harmonicVoltage",
              "http://naesb.org/espi",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "harmonicVoltage",
            "http://naesb.org/espi",
            false, true, e, x);
      }
    }

    // longInterruptions
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.longInterruptions ())
      {
        const ElectricPowerQualitySummary::longInterruptions_type& x (*i.longInterruptions ());
        if (typeid (ElectricPowerQualitySummary::longInterruptions_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "longInterruptions",
              "http://naesb.org/espi",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "longInterruptions",
            "http://naesb.org/espi",
            false, true, e, x);
      }
    }

    // mainsVoltage
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.mainsVoltage ())
      {
        const ElectricPowerQualitySummary::mainsVoltage_type& x (*i.mainsVoltage ());
        if (typeid (ElectricPowerQualitySummary::mainsVoltage_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "mainsVoltage",
              "http://naesb.org/espi",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "mainsVoltage",
            "http://naesb.org/espi",
            false, true, e, x);
      }
    }

    // measurementProtocol
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.measurementProtocol ())
      {
        const ElectricPowerQualitySummary::measurementProtocol_type& x (*i.measurementProtocol ());
        if (typeid (ElectricPowerQualitySummary::measurementProtocol_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "measurementProtocol",
              "http://naesb.org/espi",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "measurementProtocol",
            "http://naesb.org/espi",
            false, true, e, x);
      }
    }

    // powerFrequency
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.powerFrequency ())
      {
        const ElectricPowerQualitySummary::powerFrequency_type& x (*i.powerFrequency ());
        if (typeid (ElectricPowerQualitySummary::powerFrequency_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "powerFrequency",
              "http://naesb.org/espi",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "powerFrequency",
            "http://naesb.org/espi",
            false, true, e, x);
      }
    }

    // rapidVoltageChanges
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.rapidVoltageChanges ())
      {
        const ElectricPowerQualitySummary::rapidVoltageChanges_type& x (*i.rapidVoltageChanges ());
        if (typeid (ElectricPowerQualitySummary::rapidVoltageChanges_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "rapidVoltageChanges",
              "http://naesb.org/espi",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "rapidVoltageChanges",
            "http://naesb.org/espi",
            false, true, e, x);
      }
    }

    // shortInterruptions
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.shortInterruptions ())
      {
        const ElectricPowerQualitySummary::shortInterruptions_type& x (*i.shortInterruptions ());
        if (typeid (ElectricPowerQualitySummary::shortInterruptions_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "shortInterruptions",
              "http://naesb.org/espi",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "shortInterruptions",
            "http://naesb.org/espi",
            false, true, e, x);
      }
    }

    // summaryInterval
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      const ElectricPowerQualitySummary::summaryInterval_type& x (i.summaryInterval ());
      if (typeid (ElectricPowerQualitySummary::summaryInterval_type) == typeid (x))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "summaryInterval",
            "http://naesb.org/espi",
            e));

        s << x;
      }
      else
        tsm.serialize (
          "summaryInterval",
          "http://naesb.org/espi",
          false, true, e, x);
    }

    // supplyVoltageDips
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.supplyVoltageDips ())
      {
        const ElectricPowerQualitySummary::supplyVoltageDips_type& x (*i.supplyVoltageDips ());
        if (typeid (ElectricPowerQualitySummary::supplyVoltageDips_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "supplyVoltageDips",
              "http://naesb.org/espi",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "supplyVoltageDips",
            "http://naesb.org/espi",
            false, true, e, x);
      }
    }

    // supplyVoltageImbalance
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.supplyVoltageImbalance ())
      {
        const ElectricPowerQualitySummary::supplyVoltageImbalance_type& x (*i.supplyVoltageImbalance ());
        if (typeid (ElectricPowerQualitySummary::supplyVoltageImbalance_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "supplyVoltageImbalance",
              "http://naesb.org/espi",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "supplyVoltageImbalance",
            "http://naesb.org/espi",
            false, true, e, x);
      }
    }

    // supplyVoltageVariations
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.supplyVoltageVariations ())
      {
        const ElectricPowerQualitySummary::supplyVoltageVariations_type& x (*i.supplyVoltageVariations ());
        if (typeid (ElectricPowerQualitySummary::supplyVoltageVariations_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "supplyVoltageVariations",
              "http://naesb.org/espi",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "supplyVoltageVariations",
            "http://naesb.org/espi",
            false, true, e, x);
      }
    }

    // tempOvervoltage
    //
    {
      ::xsd::cxx::tree::type_serializer_map< char >& tsm (
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

      if (i.tempOvervoltage ())
      {
        const ElectricPowerQualitySummary::tempOvervoltage_type& x (*i.tempOvervoltage ());
        if (typeid (ElectricPowerQualitySummary::tempOvervoltage_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "tempOvervoltage",
              "http://naesb.org/espi",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "tempOvervoltage",
            "http://naesb.org/espi",
            false, true, e, x);
      }
    }
  }

  static
  const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ElectricPowerQualitySummary >
  _xsd_ElectricPowerQualitySummary_type_serializer_init (
    "ElectricPowerQualitySummary",
    "http://naesb.org/espi");
}

// Begin epilogue.
//
//
// End epilogue.

#include <xsd/cxx/post.hxx>

