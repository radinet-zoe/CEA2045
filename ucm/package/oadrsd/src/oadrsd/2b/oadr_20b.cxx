// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#include <xsd/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include "oadr_20b.hxx"

namespace oadr2b
{
  namespace oadr
  {
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace oadr2b
{
  namespace oadr
  {
    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::oadr2b::oadr::BaseUnitType >
    _xsd_customUnit_element_factory_init (
      "itemBase",
      "http://docs.oasis-open.org/ns/emix/2011/06",
      "customUnit",
      "http://openadr.org/oadr-2.0b/2012/07");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::oadr2b::oadr::CurrentType >
    _xsd_current_element_factory_init (
      "itemBase",
      "http://docs.oasis-open.org/ns/emix/2011/06",
      "current",
      "http://openadr.org/oadr-2.0b/2012/07");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::oadr2b::oadr::currencyType >
    _xsd_currency_element_factory_init (
      "itemBase",
      "http://docs.oasis-open.org/ns/emix/2011/06",
      "currency",
      "http://openadr.org/oadr-2.0b/2012/07");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::oadr2b::oadr::currencyType >
    _xsd_currencyPerKWh_element_factory_init (
      "itemBase",
      "http://docs.oasis-open.org/ns/emix/2011/06",
      "currencyPerKWh",
      "http://openadr.org/oadr-2.0b/2012/07");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::oadr2b::oadr::currencyType >
    _xsd_currencyPerKW_element_factory_init (
      "itemBase",
      "http://docs.oasis-open.org/ns/emix/2011/06",
      "currencyPerKW",
      "http://openadr.org/oadr-2.0b/2012/07");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::oadr2b::oadr::currencyType >
    _xsd_currencyPerThm_element_factory_init (
      "itemBase",
      "http://docs.oasis-open.org/ns/emix/2011/06",
      "currencyPerThm",
      "http://openadr.org/oadr-2.0b/2012/07");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::oadr2b::oadr::FrequencyType >
    _xsd_frequency_element_factory_init (
      "itemBase",
      "http://docs.oasis-open.org/ns/emix/2011/06",
      "frequency",
      "http://openadr.org/oadr-2.0b/2012/07");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::oadr2b::oadr::ThermType >
    _xsd_Therm_element_factory_init (
      "itemBase",
      "http://docs.oasis-open.org/ns/emix/2011/06",
      "Therm",
      "http://openadr.org/oadr-2.0b/2012/07");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::oadr2b::oadr::temperatureType >
    _xsd_temperature_element_factory_init (
      "itemBase",
      "http://docs.oasis-open.org/ns/emix/2011/06",
      "temperature",
      "http://openadr.org/oadr-2.0b/2012/07");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::oadr2b::oadr::pulseCountType >
    _xsd_pulseCount_element_factory_init (
      "itemBase",
      "http://docs.oasis-open.org/ns/emix/2011/06",
      "pulseCount",
      "http://openadr.org/oadr-2.0b/2012/07");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::oadr2b::oadr::oadrPayloadResourceStatusType >
    _xsd_oadrPayloadResourceStatus_element_factory_init (
      "payloadBase",
      "http://docs.oasis-open.org/ns/energyinterop/201110",
      "oadrPayloadResourceStatus",
      "http://openadr.org/oadr-2.0b/2012/07");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::oadr2b::oadr::oadrGBStreamPayloadBase >
    _xsd_oadrGBPayload_element_factory_init (
      "streamPayloadBase",
      "urn:ietf:params:xml:ns:icalendar-2.0:stream",
      "oadrGBPayload",
      "http://openadr.org/oadr-2.0b/2012/07");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::oadr2b::oadr::oadrGBItemBase >
    _xsd_oadrGBDataDescription_element_factory_init (
      "itemBase",
      "http://docs.oasis-open.org/ns/emix/2011/06",
      "oadrGBDataDescription",
      "http://openadr.org/oadr-2.0b/2012/07");


    static
    const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::oadr2b::oadr::oadrReportPayloadType >
    _xsd_oadrReportPayload_element_factory_init (
      "streamPayloadBase",
      "urn:ietf:params:xml:ns:icalendar-2.0:stream",
      "oadrReportPayload",
      "http://openadr.org/oadr-2.0b/2012/07");
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace oadr2b
{
  namespace oadr
  {
    ::std::auto_ptr< ::oadr2b::oadr::oadrPayload >
    oadrPayload_ (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrPayload > (
        ::oadr2b::oadr::oadrPayload_ (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPayload >
    oadrPayload_ (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrPayload > (
        ::oadr2b::oadr::oadrPayload_ (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPayload >
    oadrPayload_ (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrPayload > (
        ::oadr2b::oadr::oadrPayload_ (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPayload >
    oadrPayload_ (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrPayload_ (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPayload >
    oadrPayload_ (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrPayload_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPayload >
    oadrPayload_ (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrPayload_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPayload >
    oadrPayload_ (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrPayload_ (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPayload >
    oadrPayload_ (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrPayload_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPayload >
    oadrPayload_ (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrPayload_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPayload >
    oadrPayload_ (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrPayload > (
        ::oadr2b::oadr::oadrPayload_ (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPayload >
    oadrPayload_ (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrPayload > (
        ::oadr2b::oadr::oadrPayload_ (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPayload >
    oadrPayload_ (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrPayload > (
        ::oadr2b::oadr::oadrPayload_ (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPayload >
    oadrPayload_ (const ::xercesc::DOMDocument& doc,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrPayload > (
          ::oadr2b::oadr::oadrPayload_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "oadrPayload" &&
          n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrPayload > r (
          ::xsd::cxx::tree::traits< ::oadr2b::oadr::oadrPayload, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrPayload",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPayload >
    oadrPayload_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "oadrPayload" &&
          n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrPayload > r (
          ::xsd::cxx::tree::traits< ::oadr2b::oadr::oadrPayload, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrPayload",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrSignedObject >
    oadrSignedObject_ (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrSignedObject > (
        ::oadr2b::oadr::oadrSignedObject_ (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrSignedObject >
    oadrSignedObject_ (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrSignedObject > (
        ::oadr2b::oadr::oadrSignedObject_ (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrSignedObject >
    oadrSignedObject_ (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrSignedObject > (
        ::oadr2b::oadr::oadrSignedObject_ (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrSignedObject >
    oadrSignedObject_ (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrSignedObject_ (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrSignedObject >
    oadrSignedObject_ (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrSignedObject_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrSignedObject >
    oadrSignedObject_ (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrSignedObject_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrSignedObject >
    oadrSignedObject_ (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrSignedObject_ (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrSignedObject >
    oadrSignedObject_ (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrSignedObject_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrSignedObject >
    oadrSignedObject_ (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrSignedObject_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrSignedObject >
    oadrSignedObject_ (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrSignedObject > (
        ::oadr2b::oadr::oadrSignedObject_ (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrSignedObject >
    oadrSignedObject_ (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrSignedObject > (
        ::oadr2b::oadr::oadrSignedObject_ (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrSignedObject >
    oadrSignedObject_ (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrSignedObject > (
        ::oadr2b::oadr::oadrSignedObject_ (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrSignedObject >
    oadrSignedObject_ (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrSignedObject > (
          ::oadr2b::oadr::oadrSignedObject_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "oadrSignedObject" &&
          n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrSignedObject > r (
          ::xsd::cxx::tree::traits< ::oadr2b::oadr::oadrSignedObject, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrSignedObject",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrSignedObject >
    oadrSignedObject_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "oadrSignedObject" &&
          n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrSignedObject > r (
          ::xsd::cxx::tree::traits< ::oadr2b::oadr::oadrSignedObject, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrSignedObject",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrDistributeEventType >
    oadrDistributeEvent (const ::std::string& u,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrDistributeEventType > (
        ::oadr2b::oadr::oadrDistributeEvent (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrDistributeEventType >
    oadrDistributeEvent (const ::std::string& u,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrDistributeEventType > (
        ::oadr2b::oadr::oadrDistributeEvent (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrDistributeEventType >
    oadrDistributeEvent (const ::std::string& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrDistributeEventType > (
        ::oadr2b::oadr::oadrDistributeEvent (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrDistributeEventType >
    oadrDistributeEvent (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrDistributeEvent (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrDistributeEventType >
    oadrDistributeEvent (::std::istream& is,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrDistributeEvent (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrDistributeEventType >
    oadrDistributeEvent (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrDistributeEvent (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrDistributeEventType >
    oadrDistributeEvent (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrDistributeEvent (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrDistributeEventType >
    oadrDistributeEvent (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrDistributeEvent (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrDistributeEventType >
    oadrDistributeEvent (::std::istream& is,
                         const ::std::string& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrDistributeEvent (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrDistributeEventType >
    oadrDistributeEvent (::xercesc::InputSource& i,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrDistributeEventType > (
        ::oadr2b::oadr::oadrDistributeEvent (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrDistributeEventType >
    oadrDistributeEvent (::xercesc::InputSource& i,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrDistributeEventType > (
        ::oadr2b::oadr::oadrDistributeEvent (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrDistributeEventType >
    oadrDistributeEvent (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrDistributeEventType > (
        ::oadr2b::oadr::oadrDistributeEvent (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrDistributeEventType >
    oadrDistributeEvent (const ::xercesc::DOMDocument& doc,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrDistributeEventType > (
          ::oadr2b::oadr::oadrDistributeEvent (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrDistributeEvent",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrDistributeEventType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrDistributeEventType > r (
          dynamic_cast< ::oadr2b::oadr::oadrDistributeEventType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrDistributeEvent",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrDistributeEventType >
    oadrDistributeEvent (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrDistributeEvent",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrDistributeEventType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::oadrDistributeEventType > r (
          dynamic_cast< ::oadr2b::oadr::oadrDistributeEventType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrDistributeEvent",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedEventType >
    oadrCreatedEvent (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedEventType > (
        ::oadr2b::oadr::oadrCreatedEvent (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedEventType >
    oadrCreatedEvent (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedEventType > (
        ::oadr2b::oadr::oadrCreatedEvent (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedEventType >
    oadrCreatedEvent (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedEventType > (
        ::oadr2b::oadr::oadrCreatedEvent (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedEventType >
    oadrCreatedEvent (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrCreatedEvent (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedEventType >
    oadrCreatedEvent (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrCreatedEvent (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedEventType >
    oadrCreatedEvent (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrCreatedEvent (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedEventType >
    oadrCreatedEvent (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrCreatedEvent (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedEventType >
    oadrCreatedEvent (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrCreatedEvent (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedEventType >
    oadrCreatedEvent (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrCreatedEvent (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedEventType >
    oadrCreatedEvent (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedEventType > (
        ::oadr2b::oadr::oadrCreatedEvent (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedEventType >
    oadrCreatedEvent (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedEventType > (
        ::oadr2b::oadr::oadrCreatedEvent (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedEventType >
    oadrCreatedEvent (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedEventType > (
        ::oadr2b::oadr::oadrCreatedEvent (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedEventType >
    oadrCreatedEvent (const ::xercesc::DOMDocument& doc,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedEventType > (
          ::oadr2b::oadr::oadrCreatedEvent (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrCreatedEvent",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrCreatedEventType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedEventType > r (
          dynamic_cast< ::oadr2b::oadr::oadrCreatedEventType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrCreatedEvent",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedEventType >
    oadrCreatedEvent (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrCreatedEvent",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrCreatedEventType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedEventType > r (
          dynamic_cast< ::oadr2b::oadr::oadrCreatedEventType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrCreatedEvent",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRequestEventType >
    oadrRequestEvent (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrRequestEventType > (
        ::oadr2b::oadr::oadrRequestEvent (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRequestEventType >
    oadrRequestEvent (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrRequestEventType > (
        ::oadr2b::oadr::oadrRequestEvent (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRequestEventType >
    oadrRequestEvent (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrRequestEventType > (
        ::oadr2b::oadr::oadrRequestEvent (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRequestEventType >
    oadrRequestEvent (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrRequestEvent (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRequestEventType >
    oadrRequestEvent (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrRequestEvent (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRequestEventType >
    oadrRequestEvent (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrRequestEvent (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRequestEventType >
    oadrRequestEvent (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrRequestEvent (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRequestEventType >
    oadrRequestEvent (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrRequestEvent (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRequestEventType >
    oadrRequestEvent (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrRequestEvent (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRequestEventType >
    oadrRequestEvent (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrRequestEventType > (
        ::oadr2b::oadr::oadrRequestEvent (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRequestEventType >
    oadrRequestEvent (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrRequestEventType > (
        ::oadr2b::oadr::oadrRequestEvent (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRequestEventType >
    oadrRequestEvent (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrRequestEventType > (
        ::oadr2b::oadr::oadrRequestEvent (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRequestEventType >
    oadrRequestEvent (const ::xercesc::DOMDocument& doc,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrRequestEventType > (
          ::oadr2b::oadr::oadrRequestEvent (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrRequestEvent",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrRequestEventType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrRequestEventType > r (
          dynamic_cast< ::oadr2b::oadr::oadrRequestEventType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrRequestEvent",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRequestEventType >
    oadrRequestEvent (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrRequestEvent",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrRequestEventType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::oadrRequestEventType > r (
          dynamic_cast< ::oadr2b::oadr::oadrRequestEventType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrRequestEvent",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrResponseType >
    oadrResponse (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrResponseType > (
        ::oadr2b::oadr::oadrResponse (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrResponseType >
    oadrResponse (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrResponseType > (
        ::oadr2b::oadr::oadrResponse (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrResponseType >
    oadrResponse (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrResponseType > (
        ::oadr2b::oadr::oadrResponse (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrResponseType >
    oadrResponse (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrResponse (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrResponseType >
    oadrResponse (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrResponse (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrResponseType >
    oadrResponse (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrResponse (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrResponseType >
    oadrResponse (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrResponse (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrResponseType >
    oadrResponse (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrResponse (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrResponseType >
    oadrResponse (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrResponse (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrResponseType >
    oadrResponse (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrResponseType > (
        ::oadr2b::oadr::oadrResponse (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrResponseType >
    oadrResponse (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrResponseType > (
        ::oadr2b::oadr::oadrResponse (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrResponseType >
    oadrResponse (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrResponseType > (
        ::oadr2b::oadr::oadrResponse (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrResponseType >
    oadrResponse (const ::xercesc::DOMDocument& doc,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrResponseType > (
          ::oadr2b::oadr::oadrResponse (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrResponse",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrResponseType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrResponseType > r (
          dynamic_cast< ::oadr2b::oadr::oadrResponseType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrResponse",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrResponseType >
    oadrResponse (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrResponse",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrResponseType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::oadrResponseType > r (
          dynamic_cast< ::oadr2b::oadr::oadrResponseType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrResponse",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelOptType >
    oadrCancelOpt (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCancelOptType > (
        ::oadr2b::oadr::oadrCancelOpt (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelOptType >
    oadrCancelOpt (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCancelOptType > (
        ::oadr2b::oadr::oadrCancelOpt (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelOptType >
    oadrCancelOpt (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCancelOptType > (
        ::oadr2b::oadr::oadrCancelOpt (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelOptType >
    oadrCancelOpt (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrCancelOpt (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelOptType >
    oadrCancelOpt (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrCancelOpt (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelOptType >
    oadrCancelOpt (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrCancelOpt (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelOptType >
    oadrCancelOpt (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrCancelOpt (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelOptType >
    oadrCancelOpt (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrCancelOpt (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelOptType >
    oadrCancelOpt (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrCancelOpt (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelOptType >
    oadrCancelOpt (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCancelOptType > (
        ::oadr2b::oadr::oadrCancelOpt (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelOptType >
    oadrCancelOpt (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCancelOptType > (
        ::oadr2b::oadr::oadrCancelOpt (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelOptType >
    oadrCancelOpt (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCancelOptType > (
        ::oadr2b::oadr::oadrCancelOpt (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelOptType >
    oadrCancelOpt (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrCancelOptType > (
          ::oadr2b::oadr::oadrCancelOpt (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrCancelOpt",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrCancelOptType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrCancelOptType > r (
          dynamic_cast< ::oadr2b::oadr::oadrCancelOptType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrCancelOpt",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelOptType >
    oadrCancelOpt (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrCancelOpt",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrCancelOptType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::oadrCancelOptType > r (
          dynamic_cast< ::oadr2b::oadr::oadrCancelOptType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrCancelOpt",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledOptType >
    oadrCanceledOpt (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledOptType > (
        ::oadr2b::oadr::oadrCanceledOpt (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledOptType >
    oadrCanceledOpt (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledOptType > (
        ::oadr2b::oadr::oadrCanceledOpt (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledOptType >
    oadrCanceledOpt (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledOptType > (
        ::oadr2b::oadr::oadrCanceledOpt (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledOptType >
    oadrCanceledOpt (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrCanceledOpt (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledOptType >
    oadrCanceledOpt (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrCanceledOpt (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledOptType >
    oadrCanceledOpt (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrCanceledOpt (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledOptType >
    oadrCanceledOpt (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrCanceledOpt (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledOptType >
    oadrCanceledOpt (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrCanceledOpt (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledOptType >
    oadrCanceledOpt (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrCanceledOpt (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledOptType >
    oadrCanceledOpt (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledOptType > (
        ::oadr2b::oadr::oadrCanceledOpt (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledOptType >
    oadrCanceledOpt (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledOptType > (
        ::oadr2b::oadr::oadrCanceledOpt (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledOptType >
    oadrCanceledOpt (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledOptType > (
        ::oadr2b::oadr::oadrCanceledOpt (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledOptType >
    oadrCanceledOpt (const ::xercesc::DOMDocument& doc,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledOptType > (
          ::oadr2b::oadr::oadrCanceledOpt (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrCanceledOpt",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrCanceledOptType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledOptType > r (
          dynamic_cast< ::oadr2b::oadr::oadrCanceledOptType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrCanceledOpt",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledOptType >
    oadrCanceledOpt (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrCanceledOpt",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrCanceledOptType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledOptType > r (
          dynamic_cast< ::oadr2b::oadr::oadrCanceledOptType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrCanceledOpt",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreateOptType >
    oadrCreateOpt (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreateOptType > (
        ::oadr2b::oadr::oadrCreateOpt (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreateOptType >
    oadrCreateOpt (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreateOptType > (
        ::oadr2b::oadr::oadrCreateOpt (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreateOptType >
    oadrCreateOpt (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreateOptType > (
        ::oadr2b::oadr::oadrCreateOpt (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreateOptType >
    oadrCreateOpt (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrCreateOpt (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreateOptType >
    oadrCreateOpt (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrCreateOpt (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreateOptType >
    oadrCreateOpt (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrCreateOpt (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreateOptType >
    oadrCreateOpt (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrCreateOpt (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreateOptType >
    oadrCreateOpt (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrCreateOpt (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreateOptType >
    oadrCreateOpt (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrCreateOpt (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreateOptType >
    oadrCreateOpt (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreateOptType > (
        ::oadr2b::oadr::oadrCreateOpt (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreateOptType >
    oadrCreateOpt (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreateOptType > (
        ::oadr2b::oadr::oadrCreateOpt (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreateOptType >
    oadrCreateOpt (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreateOptType > (
        ::oadr2b::oadr::oadrCreateOpt (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreateOptType >
    oadrCreateOpt (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrCreateOptType > (
          ::oadr2b::oadr::oadrCreateOpt (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrCreateOpt",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrCreateOptType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrCreateOptType > r (
          dynamic_cast< ::oadr2b::oadr::oadrCreateOptType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrCreateOpt",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreateOptType >
    oadrCreateOpt (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrCreateOpt",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrCreateOptType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::oadrCreateOptType > r (
          dynamic_cast< ::oadr2b::oadr::oadrCreateOptType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrCreateOpt",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedOptType >
    oadrCreatedOpt (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedOptType > (
        ::oadr2b::oadr::oadrCreatedOpt (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedOptType >
    oadrCreatedOpt (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedOptType > (
        ::oadr2b::oadr::oadrCreatedOpt (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedOptType >
    oadrCreatedOpt (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedOptType > (
        ::oadr2b::oadr::oadrCreatedOpt (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedOptType >
    oadrCreatedOpt (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrCreatedOpt (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedOptType >
    oadrCreatedOpt (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrCreatedOpt (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedOptType >
    oadrCreatedOpt (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrCreatedOpt (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedOptType >
    oadrCreatedOpt (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrCreatedOpt (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedOptType >
    oadrCreatedOpt (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrCreatedOpt (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedOptType >
    oadrCreatedOpt (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrCreatedOpt (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedOptType >
    oadrCreatedOpt (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedOptType > (
        ::oadr2b::oadr::oadrCreatedOpt (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedOptType >
    oadrCreatedOpt (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedOptType > (
        ::oadr2b::oadr::oadrCreatedOpt (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedOptType >
    oadrCreatedOpt (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedOptType > (
        ::oadr2b::oadr::oadrCreatedOpt (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedOptType >
    oadrCreatedOpt (const ::xercesc::DOMDocument& doc,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedOptType > (
          ::oadr2b::oadr::oadrCreatedOpt (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrCreatedOpt",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrCreatedOptType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedOptType > r (
          dynamic_cast< ::oadr2b::oadr::oadrCreatedOptType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrCreatedOpt",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedOptType >
    oadrCreatedOpt (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrCreatedOpt",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrCreatedOptType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedOptType > r (
          dynamic_cast< ::oadr2b::oadr::oadrCreatedOptType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrCreatedOpt",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelReportType >
    oadrCancelReport (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCancelReportType > (
        ::oadr2b::oadr::oadrCancelReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelReportType >
    oadrCancelReport (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCancelReportType > (
        ::oadr2b::oadr::oadrCancelReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelReportType >
    oadrCancelReport (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCancelReportType > (
        ::oadr2b::oadr::oadrCancelReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelReportType >
    oadrCancelReport (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrCancelReport (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelReportType >
    oadrCancelReport (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrCancelReport (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelReportType >
    oadrCancelReport (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrCancelReport (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelReportType >
    oadrCancelReport (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrCancelReport (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelReportType >
    oadrCancelReport (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrCancelReport (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelReportType >
    oadrCancelReport (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrCancelReport (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelReportType >
    oadrCancelReport (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCancelReportType > (
        ::oadr2b::oadr::oadrCancelReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelReportType >
    oadrCancelReport (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCancelReportType > (
        ::oadr2b::oadr::oadrCancelReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelReportType >
    oadrCancelReport (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCancelReportType > (
        ::oadr2b::oadr::oadrCancelReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelReportType >
    oadrCancelReport (const ::xercesc::DOMDocument& doc,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrCancelReportType > (
          ::oadr2b::oadr::oadrCancelReport (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrCancelReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrCancelReportType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrCancelReportType > r (
          dynamic_cast< ::oadr2b::oadr::oadrCancelReportType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrCancelReport",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelReportType >
    oadrCancelReport (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrCancelReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrCancelReportType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::oadrCancelReportType > r (
          dynamic_cast< ::oadr2b::oadr::oadrCancelReportType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrCancelReport",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledReportType >
    oadrCanceledReport (const ::std::string& u,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledReportType > (
        ::oadr2b::oadr::oadrCanceledReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledReportType >
    oadrCanceledReport (const ::std::string& u,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledReportType > (
        ::oadr2b::oadr::oadrCanceledReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledReportType >
    oadrCanceledReport (const ::std::string& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledReportType > (
        ::oadr2b::oadr::oadrCanceledReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledReportType >
    oadrCanceledReport (::std::istream& is,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrCanceledReport (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledReportType >
    oadrCanceledReport (::std::istream& is,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrCanceledReport (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledReportType >
    oadrCanceledReport (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrCanceledReport (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledReportType >
    oadrCanceledReport (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrCanceledReport (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledReportType >
    oadrCanceledReport (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrCanceledReport (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledReportType >
    oadrCanceledReport (::std::istream& is,
                        const ::std::string& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrCanceledReport (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledReportType >
    oadrCanceledReport (::xercesc::InputSource& i,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledReportType > (
        ::oadr2b::oadr::oadrCanceledReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledReportType >
    oadrCanceledReport (::xercesc::InputSource& i,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledReportType > (
        ::oadr2b::oadr::oadrCanceledReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledReportType >
    oadrCanceledReport (::xercesc::InputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledReportType > (
        ::oadr2b::oadr::oadrCanceledReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledReportType >
    oadrCanceledReport (const ::xercesc::DOMDocument& doc,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledReportType > (
          ::oadr2b::oadr::oadrCanceledReport (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrCanceledReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrCanceledReportType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledReportType > r (
          dynamic_cast< ::oadr2b::oadr::oadrCanceledReportType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrCanceledReport",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledReportType >
    oadrCanceledReport (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrCanceledReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrCanceledReportType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledReportType > r (
          dynamic_cast< ::oadr2b::oadr::oadrCanceledReportType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrCanceledReport",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreateReportType >
    oadrCreateReport (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreateReportType > (
        ::oadr2b::oadr::oadrCreateReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreateReportType >
    oadrCreateReport (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreateReportType > (
        ::oadr2b::oadr::oadrCreateReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreateReportType >
    oadrCreateReport (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreateReportType > (
        ::oadr2b::oadr::oadrCreateReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreateReportType >
    oadrCreateReport (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrCreateReport (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreateReportType >
    oadrCreateReport (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrCreateReport (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreateReportType >
    oadrCreateReport (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrCreateReport (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreateReportType >
    oadrCreateReport (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrCreateReport (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreateReportType >
    oadrCreateReport (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrCreateReport (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreateReportType >
    oadrCreateReport (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrCreateReport (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreateReportType >
    oadrCreateReport (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreateReportType > (
        ::oadr2b::oadr::oadrCreateReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreateReportType >
    oadrCreateReport (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreateReportType > (
        ::oadr2b::oadr::oadrCreateReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreateReportType >
    oadrCreateReport (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreateReportType > (
        ::oadr2b::oadr::oadrCreateReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreateReportType >
    oadrCreateReport (const ::xercesc::DOMDocument& doc,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrCreateReportType > (
          ::oadr2b::oadr::oadrCreateReport (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrCreateReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrCreateReportType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrCreateReportType > r (
          dynamic_cast< ::oadr2b::oadr::oadrCreateReportType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrCreateReport",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreateReportType >
    oadrCreateReport (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrCreateReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrCreateReportType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::oadrCreateReportType > r (
          dynamic_cast< ::oadr2b::oadr::oadrCreateReportType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrCreateReport",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedReportType >
    oadrCreatedReport (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedReportType > (
        ::oadr2b::oadr::oadrCreatedReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedReportType >
    oadrCreatedReport (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedReportType > (
        ::oadr2b::oadr::oadrCreatedReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedReportType >
    oadrCreatedReport (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedReportType > (
        ::oadr2b::oadr::oadrCreatedReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedReportType >
    oadrCreatedReport (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrCreatedReport (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedReportType >
    oadrCreatedReport (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrCreatedReport (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedReportType >
    oadrCreatedReport (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrCreatedReport (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedReportType >
    oadrCreatedReport (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrCreatedReport (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedReportType >
    oadrCreatedReport (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrCreatedReport (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedReportType >
    oadrCreatedReport (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrCreatedReport (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedReportType >
    oadrCreatedReport (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedReportType > (
        ::oadr2b::oadr::oadrCreatedReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedReportType >
    oadrCreatedReport (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedReportType > (
        ::oadr2b::oadr::oadrCreatedReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedReportType >
    oadrCreatedReport (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedReportType > (
        ::oadr2b::oadr::oadrCreatedReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedReportType >
    oadrCreatedReport (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedReportType > (
          ::oadr2b::oadr::oadrCreatedReport (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrCreatedReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrCreatedReportType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedReportType > r (
          dynamic_cast< ::oadr2b::oadr::oadrCreatedReportType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrCreatedReport",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedReportType >
    oadrCreatedReport (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrCreatedReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrCreatedReportType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedReportType > r (
          dynamic_cast< ::oadr2b::oadr::oadrCreatedReportType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrCreatedReport",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRegisterReportType >
    oadrRegisterReport (const ::std::string& u,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrRegisterReportType > (
        ::oadr2b::oadr::oadrRegisterReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRegisterReportType >
    oadrRegisterReport (const ::std::string& u,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrRegisterReportType > (
        ::oadr2b::oadr::oadrRegisterReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRegisterReportType >
    oadrRegisterReport (const ::std::string& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrRegisterReportType > (
        ::oadr2b::oadr::oadrRegisterReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRegisterReportType >
    oadrRegisterReport (::std::istream& is,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrRegisterReport (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRegisterReportType >
    oadrRegisterReport (::std::istream& is,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrRegisterReport (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRegisterReportType >
    oadrRegisterReport (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrRegisterReport (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRegisterReportType >
    oadrRegisterReport (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrRegisterReport (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRegisterReportType >
    oadrRegisterReport (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrRegisterReport (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRegisterReportType >
    oadrRegisterReport (::std::istream& is,
                        const ::std::string& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrRegisterReport (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRegisterReportType >
    oadrRegisterReport (::xercesc::InputSource& i,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrRegisterReportType > (
        ::oadr2b::oadr::oadrRegisterReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRegisterReportType >
    oadrRegisterReport (::xercesc::InputSource& i,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrRegisterReportType > (
        ::oadr2b::oadr::oadrRegisterReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRegisterReportType >
    oadrRegisterReport (::xercesc::InputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrRegisterReportType > (
        ::oadr2b::oadr::oadrRegisterReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRegisterReportType >
    oadrRegisterReport (const ::xercesc::DOMDocument& doc,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrRegisterReportType > (
          ::oadr2b::oadr::oadrRegisterReport (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrRegisterReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrRegisterReportType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrRegisterReportType > r (
          dynamic_cast< ::oadr2b::oadr::oadrRegisterReportType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrRegisterReport",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRegisterReportType >
    oadrRegisterReport (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrRegisterReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrRegisterReportType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::oadrRegisterReportType > r (
          dynamic_cast< ::oadr2b::oadr::oadrRegisterReportType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrRegisterReport",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRegisteredReportType >
    oadrRegisteredReport (const ::std::string& u,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrRegisteredReportType > (
        ::oadr2b::oadr::oadrRegisteredReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRegisteredReportType >
    oadrRegisteredReport (const ::std::string& u,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrRegisteredReportType > (
        ::oadr2b::oadr::oadrRegisteredReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRegisteredReportType >
    oadrRegisteredReport (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrRegisteredReportType > (
        ::oadr2b::oadr::oadrRegisteredReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRegisteredReportType >
    oadrRegisteredReport (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrRegisteredReport (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRegisteredReportType >
    oadrRegisteredReport (::std::istream& is,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrRegisteredReport (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRegisteredReportType >
    oadrRegisteredReport (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrRegisteredReport (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRegisteredReportType >
    oadrRegisteredReport (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrRegisteredReport (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRegisteredReportType >
    oadrRegisteredReport (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrRegisteredReport (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRegisteredReportType >
    oadrRegisteredReport (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrRegisteredReport (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRegisteredReportType >
    oadrRegisteredReport (::xercesc::InputSource& i,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrRegisteredReportType > (
        ::oadr2b::oadr::oadrRegisteredReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRegisteredReportType >
    oadrRegisteredReport (::xercesc::InputSource& i,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrRegisteredReportType > (
        ::oadr2b::oadr::oadrRegisteredReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRegisteredReportType >
    oadrRegisteredReport (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrRegisteredReportType > (
        ::oadr2b::oadr::oadrRegisteredReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRegisteredReportType >
    oadrRegisteredReport (const ::xercesc::DOMDocument& doc,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrRegisteredReportType > (
          ::oadr2b::oadr::oadrRegisteredReport (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrRegisteredReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrRegisteredReportType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrRegisteredReportType > r (
          dynamic_cast< ::oadr2b::oadr::oadrRegisteredReportType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrRegisteredReport",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRegisteredReportType >
    oadrRegisteredReport (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrRegisteredReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrRegisteredReportType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::oadrRegisteredReportType > r (
          dynamic_cast< ::oadr2b::oadr::oadrRegisteredReportType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrRegisteredReport",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrUpdateReportType >
    oadrUpdateReport (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrUpdateReportType > (
        ::oadr2b::oadr::oadrUpdateReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrUpdateReportType >
    oadrUpdateReport (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrUpdateReportType > (
        ::oadr2b::oadr::oadrUpdateReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrUpdateReportType >
    oadrUpdateReport (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrUpdateReportType > (
        ::oadr2b::oadr::oadrUpdateReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrUpdateReportType >
    oadrUpdateReport (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrUpdateReport (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrUpdateReportType >
    oadrUpdateReport (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrUpdateReport (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrUpdateReportType >
    oadrUpdateReport (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrUpdateReport (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrUpdateReportType >
    oadrUpdateReport (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrUpdateReport (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrUpdateReportType >
    oadrUpdateReport (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrUpdateReport (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrUpdateReportType >
    oadrUpdateReport (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrUpdateReport (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrUpdateReportType >
    oadrUpdateReport (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrUpdateReportType > (
        ::oadr2b::oadr::oadrUpdateReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrUpdateReportType >
    oadrUpdateReport (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrUpdateReportType > (
        ::oadr2b::oadr::oadrUpdateReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrUpdateReportType >
    oadrUpdateReport (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrUpdateReportType > (
        ::oadr2b::oadr::oadrUpdateReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrUpdateReportType >
    oadrUpdateReport (const ::xercesc::DOMDocument& doc,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrUpdateReportType > (
          ::oadr2b::oadr::oadrUpdateReport (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrUpdateReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrUpdateReportType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrUpdateReportType > r (
          dynamic_cast< ::oadr2b::oadr::oadrUpdateReportType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrUpdateReport",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrUpdateReportType >
    oadrUpdateReport (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrUpdateReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrUpdateReportType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::oadrUpdateReportType > r (
          dynamic_cast< ::oadr2b::oadr::oadrUpdateReportType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrUpdateReport",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrUpdatedReportType >
    oadrUpdatedReport (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrUpdatedReportType > (
        ::oadr2b::oadr::oadrUpdatedReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrUpdatedReportType >
    oadrUpdatedReport (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrUpdatedReportType > (
        ::oadr2b::oadr::oadrUpdatedReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrUpdatedReportType >
    oadrUpdatedReport (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrUpdatedReportType > (
        ::oadr2b::oadr::oadrUpdatedReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrUpdatedReportType >
    oadrUpdatedReport (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrUpdatedReport (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrUpdatedReportType >
    oadrUpdatedReport (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrUpdatedReport (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrUpdatedReportType >
    oadrUpdatedReport (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrUpdatedReport (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrUpdatedReportType >
    oadrUpdatedReport (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrUpdatedReport (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrUpdatedReportType >
    oadrUpdatedReport (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrUpdatedReport (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrUpdatedReportType >
    oadrUpdatedReport (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrUpdatedReport (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrUpdatedReportType >
    oadrUpdatedReport (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrUpdatedReportType > (
        ::oadr2b::oadr::oadrUpdatedReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrUpdatedReportType >
    oadrUpdatedReport (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrUpdatedReportType > (
        ::oadr2b::oadr::oadrUpdatedReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrUpdatedReportType >
    oadrUpdatedReport (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrUpdatedReportType > (
        ::oadr2b::oadr::oadrUpdatedReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrUpdatedReportType >
    oadrUpdatedReport (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrUpdatedReportType > (
          ::oadr2b::oadr::oadrUpdatedReport (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrUpdatedReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrUpdatedReportType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrUpdatedReportType > r (
          dynamic_cast< ::oadr2b::oadr::oadrUpdatedReportType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrUpdatedReport",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrUpdatedReportType >
    oadrUpdatedReport (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrUpdatedReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrUpdatedReportType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::oadrUpdatedReportType > r (
          dynamic_cast< ::oadr2b::oadr::oadrUpdatedReportType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrUpdatedReport",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelPartyRegistrationType >
    oadrCancelPartyRegistration (const ::std::string& u,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCancelPartyRegistrationType > (
        ::oadr2b::oadr::oadrCancelPartyRegistration (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelPartyRegistrationType >
    oadrCancelPartyRegistration (const ::std::string& u,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCancelPartyRegistrationType > (
        ::oadr2b::oadr::oadrCancelPartyRegistration (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelPartyRegistrationType >
    oadrCancelPartyRegistration (const ::std::string& u,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCancelPartyRegistrationType > (
        ::oadr2b::oadr::oadrCancelPartyRegistration (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelPartyRegistrationType >
    oadrCancelPartyRegistration (::std::istream& is,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrCancelPartyRegistration (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelPartyRegistrationType >
    oadrCancelPartyRegistration (::std::istream& is,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrCancelPartyRegistration (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelPartyRegistrationType >
    oadrCancelPartyRegistration (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrCancelPartyRegistration (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelPartyRegistrationType >
    oadrCancelPartyRegistration (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrCancelPartyRegistration (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelPartyRegistrationType >
    oadrCancelPartyRegistration (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrCancelPartyRegistration (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelPartyRegistrationType >
    oadrCancelPartyRegistration (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrCancelPartyRegistration (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelPartyRegistrationType >
    oadrCancelPartyRegistration (::xercesc::InputSource& i,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCancelPartyRegistrationType > (
        ::oadr2b::oadr::oadrCancelPartyRegistration (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelPartyRegistrationType >
    oadrCancelPartyRegistration (::xercesc::InputSource& i,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCancelPartyRegistrationType > (
        ::oadr2b::oadr::oadrCancelPartyRegistration (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelPartyRegistrationType >
    oadrCancelPartyRegistration (::xercesc::InputSource& i,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCancelPartyRegistrationType > (
        ::oadr2b::oadr::oadrCancelPartyRegistration (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelPartyRegistrationType >
    oadrCancelPartyRegistration (const ::xercesc::DOMDocument& doc,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrCancelPartyRegistrationType > (
          ::oadr2b::oadr::oadrCancelPartyRegistration (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrCancelPartyRegistration",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrCancelPartyRegistrationType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrCancelPartyRegistrationType > r (
          dynamic_cast< ::oadr2b::oadr::oadrCancelPartyRegistrationType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrCancelPartyRegistration",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCancelPartyRegistrationType >
    oadrCancelPartyRegistration (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrCancelPartyRegistration",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrCancelPartyRegistrationType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::oadrCancelPartyRegistrationType > r (
          dynamic_cast< ::oadr2b::oadr::oadrCancelPartyRegistrationType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrCancelPartyRegistration",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledPartyRegistrationType >
    oadrCanceledPartyRegistration (const ::std::string& u,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledPartyRegistrationType > (
        ::oadr2b::oadr::oadrCanceledPartyRegistration (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledPartyRegistrationType >
    oadrCanceledPartyRegistration (const ::std::string& u,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledPartyRegistrationType > (
        ::oadr2b::oadr::oadrCanceledPartyRegistration (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledPartyRegistrationType >
    oadrCanceledPartyRegistration (const ::std::string& u,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledPartyRegistrationType > (
        ::oadr2b::oadr::oadrCanceledPartyRegistration (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledPartyRegistrationType >
    oadrCanceledPartyRegistration (::std::istream& is,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrCanceledPartyRegistration (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledPartyRegistrationType >
    oadrCanceledPartyRegistration (::std::istream& is,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrCanceledPartyRegistration (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledPartyRegistrationType >
    oadrCanceledPartyRegistration (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrCanceledPartyRegistration (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledPartyRegistrationType >
    oadrCanceledPartyRegistration (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrCanceledPartyRegistration (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledPartyRegistrationType >
    oadrCanceledPartyRegistration (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrCanceledPartyRegistration (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledPartyRegistrationType >
    oadrCanceledPartyRegistration (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrCanceledPartyRegistration (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledPartyRegistrationType >
    oadrCanceledPartyRegistration (::xercesc::InputSource& i,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledPartyRegistrationType > (
        ::oadr2b::oadr::oadrCanceledPartyRegistration (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledPartyRegistrationType >
    oadrCanceledPartyRegistration (::xercesc::InputSource& i,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledPartyRegistrationType > (
        ::oadr2b::oadr::oadrCanceledPartyRegistration (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledPartyRegistrationType >
    oadrCanceledPartyRegistration (::xercesc::InputSource& i,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledPartyRegistrationType > (
        ::oadr2b::oadr::oadrCanceledPartyRegistration (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledPartyRegistrationType >
    oadrCanceledPartyRegistration (const ::xercesc::DOMDocument& doc,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledPartyRegistrationType > (
          ::oadr2b::oadr::oadrCanceledPartyRegistration (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrCanceledPartyRegistration",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrCanceledPartyRegistrationType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledPartyRegistrationType > r (
          dynamic_cast< ::oadr2b::oadr::oadrCanceledPartyRegistrationType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrCanceledPartyRegistration",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledPartyRegistrationType >
    oadrCanceledPartyRegistration (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrCanceledPartyRegistration",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrCanceledPartyRegistrationType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::oadrCanceledPartyRegistrationType > r (
          dynamic_cast< ::oadr2b::oadr::oadrCanceledPartyRegistrationType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrCanceledPartyRegistration",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatePartyRegistrationType >
    oadrCreatePartyRegistration (const ::std::string& u,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreatePartyRegistrationType > (
        ::oadr2b::oadr::oadrCreatePartyRegistration (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatePartyRegistrationType >
    oadrCreatePartyRegistration (const ::std::string& u,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreatePartyRegistrationType > (
        ::oadr2b::oadr::oadrCreatePartyRegistration (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatePartyRegistrationType >
    oadrCreatePartyRegistration (const ::std::string& u,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreatePartyRegistrationType > (
        ::oadr2b::oadr::oadrCreatePartyRegistration (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatePartyRegistrationType >
    oadrCreatePartyRegistration (::std::istream& is,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrCreatePartyRegistration (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatePartyRegistrationType >
    oadrCreatePartyRegistration (::std::istream& is,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrCreatePartyRegistration (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatePartyRegistrationType >
    oadrCreatePartyRegistration (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrCreatePartyRegistration (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatePartyRegistrationType >
    oadrCreatePartyRegistration (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrCreatePartyRegistration (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatePartyRegistrationType >
    oadrCreatePartyRegistration (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrCreatePartyRegistration (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatePartyRegistrationType >
    oadrCreatePartyRegistration (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrCreatePartyRegistration (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatePartyRegistrationType >
    oadrCreatePartyRegistration (::xercesc::InputSource& i,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreatePartyRegistrationType > (
        ::oadr2b::oadr::oadrCreatePartyRegistration (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatePartyRegistrationType >
    oadrCreatePartyRegistration (::xercesc::InputSource& i,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreatePartyRegistrationType > (
        ::oadr2b::oadr::oadrCreatePartyRegistration (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatePartyRegistrationType >
    oadrCreatePartyRegistration (::xercesc::InputSource& i,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreatePartyRegistrationType > (
        ::oadr2b::oadr::oadrCreatePartyRegistration (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatePartyRegistrationType >
    oadrCreatePartyRegistration (const ::xercesc::DOMDocument& doc,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrCreatePartyRegistrationType > (
          ::oadr2b::oadr::oadrCreatePartyRegistration (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrCreatePartyRegistration",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrCreatePartyRegistrationType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrCreatePartyRegistrationType > r (
          dynamic_cast< ::oadr2b::oadr::oadrCreatePartyRegistrationType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrCreatePartyRegistration",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatePartyRegistrationType >
    oadrCreatePartyRegistration (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrCreatePartyRegistration",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrCreatePartyRegistrationType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::oadrCreatePartyRegistrationType > r (
          dynamic_cast< ::oadr2b::oadr::oadrCreatePartyRegistrationType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrCreatePartyRegistration",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedPartyRegistrationType >
    oadrCreatedPartyRegistration (const ::std::string& u,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedPartyRegistrationType > (
        ::oadr2b::oadr::oadrCreatedPartyRegistration (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedPartyRegistrationType >
    oadrCreatedPartyRegistration (const ::std::string& u,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedPartyRegistrationType > (
        ::oadr2b::oadr::oadrCreatedPartyRegistration (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedPartyRegistrationType >
    oadrCreatedPartyRegistration (const ::std::string& u,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedPartyRegistrationType > (
        ::oadr2b::oadr::oadrCreatedPartyRegistration (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedPartyRegistrationType >
    oadrCreatedPartyRegistration (::std::istream& is,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrCreatedPartyRegistration (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedPartyRegistrationType >
    oadrCreatedPartyRegistration (::std::istream& is,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrCreatedPartyRegistration (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedPartyRegistrationType >
    oadrCreatedPartyRegistration (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrCreatedPartyRegistration (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedPartyRegistrationType >
    oadrCreatedPartyRegistration (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrCreatedPartyRegistration (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedPartyRegistrationType >
    oadrCreatedPartyRegistration (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrCreatedPartyRegistration (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedPartyRegistrationType >
    oadrCreatedPartyRegistration (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrCreatedPartyRegistration (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedPartyRegistrationType >
    oadrCreatedPartyRegistration (::xercesc::InputSource& i,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedPartyRegistrationType > (
        ::oadr2b::oadr::oadrCreatedPartyRegistration (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedPartyRegistrationType >
    oadrCreatedPartyRegistration (::xercesc::InputSource& i,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedPartyRegistrationType > (
        ::oadr2b::oadr::oadrCreatedPartyRegistration (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedPartyRegistrationType >
    oadrCreatedPartyRegistration (::xercesc::InputSource& i,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedPartyRegistrationType > (
        ::oadr2b::oadr::oadrCreatedPartyRegistration (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedPartyRegistrationType >
    oadrCreatedPartyRegistration (const ::xercesc::DOMDocument& doc,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedPartyRegistrationType > (
          ::oadr2b::oadr::oadrCreatedPartyRegistration (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrCreatedPartyRegistration",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrCreatedPartyRegistrationType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedPartyRegistrationType > r (
          dynamic_cast< ::oadr2b::oadr::oadrCreatedPartyRegistrationType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrCreatedPartyRegistration",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedPartyRegistrationType >
    oadrCreatedPartyRegistration (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrCreatedPartyRegistration",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrCreatedPartyRegistrationType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::oadrCreatedPartyRegistrationType > r (
          dynamic_cast< ::oadr2b::oadr::oadrCreatedPartyRegistrationType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrCreatedPartyRegistration",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRequestReregistrationType >
    oadrRequestReregistration (const ::std::string& u,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrRequestReregistrationType > (
        ::oadr2b::oadr::oadrRequestReregistration (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRequestReregistrationType >
    oadrRequestReregistration (const ::std::string& u,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrRequestReregistrationType > (
        ::oadr2b::oadr::oadrRequestReregistration (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRequestReregistrationType >
    oadrRequestReregistration (const ::std::string& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrRequestReregistrationType > (
        ::oadr2b::oadr::oadrRequestReregistration (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRequestReregistrationType >
    oadrRequestReregistration (::std::istream& is,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrRequestReregistration (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRequestReregistrationType >
    oadrRequestReregistration (::std::istream& is,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrRequestReregistration (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRequestReregistrationType >
    oadrRequestReregistration (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrRequestReregistration (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRequestReregistrationType >
    oadrRequestReregistration (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrRequestReregistration (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRequestReregistrationType >
    oadrRequestReregistration (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrRequestReregistration (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRequestReregistrationType >
    oadrRequestReregistration (::std::istream& is,
                               const ::std::string& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrRequestReregistration (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRequestReregistrationType >
    oadrRequestReregistration (::xercesc::InputSource& i,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrRequestReregistrationType > (
        ::oadr2b::oadr::oadrRequestReregistration (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRequestReregistrationType >
    oadrRequestReregistration (::xercesc::InputSource& i,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrRequestReregistrationType > (
        ::oadr2b::oadr::oadrRequestReregistration (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRequestReregistrationType >
    oadrRequestReregistration (::xercesc::InputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrRequestReregistrationType > (
        ::oadr2b::oadr::oadrRequestReregistration (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRequestReregistrationType >
    oadrRequestReregistration (const ::xercesc::DOMDocument& doc,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrRequestReregistrationType > (
          ::oadr2b::oadr::oadrRequestReregistration (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrRequestReregistration",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrRequestReregistrationType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrRequestReregistrationType > r (
          dynamic_cast< ::oadr2b::oadr::oadrRequestReregistrationType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrRequestReregistration",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrRequestReregistrationType >
    oadrRequestReregistration (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrRequestReregistration",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrRequestReregistrationType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::oadrRequestReregistrationType > r (
          dynamic_cast< ::oadr2b::oadr::oadrRequestReregistrationType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrRequestReregistration",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrQueryRegistrationType >
    oadrQueryRegistration (const ::std::string& u,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrQueryRegistrationType > (
        ::oadr2b::oadr::oadrQueryRegistration (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrQueryRegistrationType >
    oadrQueryRegistration (const ::std::string& u,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrQueryRegistrationType > (
        ::oadr2b::oadr::oadrQueryRegistration (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrQueryRegistrationType >
    oadrQueryRegistration (const ::std::string& u,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrQueryRegistrationType > (
        ::oadr2b::oadr::oadrQueryRegistration (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrQueryRegistrationType >
    oadrQueryRegistration (::std::istream& is,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrQueryRegistration (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrQueryRegistrationType >
    oadrQueryRegistration (::std::istream& is,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrQueryRegistration (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrQueryRegistrationType >
    oadrQueryRegistration (::std::istream& is,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrQueryRegistration (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrQueryRegistrationType >
    oadrQueryRegistration (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrQueryRegistration (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrQueryRegistrationType >
    oadrQueryRegistration (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrQueryRegistration (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrQueryRegistrationType >
    oadrQueryRegistration (::std::istream& is,
                           const ::std::string& sid,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrQueryRegistration (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrQueryRegistrationType >
    oadrQueryRegistration (::xercesc::InputSource& i,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrQueryRegistrationType > (
        ::oadr2b::oadr::oadrQueryRegistration (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrQueryRegistrationType >
    oadrQueryRegistration (::xercesc::InputSource& i,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrQueryRegistrationType > (
        ::oadr2b::oadr::oadrQueryRegistration (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrQueryRegistrationType >
    oadrQueryRegistration (::xercesc::InputSource& i,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrQueryRegistrationType > (
        ::oadr2b::oadr::oadrQueryRegistration (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrQueryRegistrationType >
    oadrQueryRegistration (const ::xercesc::DOMDocument& doc,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrQueryRegistrationType > (
          ::oadr2b::oadr::oadrQueryRegistration (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrQueryRegistration",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrQueryRegistrationType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrQueryRegistrationType > r (
          dynamic_cast< ::oadr2b::oadr::oadrQueryRegistrationType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrQueryRegistration",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrQueryRegistrationType >
    oadrQueryRegistration (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrQueryRegistration",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrQueryRegistrationType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::oadrQueryRegistrationType > r (
          dynamic_cast< ::oadr2b::oadr::oadrQueryRegistrationType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrQueryRegistration",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPollType >
    oadrPoll (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrPollType > (
        ::oadr2b::oadr::oadrPoll (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPollType >
    oadrPoll (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrPollType > (
        ::oadr2b::oadr::oadrPoll (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPollType >
    oadrPoll (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrPollType > (
        ::oadr2b::oadr::oadrPoll (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPollType >
    oadrPoll (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrPoll (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPollType >
    oadrPoll (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrPoll (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPollType >
    oadrPoll (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrPoll (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPollType >
    oadrPoll (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrPoll (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPollType >
    oadrPoll (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrPoll (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPollType >
    oadrPoll (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrPoll (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPollType >
    oadrPoll (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrPollType > (
        ::oadr2b::oadr::oadrPoll (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPollType >
    oadrPoll (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrPollType > (
        ::oadr2b::oadr::oadrPoll (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPollType >
    oadrPoll (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrPollType > (
        ::oadr2b::oadr::oadrPoll (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPollType >
    oadrPoll (const ::xercesc::DOMDocument& doc,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrPollType > (
          ::oadr2b::oadr::oadrPoll (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrPoll",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrPollType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrPollType > r (
          dynamic_cast< ::oadr2b::oadr::oadrPollType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrPoll",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPollType >
    oadrPoll (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrPoll",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrPollType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::oadrPollType > r (
          dynamic_cast< ::oadr2b::oadr::oadrPollType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrPoll",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::xml_schema::string >
    oadrVenName (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xml_schema::string > (
        ::oadr2b::oadr::oadrVenName (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xml_schema::string >
    oadrVenName (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xml_schema::string > (
        ::oadr2b::oadr::oadrVenName (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xml_schema::string >
    oadrVenName (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xml_schema::string > (
        ::oadr2b::oadr::oadrVenName (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xml_schema::string >
    oadrVenName (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrVenName (isrc, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    oadrVenName (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrVenName (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    oadrVenName (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrVenName (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    oadrVenName (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrVenName (isrc, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    oadrVenName (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrVenName (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    oadrVenName (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrVenName (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    oadrVenName (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xml_schema::string > (
        ::oadr2b::oadr::oadrVenName (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xml_schema::string >
    oadrVenName (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xml_schema::string > (
        ::oadr2b::oadr::oadrVenName (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xml_schema::string >
    oadrVenName (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xml_schema::string > (
        ::oadr2b::oadr::oadrVenName (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xml_schema::string >
    oadrVenName (const ::xercesc::DOMDocument& doc,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xml_schema::string > (
          ::oadr2b::oadr::oadrVenName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrVenName",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::xml_schema::string >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::xml_schema::string > r (
          dynamic_cast< ::xml_schema::string* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrVenName",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::xml_schema::string >
    oadrVenName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrVenName",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::xml_schema::string >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::xml_schema::string > r (
          dynamic_cast< ::xml_schema::string* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrVenName",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrProfiles >
    oadrProfiles_ (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrProfiles > (
        ::oadr2b::oadr::oadrProfiles_ (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrProfiles >
    oadrProfiles_ (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrProfiles > (
        ::oadr2b::oadr::oadrProfiles_ (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrProfiles >
    oadrProfiles_ (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrProfiles > (
        ::oadr2b::oadr::oadrProfiles_ (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrProfiles >
    oadrProfiles_ (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrProfiles_ (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrProfiles >
    oadrProfiles_ (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrProfiles_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrProfiles >
    oadrProfiles_ (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrProfiles_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrProfiles >
    oadrProfiles_ (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrProfiles_ (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrProfiles >
    oadrProfiles_ (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrProfiles_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrProfiles >
    oadrProfiles_ (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrProfiles_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrProfiles >
    oadrProfiles_ (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrProfiles > (
        ::oadr2b::oadr::oadrProfiles_ (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrProfiles >
    oadrProfiles_ (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrProfiles > (
        ::oadr2b::oadr::oadrProfiles_ (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrProfiles >
    oadrProfiles_ (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrProfiles > (
        ::oadr2b::oadr::oadrProfiles_ (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrProfiles >
    oadrProfiles_ (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrProfiles > (
          ::oadr2b::oadr::oadrProfiles_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "oadrProfiles" &&
          n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrProfiles > r (
          ::xsd::cxx::tree::traits< ::oadr2b::oadr::oadrProfiles, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrProfiles",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrProfiles >
    oadrProfiles_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "oadrProfiles" &&
          n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrProfiles > r (
          ::xsd::cxx::tree::traits< ::oadr2b::oadr::oadrProfiles, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrProfiles",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrProfileType >
    oadrProfileName (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrProfileType > (
        ::oadr2b::oadr::oadrProfileName (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrProfileType >
    oadrProfileName (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrProfileType > (
        ::oadr2b::oadr::oadrProfileName (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrProfileType >
    oadrProfileName (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrProfileType > (
        ::oadr2b::oadr::oadrProfileName (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrProfileType >
    oadrProfileName (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrProfileName (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrProfileType >
    oadrProfileName (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrProfileName (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrProfileType >
    oadrProfileName (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrProfileName (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrProfileType >
    oadrProfileName (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrProfileName (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrProfileType >
    oadrProfileName (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrProfileName (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrProfileType >
    oadrProfileName (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrProfileName (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrProfileType >
    oadrProfileName (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrProfileType > (
        ::oadr2b::oadr::oadrProfileName (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrProfileType >
    oadrProfileName (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrProfileType > (
        ::oadr2b::oadr::oadrProfileName (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrProfileType >
    oadrProfileName (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrProfileType > (
        ::oadr2b::oadr::oadrProfileName (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrProfileType >
    oadrProfileName (const ::xercesc::DOMDocument& doc,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrProfileType > (
          ::oadr2b::oadr::oadrProfileName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrProfileName",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrProfileType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrProfileType > r (
          dynamic_cast< ::oadr2b::oadr::oadrProfileType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrProfileName",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrProfileType >
    oadrProfileName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrProfileName",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrProfileType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::oadrProfileType > r (
          dynamic_cast< ::oadr2b::oadr::oadrProfileType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrProfileName",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrTransports >
    oadrTransports_ (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrTransports > (
        ::oadr2b::oadr::oadrTransports_ (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrTransports >
    oadrTransports_ (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrTransports > (
        ::oadr2b::oadr::oadrTransports_ (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrTransports >
    oadrTransports_ (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrTransports > (
        ::oadr2b::oadr::oadrTransports_ (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrTransports >
    oadrTransports_ (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrTransports_ (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrTransports >
    oadrTransports_ (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrTransports_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrTransports >
    oadrTransports_ (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrTransports_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrTransports >
    oadrTransports_ (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrTransports_ (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrTransports >
    oadrTransports_ (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrTransports_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrTransports >
    oadrTransports_ (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrTransports_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrTransports >
    oadrTransports_ (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrTransports > (
        ::oadr2b::oadr::oadrTransports_ (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrTransports >
    oadrTransports_ (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrTransports > (
        ::oadr2b::oadr::oadrTransports_ (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrTransports >
    oadrTransports_ (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrTransports > (
        ::oadr2b::oadr::oadrTransports_ (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrTransports >
    oadrTransports_ (const ::xercesc::DOMDocument& doc,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrTransports > (
          ::oadr2b::oadr::oadrTransports_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "oadrTransports" &&
          n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrTransports > r (
          ::xsd::cxx::tree::traits< ::oadr2b::oadr::oadrTransports, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrTransports",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrTransports >
    oadrTransports_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "oadrTransports" &&
          n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrTransports > r (
          ::xsd::cxx::tree::traits< ::oadr2b::oadr::oadrTransports, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrTransports",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrTransportType >
    oadrTransportName (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrTransportType > (
        ::oadr2b::oadr::oadrTransportName (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrTransportType >
    oadrTransportName (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrTransportType > (
        ::oadr2b::oadr::oadrTransportName (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrTransportType >
    oadrTransportName (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrTransportType > (
        ::oadr2b::oadr::oadrTransportName (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrTransportType >
    oadrTransportName (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrTransportName (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrTransportType >
    oadrTransportName (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrTransportName (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrTransportType >
    oadrTransportName (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrTransportName (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrTransportType >
    oadrTransportName (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrTransportName (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrTransportType >
    oadrTransportName (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrTransportName (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrTransportType >
    oadrTransportName (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrTransportName (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrTransportType >
    oadrTransportName (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrTransportType > (
        ::oadr2b::oadr::oadrTransportName (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrTransportType >
    oadrTransportName (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrTransportType > (
        ::oadr2b::oadr::oadrTransportName (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrTransportType >
    oadrTransportName (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrTransportType > (
        ::oadr2b::oadr::oadrTransportName (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrTransportType >
    oadrTransportName (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrTransportType > (
          ::oadr2b::oadr::oadrTransportName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrTransportName",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrTransportType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrTransportType > r (
          dynamic_cast< ::oadr2b::oadr::oadrTransportType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrTransportName",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrTransportType >
    oadrTransportName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrTransportName",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrTransportType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::oadrTransportType > r (
          dynamic_cast< ::oadr2b::oadr::oadrTransportType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrTransportName",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrHttpPullModel (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xml_schema::boolean > (
        ::oadr2b::oadr::oadrHttpPullModel (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrHttpPullModel (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xml_schema::boolean > (
        ::oadr2b::oadr::oadrHttpPullModel (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrHttpPullModel (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xml_schema::boolean > (
        ::oadr2b::oadr::oadrHttpPullModel (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrHttpPullModel (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrHttpPullModel (isrc, f, p);
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrHttpPullModel (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrHttpPullModel (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrHttpPullModel (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrHttpPullModel (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrHttpPullModel (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrHttpPullModel (isrc, f, p);
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrHttpPullModel (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrHttpPullModel (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrHttpPullModel (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrHttpPullModel (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrHttpPullModel (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xml_schema::boolean > (
        ::oadr2b::oadr::oadrHttpPullModel (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrHttpPullModel (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xml_schema::boolean > (
        ::oadr2b::oadr::oadrHttpPullModel (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrHttpPullModel (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xml_schema::boolean > (
        ::oadr2b::oadr::oadrHttpPullModel (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrHttpPullModel (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::oadr2b::oadr::oadrHttpPullModel (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "oadrHttpPullModel" &&
          n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
      {
        ::std::auto_ptr< ::xml_schema::boolean > r (
          new ::xml_schema::boolean (
            ::xsd::cxx::tree::traits< ::xml_schema::boolean, char >::create (
              e, f, 0)));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrHttpPullModel",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrHttpPullModel (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "oadrHttpPullModel" &&
          n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
      {
        ::std::auto_ptr< ::xml_schema::boolean > r (
          new ::xml_schema::boolean (
            ::xsd::cxx::tree::traits< ::xml_schema::boolean, char >::create (
              e, f, 0)));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrHttpPullModel",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrServiceSpecificInfo >
    oadrServiceSpecificInfo_ (const ::std::string& u,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrServiceSpecificInfo > (
        ::oadr2b::oadr::oadrServiceSpecificInfo_ (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrServiceSpecificInfo >
    oadrServiceSpecificInfo_ (const ::std::string& u,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrServiceSpecificInfo > (
        ::oadr2b::oadr::oadrServiceSpecificInfo_ (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrServiceSpecificInfo >
    oadrServiceSpecificInfo_ (const ::std::string& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrServiceSpecificInfo > (
        ::oadr2b::oadr::oadrServiceSpecificInfo_ (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrServiceSpecificInfo >
    oadrServiceSpecificInfo_ (::std::istream& is,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrServiceSpecificInfo_ (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrServiceSpecificInfo >
    oadrServiceSpecificInfo_ (::std::istream& is,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrServiceSpecificInfo_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrServiceSpecificInfo >
    oadrServiceSpecificInfo_ (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrServiceSpecificInfo_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrServiceSpecificInfo >
    oadrServiceSpecificInfo_ (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrServiceSpecificInfo_ (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrServiceSpecificInfo >
    oadrServiceSpecificInfo_ (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrServiceSpecificInfo_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrServiceSpecificInfo >
    oadrServiceSpecificInfo_ (::std::istream& is,
                              const ::std::string& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrServiceSpecificInfo_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrServiceSpecificInfo >
    oadrServiceSpecificInfo_ (::xercesc::InputSource& i,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrServiceSpecificInfo > (
        ::oadr2b::oadr::oadrServiceSpecificInfo_ (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrServiceSpecificInfo >
    oadrServiceSpecificInfo_ (::xercesc::InputSource& i,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrServiceSpecificInfo > (
        ::oadr2b::oadr::oadrServiceSpecificInfo_ (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrServiceSpecificInfo >
    oadrServiceSpecificInfo_ (::xercesc::InputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrServiceSpecificInfo > (
        ::oadr2b::oadr::oadrServiceSpecificInfo_ (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrServiceSpecificInfo >
    oadrServiceSpecificInfo_ (const ::xercesc::DOMDocument& doc,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrServiceSpecificInfo > (
          ::oadr2b::oadr::oadrServiceSpecificInfo_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "oadrServiceSpecificInfo" &&
          n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrServiceSpecificInfo > r (
          ::xsd::cxx::tree::traits< ::oadr2b::oadr::oadrServiceSpecificInfo, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrServiceSpecificInfo",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrServiceSpecificInfo >
    oadrServiceSpecificInfo_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "oadrServiceSpecificInfo" &&
          n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrServiceSpecificInfo > r (
          ::xsd::cxx::tree::traits< ::oadr2b::oadr::oadrServiceSpecificInfo, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrServiceSpecificInfo",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrServiceNameType >
    oadrServiceName (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrServiceNameType > (
        ::oadr2b::oadr::oadrServiceName (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrServiceNameType >
    oadrServiceName (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrServiceNameType > (
        ::oadr2b::oadr::oadrServiceName (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrServiceNameType >
    oadrServiceName (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrServiceNameType > (
        ::oadr2b::oadr::oadrServiceName (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrServiceNameType >
    oadrServiceName (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrServiceName (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrServiceNameType >
    oadrServiceName (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrServiceName (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrServiceNameType >
    oadrServiceName (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrServiceName (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrServiceNameType >
    oadrServiceName (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrServiceName (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrServiceNameType >
    oadrServiceName (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrServiceName (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrServiceNameType >
    oadrServiceName (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrServiceName (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrServiceNameType >
    oadrServiceName (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrServiceNameType > (
        ::oadr2b::oadr::oadrServiceName (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrServiceNameType >
    oadrServiceName (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrServiceNameType > (
        ::oadr2b::oadr::oadrServiceName (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrServiceNameType >
    oadrServiceName (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrServiceNameType > (
        ::oadr2b::oadr::oadrServiceName (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrServiceNameType >
    oadrServiceName (const ::xercesc::DOMDocument& doc,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrServiceNameType > (
          ::oadr2b::oadr::oadrServiceName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrServiceName",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrServiceNameType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrServiceNameType > r (
          dynamic_cast< ::oadr2b::oadr::oadrServiceNameType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrServiceName",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrServiceNameType >
    oadrServiceName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrServiceName",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrServiceNameType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::oadrServiceNameType > r (
          dynamic_cast< ::oadr2b::oadr::oadrServiceNameType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrServiceName",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrInfo >
    oadrInfo_ (const ::std::string& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrInfo > (
        ::oadr2b::oadr::oadrInfo_ (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrInfo >
    oadrInfo_ (const ::std::string& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrInfo > (
        ::oadr2b::oadr::oadrInfo_ (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrInfo >
    oadrInfo_ (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrInfo > (
        ::oadr2b::oadr::oadrInfo_ (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrInfo >
    oadrInfo_ (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrInfo_ (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrInfo >
    oadrInfo_ (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrInfo_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrInfo >
    oadrInfo_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrInfo_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrInfo >
    oadrInfo_ (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrInfo_ (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrInfo >
    oadrInfo_ (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrInfo_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrInfo >
    oadrInfo_ (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrInfo_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrInfo >
    oadrInfo_ (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrInfo > (
        ::oadr2b::oadr::oadrInfo_ (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrInfo >
    oadrInfo_ (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrInfo > (
        ::oadr2b::oadr::oadrInfo_ (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrInfo >
    oadrInfo_ (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrInfo > (
        ::oadr2b::oadr::oadrInfo_ (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrInfo >
    oadrInfo_ (const ::xercesc::DOMDocument& doc,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrInfo > (
          ::oadr2b::oadr::oadrInfo_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "oadrInfo" &&
          n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrInfo > r (
          ::xsd::cxx::tree::traits< ::oadr2b::oadr::oadrInfo, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrInfo",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrInfo >
    oadrInfo_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "oadrInfo" &&
          n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrInfo > r (
          ::xsd::cxx::tree::traits< ::oadr2b::oadr::oadrInfo, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrInfo",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrXmlSignature (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xml_schema::boolean > (
        ::oadr2b::oadr::oadrXmlSignature (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrXmlSignature (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xml_schema::boolean > (
        ::oadr2b::oadr::oadrXmlSignature (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrXmlSignature (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xml_schema::boolean > (
        ::oadr2b::oadr::oadrXmlSignature (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrXmlSignature (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrXmlSignature (isrc, f, p);
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrXmlSignature (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrXmlSignature (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrXmlSignature (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrXmlSignature (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrXmlSignature (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrXmlSignature (isrc, f, p);
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrXmlSignature (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrXmlSignature (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrXmlSignature (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrXmlSignature (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrXmlSignature (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xml_schema::boolean > (
        ::oadr2b::oadr::oadrXmlSignature (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrXmlSignature (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xml_schema::boolean > (
        ::oadr2b::oadr::oadrXmlSignature (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrXmlSignature (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xml_schema::boolean > (
        ::oadr2b::oadr::oadrXmlSignature (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrXmlSignature (const ::xercesc::DOMDocument& doc,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::oadr2b::oadr::oadrXmlSignature (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "oadrXmlSignature" &&
          n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
      {
        ::std::auto_ptr< ::xml_schema::boolean > r (
          new ::xml_schema::boolean (
            ::xsd::cxx::tree::traits< ::xml_schema::boolean, char >::create (
              e, f, 0)));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrXmlSignature",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrXmlSignature (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "oadrXmlSignature" &&
          n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
      {
        ::std::auto_ptr< ::xml_schema::boolean > r (
          new ::xml_schema::boolean (
            ::xsd::cxx::tree::traits< ::xml_schema::boolean, char >::create (
              e, f, 0)));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrXmlSignature",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrReportOnly (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xml_schema::boolean > (
        ::oadr2b::oadr::oadrReportOnly (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrReportOnly (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xml_schema::boolean > (
        ::oadr2b::oadr::oadrReportOnly (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrReportOnly (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xml_schema::boolean > (
        ::oadr2b::oadr::oadrReportOnly (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrReportOnly (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrReportOnly (isrc, f, p);
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrReportOnly (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrReportOnly (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrReportOnly (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrReportOnly (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrReportOnly (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrReportOnly (isrc, f, p);
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrReportOnly (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrReportOnly (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrReportOnly (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrReportOnly (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrReportOnly (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xml_schema::boolean > (
        ::oadr2b::oadr::oadrReportOnly (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrReportOnly (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xml_schema::boolean > (
        ::oadr2b::oadr::oadrReportOnly (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrReportOnly (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xml_schema::boolean > (
        ::oadr2b::oadr::oadrReportOnly (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrReportOnly (const ::xercesc::DOMDocument& doc,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::oadr2b::oadr::oadrReportOnly (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "oadrReportOnly" &&
          n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
      {
        ::std::auto_ptr< ::xml_schema::boolean > r (
          new ::xml_schema::boolean (
            ::xsd::cxx::tree::traits< ::xml_schema::boolean, char >::create (
              e, f, 0)));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrReportOnly",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::xml_schema::boolean >
    oadrReportOnly (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "oadrReportOnly" &&
          n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
      {
        ::std::auto_ptr< ::xml_schema::boolean > r (
          new ::xml_schema::boolean (
            ::xsd::cxx::tree::traits< ::xml_schema::boolean, char >::create (
              e, f, 0)));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrReportOnly",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::xml_schema::string >
    oadrTransportAddress (const ::std::string& u,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xml_schema::string > (
        ::oadr2b::oadr::oadrTransportAddress (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xml_schema::string >
    oadrTransportAddress (const ::std::string& u,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xml_schema::string > (
        ::oadr2b::oadr::oadrTransportAddress (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xml_schema::string >
    oadrTransportAddress (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xml_schema::string > (
        ::oadr2b::oadr::oadrTransportAddress (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xml_schema::string >
    oadrTransportAddress (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrTransportAddress (isrc, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    oadrTransportAddress (::std::istream& is,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrTransportAddress (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    oadrTransportAddress (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrTransportAddress (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    oadrTransportAddress (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrTransportAddress (isrc, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    oadrTransportAddress (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrTransportAddress (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    oadrTransportAddress (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrTransportAddress (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    oadrTransportAddress (::xercesc::InputSource& i,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xml_schema::string > (
        ::oadr2b::oadr::oadrTransportAddress (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xml_schema::string >
    oadrTransportAddress (::xercesc::InputSource& i,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xml_schema::string > (
        ::oadr2b::oadr::oadrTransportAddress (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xml_schema::string >
    oadrTransportAddress (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xml_schema::string > (
        ::oadr2b::oadr::oadrTransportAddress (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xml_schema::string >
    oadrTransportAddress (const ::xercesc::DOMDocument& doc,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xml_schema::string > (
          ::oadr2b::oadr::oadrTransportAddress (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrTransportAddress",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::xml_schema::string >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::xml_schema::string > r (
          dynamic_cast< ::xml_schema::string* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrTransportAddress",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::xml_schema::string >
    oadrTransportAddress (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrTransportAddress",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::xml_schema::string >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::xml_schema::string > r (
          dynamic_cast< ::xml_schema::string* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrTransportAddress",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::icalendar_2_0::DurationPropType >
    oadrRequestedOadrPollFreq (const ::std::string& u,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::icalendar_2_0::DurationPropType > (
        ::oadr2b::oadr::oadrRequestedOadrPollFreq (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::icalendar_2_0::DurationPropType >
    oadrRequestedOadrPollFreq (const ::std::string& u,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::icalendar_2_0::DurationPropType > (
        ::oadr2b::oadr::oadrRequestedOadrPollFreq (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::icalendar_2_0::DurationPropType >
    oadrRequestedOadrPollFreq (const ::std::string& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::icalendar_2_0::DurationPropType > (
        ::oadr2b::oadr::oadrRequestedOadrPollFreq (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::icalendar_2_0::DurationPropType >
    oadrRequestedOadrPollFreq (::std::istream& is,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrRequestedOadrPollFreq (isrc, f, p);
    }

    ::std::auto_ptr< ::icalendar_2_0::DurationPropType >
    oadrRequestedOadrPollFreq (::std::istream& is,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrRequestedOadrPollFreq (isrc, h, f, p);
    }

    ::std::auto_ptr< ::icalendar_2_0::DurationPropType >
    oadrRequestedOadrPollFreq (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrRequestedOadrPollFreq (isrc, h, f, p);
    }

    ::std::auto_ptr< ::icalendar_2_0::DurationPropType >
    oadrRequestedOadrPollFreq (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrRequestedOadrPollFreq (isrc, f, p);
    }

    ::std::auto_ptr< ::icalendar_2_0::DurationPropType >
    oadrRequestedOadrPollFreq (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrRequestedOadrPollFreq (isrc, h, f, p);
    }

    ::std::auto_ptr< ::icalendar_2_0::DurationPropType >
    oadrRequestedOadrPollFreq (::std::istream& is,
                               const ::std::string& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrRequestedOadrPollFreq (isrc, h, f, p);
    }

    ::std::auto_ptr< ::icalendar_2_0::DurationPropType >
    oadrRequestedOadrPollFreq (::xercesc::InputSource& i,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::icalendar_2_0::DurationPropType > (
        ::oadr2b::oadr::oadrRequestedOadrPollFreq (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::icalendar_2_0::DurationPropType >
    oadrRequestedOadrPollFreq (::xercesc::InputSource& i,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::icalendar_2_0::DurationPropType > (
        ::oadr2b::oadr::oadrRequestedOadrPollFreq (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::icalendar_2_0::DurationPropType >
    oadrRequestedOadrPollFreq (::xercesc::InputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::icalendar_2_0::DurationPropType > (
        ::oadr2b::oadr::oadrRequestedOadrPollFreq (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::icalendar_2_0::DurationPropType >
    oadrRequestedOadrPollFreq (const ::xercesc::DOMDocument& doc,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::icalendar_2_0::DurationPropType > (
          ::oadr2b::oadr::oadrRequestedOadrPollFreq (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrRequestedOadrPollFreq",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::icalendar_2_0::DurationPropType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::icalendar_2_0::DurationPropType > r (
          dynamic_cast< ::icalendar_2_0::DurationPropType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrRequestedOadrPollFreq",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::icalendar_2_0::DurationPropType >
    oadrRequestedOadrPollFreq (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrRequestedOadrPollFreq",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::icalendar_2_0::DurationPropType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::icalendar_2_0::DurationPropType > r (
          dynamic_cast< ::icalendar_2_0::DurationPropType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrRequestedOadrPollFreq",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::ResponseRequiredType >
    oadrResponseRequired (const ::std::string& u,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::ResponseRequiredType > (
        ::oadr2b::oadr::oadrResponseRequired (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::ResponseRequiredType >
    oadrResponseRequired (const ::std::string& u,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::ResponseRequiredType > (
        ::oadr2b::oadr::oadrResponseRequired (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::ResponseRequiredType >
    oadrResponseRequired (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::ResponseRequiredType > (
        ::oadr2b::oadr::oadrResponseRequired (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::ResponseRequiredType >
    oadrResponseRequired (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrResponseRequired (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::ResponseRequiredType >
    oadrResponseRequired (::std::istream& is,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrResponseRequired (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::ResponseRequiredType >
    oadrResponseRequired (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrResponseRequired (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::ResponseRequiredType >
    oadrResponseRequired (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrResponseRequired (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::ResponseRequiredType >
    oadrResponseRequired (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrResponseRequired (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::ResponseRequiredType >
    oadrResponseRequired (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrResponseRequired (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::ResponseRequiredType >
    oadrResponseRequired (::xercesc::InputSource& i,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::ResponseRequiredType > (
        ::oadr2b::oadr::oadrResponseRequired (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::ResponseRequiredType >
    oadrResponseRequired (::xercesc::InputSource& i,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::ResponseRequiredType > (
        ::oadr2b::oadr::oadrResponseRequired (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::ResponseRequiredType >
    oadrResponseRequired (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::ResponseRequiredType > (
        ::oadr2b::oadr::oadrResponseRequired (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::ResponseRequiredType >
    oadrResponseRequired (const ::xercesc::DOMDocument& doc,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::ResponseRequiredType > (
          ::oadr2b::oadr::oadrResponseRequired (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrResponseRequired",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::ResponseRequiredType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::ResponseRequiredType > r (
          dynamic_cast< ::oadr2b::oadr::ResponseRequiredType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrResponseRequired",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::ResponseRequiredType >
    oadrResponseRequired (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrResponseRequired",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::ResponseRequiredType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::ResponseRequiredType > r (
          dynamic_cast< ::oadr2b::oadr::ResponseRequiredType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrResponseRequired",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPendingReportsType >
    oadrPendingReports (const ::std::string& u,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrPendingReportsType > (
        ::oadr2b::oadr::oadrPendingReports (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPendingReportsType >
    oadrPendingReports (const ::std::string& u,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrPendingReportsType > (
        ::oadr2b::oadr::oadrPendingReports (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPendingReportsType >
    oadrPendingReports (const ::std::string& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrPendingReportsType > (
        ::oadr2b::oadr::oadrPendingReports (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPendingReportsType >
    oadrPendingReports (::std::istream& is,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrPendingReports (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPendingReportsType >
    oadrPendingReports (::std::istream& is,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrPendingReports (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPendingReportsType >
    oadrPendingReports (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrPendingReports (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPendingReportsType >
    oadrPendingReports (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrPendingReports (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPendingReportsType >
    oadrPendingReports (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrPendingReports (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPendingReportsType >
    oadrPendingReports (::std::istream& is,
                        const ::std::string& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrPendingReports (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPendingReportsType >
    oadrPendingReports (::xercesc::InputSource& i,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrPendingReportsType > (
        ::oadr2b::oadr::oadrPendingReports (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPendingReportsType >
    oadrPendingReports (::xercesc::InputSource& i,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrPendingReportsType > (
        ::oadr2b::oadr::oadrPendingReports (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPendingReportsType >
    oadrPendingReports (::xercesc::InputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrPendingReportsType > (
        ::oadr2b::oadr::oadrPendingReports (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPendingReportsType >
    oadrPendingReports (const ::xercesc::DOMDocument& doc,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrPendingReportsType > (
          ::oadr2b::oadr::oadrPendingReports (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrPendingReports",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrPendingReportsType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrPendingReportsType > r (
          dynamic_cast< ::oadr2b::oadr::oadrPendingReportsType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrPendingReports",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPendingReportsType >
    oadrPendingReports (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrPendingReports",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrPendingReportsType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::oadrPendingReportsType > r (
          dynamic_cast< ::oadr2b::oadr::oadrPendingReportsType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrPendingReports",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::BaseUnitType >
    customUnit (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::BaseUnitType > (
        ::oadr2b::oadr::customUnit (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::BaseUnitType >
    customUnit (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::BaseUnitType > (
        ::oadr2b::oadr::customUnit (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::BaseUnitType >
    customUnit (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::BaseUnitType > (
        ::oadr2b::oadr::customUnit (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::BaseUnitType >
    customUnit (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::customUnit (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::BaseUnitType >
    customUnit (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::customUnit (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::BaseUnitType >
    customUnit (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::customUnit (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::BaseUnitType >
    customUnit (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::customUnit (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::BaseUnitType >
    customUnit (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::customUnit (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::BaseUnitType >
    customUnit (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::customUnit (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::BaseUnitType >
    customUnit (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::BaseUnitType > (
        ::oadr2b::oadr::customUnit (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::BaseUnitType >
    customUnit (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::BaseUnitType > (
        ::oadr2b::oadr::customUnit (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::BaseUnitType >
    customUnit (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::BaseUnitType > (
        ::oadr2b::oadr::customUnit (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::BaseUnitType >
    customUnit (const ::xercesc::DOMDocument& doc,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::BaseUnitType > (
          ::oadr2b::oadr::customUnit (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "customUnit",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::BaseUnitType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::BaseUnitType > r (
          dynamic_cast< ::oadr2b::oadr::BaseUnitType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "customUnit",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::BaseUnitType >
    customUnit (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "customUnit",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::BaseUnitType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::BaseUnitType > r (
          dynamic_cast< ::oadr2b::oadr::BaseUnitType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "customUnit",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::CurrentType >
    current (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::CurrentType > (
        ::oadr2b::oadr::current (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::CurrentType >
    current (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::CurrentType > (
        ::oadr2b::oadr::current (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::CurrentType >
    current (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::CurrentType > (
        ::oadr2b::oadr::current (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::CurrentType >
    current (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::current (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::CurrentType >
    current (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::current (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::CurrentType >
    current (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::current (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::CurrentType >
    current (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::current (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::CurrentType >
    current (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::current (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::CurrentType >
    current (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::current (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::CurrentType >
    current (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::CurrentType > (
        ::oadr2b::oadr::current (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::CurrentType >
    current (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::CurrentType > (
        ::oadr2b::oadr::current (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::CurrentType >
    current (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::CurrentType > (
        ::oadr2b::oadr::current (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::CurrentType >
    current (const ::xercesc::DOMDocument& doc,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::CurrentType > (
          ::oadr2b::oadr::current (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "current",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::CurrentType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::CurrentType > r (
          dynamic_cast< ::oadr2b::oadr::CurrentType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "current",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::CurrentType >
    current (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "current",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::CurrentType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::CurrentType > r (
          dynamic_cast< ::oadr2b::oadr::CurrentType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "current",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currency (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::currencyType > (
        ::oadr2b::oadr::currency (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currency (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::currencyType > (
        ::oadr2b::oadr::currency (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currency (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::currencyType > (
        ::oadr2b::oadr::currency (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currency (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::currency (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currency (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::currency (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currency (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::currency (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currency (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::currency (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currency (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::currency (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currency (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::currency (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currency (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::currencyType > (
        ::oadr2b::oadr::currency (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currency (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::currencyType > (
        ::oadr2b::oadr::currency (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currency (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::currencyType > (
        ::oadr2b::oadr::currency (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currency (const ::xercesc::DOMDocument& doc,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::currencyType > (
          ::oadr2b::oadr::currency (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "currency",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::currencyType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::currencyType > r (
          dynamic_cast< ::oadr2b::oadr::currencyType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "currency",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currency (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "currency",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::currencyType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::currencyType > r (
          dynamic_cast< ::oadr2b::oadr::currencyType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "currency",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerKWh (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::currencyType > (
        ::oadr2b::oadr::currencyPerKWh (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerKWh (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::currencyType > (
        ::oadr2b::oadr::currencyPerKWh (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerKWh (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::currencyType > (
        ::oadr2b::oadr::currencyPerKWh (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerKWh (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::currencyPerKWh (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerKWh (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::currencyPerKWh (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerKWh (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::currencyPerKWh (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerKWh (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::currencyPerKWh (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerKWh (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::currencyPerKWh (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerKWh (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::currencyPerKWh (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerKWh (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::currencyType > (
        ::oadr2b::oadr::currencyPerKWh (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerKWh (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::currencyType > (
        ::oadr2b::oadr::currencyPerKWh (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerKWh (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::currencyType > (
        ::oadr2b::oadr::currencyPerKWh (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerKWh (const ::xercesc::DOMDocument& doc,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::currencyType > (
          ::oadr2b::oadr::currencyPerKWh (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "currencyPerKWh",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::currencyType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::currencyType > r (
          dynamic_cast< ::oadr2b::oadr::currencyType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "currencyPerKWh",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerKWh (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "currencyPerKWh",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::currencyType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::currencyType > r (
          dynamic_cast< ::oadr2b::oadr::currencyType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "currencyPerKWh",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerKW (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::currencyType > (
        ::oadr2b::oadr::currencyPerKW (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerKW (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::currencyType > (
        ::oadr2b::oadr::currencyPerKW (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerKW (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::currencyType > (
        ::oadr2b::oadr::currencyPerKW (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerKW (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::currencyPerKW (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerKW (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::currencyPerKW (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerKW (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::currencyPerKW (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerKW (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::currencyPerKW (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerKW (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::currencyPerKW (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerKW (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::currencyPerKW (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerKW (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::currencyType > (
        ::oadr2b::oadr::currencyPerKW (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerKW (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::currencyType > (
        ::oadr2b::oadr::currencyPerKW (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerKW (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::currencyType > (
        ::oadr2b::oadr::currencyPerKW (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerKW (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::currencyType > (
          ::oadr2b::oadr::currencyPerKW (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "currencyPerKW",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::currencyType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::currencyType > r (
          dynamic_cast< ::oadr2b::oadr::currencyType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "currencyPerKW",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerKW (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "currencyPerKW",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::currencyType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::currencyType > r (
          dynamic_cast< ::oadr2b::oadr::currencyType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "currencyPerKW",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerThm (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::currencyType > (
        ::oadr2b::oadr::currencyPerThm (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerThm (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::currencyType > (
        ::oadr2b::oadr::currencyPerThm (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerThm (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::currencyType > (
        ::oadr2b::oadr::currencyPerThm (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerThm (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::currencyPerThm (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerThm (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::currencyPerThm (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerThm (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::currencyPerThm (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerThm (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::currencyPerThm (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerThm (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::currencyPerThm (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerThm (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::currencyPerThm (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerThm (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::currencyType > (
        ::oadr2b::oadr::currencyPerThm (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerThm (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::currencyType > (
        ::oadr2b::oadr::currencyPerThm (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerThm (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::currencyType > (
        ::oadr2b::oadr::currencyPerThm (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerThm (const ::xercesc::DOMDocument& doc,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::currencyType > (
          ::oadr2b::oadr::currencyPerThm (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "currencyPerThm",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::currencyType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::currencyType > r (
          dynamic_cast< ::oadr2b::oadr::currencyType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "currencyPerThm",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::currencyType >
    currencyPerThm (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "currencyPerThm",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::currencyType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::currencyType > r (
          dynamic_cast< ::oadr2b::oadr::currencyType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "currencyPerThm",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::FrequencyType >
    frequency (const ::std::string& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::FrequencyType > (
        ::oadr2b::oadr::frequency (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::FrequencyType >
    frequency (const ::std::string& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::FrequencyType > (
        ::oadr2b::oadr::frequency (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::FrequencyType >
    frequency (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::FrequencyType > (
        ::oadr2b::oadr::frequency (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::FrequencyType >
    frequency (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::frequency (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::FrequencyType >
    frequency (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::frequency (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::FrequencyType >
    frequency (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::frequency (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::FrequencyType >
    frequency (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::frequency (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::FrequencyType >
    frequency (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::frequency (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::FrequencyType >
    frequency (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::frequency (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::FrequencyType >
    frequency (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::FrequencyType > (
        ::oadr2b::oadr::frequency (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::FrequencyType >
    frequency (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::FrequencyType > (
        ::oadr2b::oadr::frequency (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::FrequencyType >
    frequency (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::FrequencyType > (
        ::oadr2b::oadr::frequency (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::FrequencyType >
    frequency (const ::xercesc::DOMDocument& doc,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::FrequencyType > (
          ::oadr2b::oadr::frequency (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "frequency",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::FrequencyType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::FrequencyType > r (
          dynamic_cast< ::oadr2b::oadr::FrequencyType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "frequency",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::FrequencyType >
    frequency (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "frequency",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::FrequencyType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::FrequencyType > r (
          dynamic_cast< ::oadr2b::oadr::FrequencyType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "frequency",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::ThermType >
    Therm (const ::std::string& u,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::ThermType > (
        ::oadr2b::oadr::Therm (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::ThermType >
    Therm (const ::std::string& u,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::ThermType > (
        ::oadr2b::oadr::Therm (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::ThermType >
    Therm (const ::std::string& u,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::ThermType > (
        ::oadr2b::oadr::Therm (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::ThermType >
    Therm (::std::istream& is,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::Therm (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::ThermType >
    Therm (::std::istream& is,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::Therm (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::ThermType >
    Therm (::std::istream& is,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::Therm (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::ThermType >
    Therm (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::Therm (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::ThermType >
    Therm (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::Therm (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::ThermType >
    Therm (::std::istream& is,
           const ::std::string& sid,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::Therm (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::ThermType >
    Therm (::xercesc::InputSource& i,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::ThermType > (
        ::oadr2b::oadr::Therm (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::ThermType >
    Therm (::xercesc::InputSource& i,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::ThermType > (
        ::oadr2b::oadr::Therm (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::ThermType >
    Therm (::xercesc::InputSource& i,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::ThermType > (
        ::oadr2b::oadr::Therm (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::ThermType >
    Therm (const ::xercesc::DOMDocument& doc,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::ThermType > (
          ::oadr2b::oadr::Therm (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Therm",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::ThermType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::ThermType > r (
          dynamic_cast< ::oadr2b::oadr::ThermType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Therm",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::ThermType >
    Therm (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
           ::xml_schema::flags f,
           const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "Therm",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::ThermType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::ThermType > r (
          dynamic_cast< ::oadr2b::oadr::ThermType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Therm",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::temperatureType >
    temperature (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::temperatureType > (
        ::oadr2b::oadr::temperature (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::temperatureType >
    temperature (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::temperatureType > (
        ::oadr2b::oadr::temperature (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::temperatureType >
    temperature (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::temperatureType > (
        ::oadr2b::oadr::temperature (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::temperatureType >
    temperature (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::temperature (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::temperatureType >
    temperature (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::temperature (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::temperatureType >
    temperature (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::temperature (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::temperatureType >
    temperature (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::temperature (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::temperatureType >
    temperature (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::temperature (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::temperatureType >
    temperature (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::temperature (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::temperatureType >
    temperature (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::temperatureType > (
        ::oadr2b::oadr::temperature (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::temperatureType >
    temperature (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::temperatureType > (
        ::oadr2b::oadr::temperature (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::temperatureType >
    temperature (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::temperatureType > (
        ::oadr2b::oadr::temperature (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::temperatureType >
    temperature (const ::xercesc::DOMDocument& doc,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::temperatureType > (
          ::oadr2b::oadr::temperature (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "temperature",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::temperatureType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::temperatureType > r (
          dynamic_cast< ::oadr2b::oadr::temperatureType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "temperature",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::temperatureType >
    temperature (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "temperature",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::temperatureType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::temperatureType > r (
          dynamic_cast< ::oadr2b::oadr::temperatureType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "temperature",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::pulseCountType >
    pulseCount (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::pulseCountType > (
        ::oadr2b::oadr::pulseCount (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::pulseCountType >
    pulseCount (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::pulseCountType > (
        ::oadr2b::oadr::pulseCount (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::pulseCountType >
    pulseCount (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::pulseCountType > (
        ::oadr2b::oadr::pulseCount (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::pulseCountType >
    pulseCount (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::pulseCount (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::pulseCountType >
    pulseCount (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::pulseCount (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::pulseCountType >
    pulseCount (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::pulseCount (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::pulseCountType >
    pulseCount (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::pulseCount (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::pulseCountType >
    pulseCount (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::pulseCount (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::pulseCountType >
    pulseCount (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::pulseCount (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::pulseCountType >
    pulseCount (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::pulseCountType > (
        ::oadr2b::oadr::pulseCount (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::pulseCountType >
    pulseCount (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::pulseCountType > (
        ::oadr2b::oadr::pulseCount (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::pulseCountType >
    pulseCount (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::pulseCountType > (
        ::oadr2b::oadr::pulseCount (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::pulseCountType >
    pulseCount (const ::xercesc::DOMDocument& doc,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::pulseCountType > (
          ::oadr2b::oadr::pulseCount (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "pulseCount",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::pulseCountType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::pulseCountType > r (
          dynamic_cast< ::oadr2b::oadr::pulseCountType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "pulseCount",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::pulseCountType >
    pulseCount (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "pulseCount",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::pulseCountType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::pulseCountType > r (
          dynamic_cast< ::oadr2b::oadr::pulseCountType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "pulseCount",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::xml_schema::float_ >
    pulseFactor (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xml_schema::float_ > (
        ::oadr2b::oadr::pulseFactor (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xml_schema::float_ >
    pulseFactor (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xml_schema::float_ > (
        ::oadr2b::oadr::pulseFactor (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xml_schema::float_ >
    pulseFactor (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xml_schema::float_ > (
        ::oadr2b::oadr::pulseFactor (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xml_schema::float_ >
    pulseFactor (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::pulseFactor (isrc, f, p);
    }

    ::std::auto_ptr< ::xml_schema::float_ >
    pulseFactor (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::pulseFactor (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::float_ >
    pulseFactor (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::pulseFactor (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::float_ >
    pulseFactor (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::pulseFactor (isrc, f, p);
    }

    ::std::auto_ptr< ::xml_schema::float_ >
    pulseFactor (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::pulseFactor (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::float_ >
    pulseFactor (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::pulseFactor (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::float_ >
    pulseFactor (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::xml_schema::float_ > (
        ::oadr2b::oadr::pulseFactor (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xml_schema::float_ >
    pulseFactor (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xml_schema::float_ > (
        ::oadr2b::oadr::pulseFactor (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xml_schema::float_ >
    pulseFactor (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::xml_schema::float_ > (
        ::oadr2b::oadr::pulseFactor (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::xml_schema::float_ >
    pulseFactor (const ::xercesc::DOMDocument& doc,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::xml_schema::float_ > (
          ::oadr2b::oadr::pulseFactor (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "pulseFactor" &&
          n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
      {
        ::std::auto_ptr< ::xml_schema::float_ > r (
          new ::xml_schema::float_ (
            ::xsd::cxx::tree::traits< ::xml_schema::float_, char >::create (
              e, f, 0)));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "pulseFactor",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::xml_schema::float_ >
    pulseFactor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "pulseFactor" &&
          n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
      {
        ::std::auto_ptr< ::xml_schema::float_ > r (
          new ::xml_schema::float_ (
            ::xsd::cxx::tree::traits< ::xml_schema::float_, char >::create (
              e, f, 0)));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "pulseFactor",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportRequestType >
    oadrReportRequest (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrReportRequestType > (
        ::oadr2b::oadr::oadrReportRequest (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportRequestType >
    oadrReportRequest (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrReportRequestType > (
        ::oadr2b::oadr::oadrReportRequest (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportRequestType >
    oadrReportRequest (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrReportRequestType > (
        ::oadr2b::oadr::oadrReportRequest (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportRequestType >
    oadrReportRequest (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrReportRequest (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportRequestType >
    oadrReportRequest (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrReportRequest (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportRequestType >
    oadrReportRequest (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrReportRequest (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportRequestType >
    oadrReportRequest (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrReportRequest (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportRequestType >
    oadrReportRequest (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrReportRequest (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportRequestType >
    oadrReportRequest (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrReportRequest (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportRequestType >
    oadrReportRequest (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrReportRequestType > (
        ::oadr2b::oadr::oadrReportRequest (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportRequestType >
    oadrReportRequest (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrReportRequestType > (
        ::oadr2b::oadr::oadrReportRequest (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportRequestType >
    oadrReportRequest (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrReportRequestType > (
        ::oadr2b::oadr::oadrReportRequest (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportRequestType >
    oadrReportRequest (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrReportRequestType > (
          ::oadr2b::oadr::oadrReportRequest (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrReportRequest",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrReportRequestType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrReportRequestType > r (
          dynamic_cast< ::oadr2b::oadr::oadrReportRequestType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrReportRequest",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportRequestType >
    oadrReportRequest (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrReportRequest",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrReportRequestType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::oadrReportRequestType > r (
          dynamic_cast< ::oadr2b::oadr::oadrReportRequestType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrReportRequest",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportType >
    oadrReport (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrReportType > (
        ::oadr2b::oadr::oadrReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportType >
    oadrReport (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrReportType > (
        ::oadr2b::oadr::oadrReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportType >
    oadrReport (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrReportType > (
        ::oadr2b::oadr::oadrReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportType >
    oadrReport (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrReport (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportType >
    oadrReport (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrReport (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportType >
    oadrReport (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrReport (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportType >
    oadrReport (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrReport (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportType >
    oadrReport (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrReport (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportType >
    oadrReport (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrReport (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportType >
    oadrReport (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrReportType > (
        ::oadr2b::oadr::oadrReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportType >
    oadrReport (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrReportType > (
        ::oadr2b::oadr::oadrReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportType >
    oadrReport (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrReportType > (
        ::oadr2b::oadr::oadrReport (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportType >
    oadrReport (const ::xercesc::DOMDocument& doc,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrReportType > (
          ::oadr2b::oadr::oadrReport (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrReportType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrReportType > r (
          dynamic_cast< ::oadr2b::oadr::oadrReportType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrReport",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportType >
    oadrReport (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrReportType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::oadrReportType > r (
          dynamic_cast< ::oadr2b::oadr::oadrReportType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrReport",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportDescriptionType >
    oadrReportDescription (const ::std::string& u,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrReportDescriptionType > (
        ::oadr2b::oadr::oadrReportDescription (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportDescriptionType >
    oadrReportDescription (const ::std::string& u,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrReportDescriptionType > (
        ::oadr2b::oadr::oadrReportDescription (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportDescriptionType >
    oadrReportDescription (const ::std::string& u,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrReportDescriptionType > (
        ::oadr2b::oadr::oadrReportDescription (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportDescriptionType >
    oadrReportDescription (::std::istream& is,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrReportDescription (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportDescriptionType >
    oadrReportDescription (::std::istream& is,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrReportDescription (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportDescriptionType >
    oadrReportDescription (::std::istream& is,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrReportDescription (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportDescriptionType >
    oadrReportDescription (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrReportDescription (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportDescriptionType >
    oadrReportDescription (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrReportDescription (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportDescriptionType >
    oadrReportDescription (::std::istream& is,
                           const ::std::string& sid,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrReportDescription (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportDescriptionType >
    oadrReportDescription (::xercesc::InputSource& i,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrReportDescriptionType > (
        ::oadr2b::oadr::oadrReportDescription (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportDescriptionType >
    oadrReportDescription (::xercesc::InputSource& i,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrReportDescriptionType > (
        ::oadr2b::oadr::oadrReportDescription (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportDescriptionType >
    oadrReportDescription (::xercesc::InputSource& i,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrReportDescriptionType > (
        ::oadr2b::oadr::oadrReportDescription (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportDescriptionType >
    oadrReportDescription (const ::xercesc::DOMDocument& doc,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrReportDescriptionType > (
          ::oadr2b::oadr::oadrReportDescription (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrReportDescription",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrReportDescriptionType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrReportDescriptionType > r (
          dynamic_cast< ::oadr2b::oadr::oadrReportDescriptionType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrReportDescription",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportDescriptionType >
    oadrReportDescription (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrReportDescription",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrReportDescriptionType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::oadrReportDescriptionType > r (
          dynamic_cast< ::oadr2b::oadr::oadrReportDescriptionType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrReportDescription",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrSamplingRateType >
    oadrSamplingRate (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrSamplingRateType > (
        ::oadr2b::oadr::oadrSamplingRate (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrSamplingRateType >
    oadrSamplingRate (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrSamplingRateType > (
        ::oadr2b::oadr::oadrSamplingRate (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrSamplingRateType >
    oadrSamplingRate (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrSamplingRateType > (
        ::oadr2b::oadr::oadrSamplingRate (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrSamplingRateType >
    oadrSamplingRate (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrSamplingRate (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrSamplingRateType >
    oadrSamplingRate (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrSamplingRate (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrSamplingRateType >
    oadrSamplingRate (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrSamplingRate (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrSamplingRateType >
    oadrSamplingRate (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrSamplingRate (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrSamplingRateType >
    oadrSamplingRate (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrSamplingRate (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrSamplingRateType >
    oadrSamplingRate (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrSamplingRate (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrSamplingRateType >
    oadrSamplingRate (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrSamplingRateType > (
        ::oadr2b::oadr::oadrSamplingRate (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrSamplingRateType >
    oadrSamplingRate (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrSamplingRateType > (
        ::oadr2b::oadr::oadrSamplingRate (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrSamplingRateType >
    oadrSamplingRate (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrSamplingRateType > (
        ::oadr2b::oadr::oadrSamplingRate (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrSamplingRateType >
    oadrSamplingRate (const ::xercesc::DOMDocument& doc,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrSamplingRateType > (
          ::oadr2b::oadr::oadrSamplingRate (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrSamplingRate",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrSamplingRateType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrSamplingRateType > r (
          dynamic_cast< ::oadr2b::oadr::oadrSamplingRateType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrSamplingRate",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrSamplingRateType >
    oadrSamplingRate (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrSamplingRate",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrSamplingRateType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::oadrSamplingRateType > r (
          dynamic_cast< ::oadr2b::oadr::oadrSamplingRateType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrSamplingRate",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPayloadResourceStatusType >
    oadrPayloadResourceStatus (const ::std::string& u,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrPayloadResourceStatusType > (
        ::oadr2b::oadr::oadrPayloadResourceStatus (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPayloadResourceStatusType >
    oadrPayloadResourceStatus (const ::std::string& u,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrPayloadResourceStatusType > (
        ::oadr2b::oadr::oadrPayloadResourceStatus (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPayloadResourceStatusType >
    oadrPayloadResourceStatus (const ::std::string& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrPayloadResourceStatusType > (
        ::oadr2b::oadr::oadrPayloadResourceStatus (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPayloadResourceStatusType >
    oadrPayloadResourceStatus (::std::istream& is,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrPayloadResourceStatus (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPayloadResourceStatusType >
    oadrPayloadResourceStatus (::std::istream& is,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrPayloadResourceStatus (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPayloadResourceStatusType >
    oadrPayloadResourceStatus (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrPayloadResourceStatus (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPayloadResourceStatusType >
    oadrPayloadResourceStatus (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrPayloadResourceStatus (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPayloadResourceStatusType >
    oadrPayloadResourceStatus (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrPayloadResourceStatus (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPayloadResourceStatusType >
    oadrPayloadResourceStatus (::std::istream& is,
                               const ::std::string& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrPayloadResourceStatus (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPayloadResourceStatusType >
    oadrPayloadResourceStatus (::xercesc::InputSource& i,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrPayloadResourceStatusType > (
        ::oadr2b::oadr::oadrPayloadResourceStatus (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPayloadResourceStatusType >
    oadrPayloadResourceStatus (::xercesc::InputSource& i,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrPayloadResourceStatusType > (
        ::oadr2b::oadr::oadrPayloadResourceStatus (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPayloadResourceStatusType >
    oadrPayloadResourceStatus (::xercesc::InputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrPayloadResourceStatusType > (
        ::oadr2b::oadr::oadrPayloadResourceStatus (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPayloadResourceStatusType >
    oadrPayloadResourceStatus (const ::xercesc::DOMDocument& doc,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrPayloadResourceStatusType > (
          ::oadr2b::oadr::oadrPayloadResourceStatus (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrPayloadResourceStatus",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrPayloadResourceStatusType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrPayloadResourceStatusType > r (
          dynamic_cast< ::oadr2b::oadr::oadrPayloadResourceStatusType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrPayloadResourceStatus",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrPayloadResourceStatusType >
    oadrPayloadResourceStatus (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrPayloadResourceStatus",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrPayloadResourceStatusType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::oadrPayloadResourceStatusType > r (
          dynamic_cast< ::oadr2b::oadr::oadrPayloadResourceStatusType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrPayloadResourceStatus",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrLoadControlStateType >
    oadrLoadControlState (const ::std::string& u,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrLoadControlStateType > (
        ::oadr2b::oadr::oadrLoadControlState (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrLoadControlStateType >
    oadrLoadControlState (const ::std::string& u,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrLoadControlStateType > (
        ::oadr2b::oadr::oadrLoadControlState (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrLoadControlStateType >
    oadrLoadControlState (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrLoadControlStateType > (
        ::oadr2b::oadr::oadrLoadControlState (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrLoadControlStateType >
    oadrLoadControlState (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrLoadControlState (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrLoadControlStateType >
    oadrLoadControlState (::std::istream& is,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrLoadControlState (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrLoadControlStateType >
    oadrLoadControlState (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrLoadControlState (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrLoadControlStateType >
    oadrLoadControlState (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrLoadControlState (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrLoadControlStateType >
    oadrLoadControlState (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrLoadControlState (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrLoadControlStateType >
    oadrLoadControlState (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrLoadControlState (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrLoadControlStateType >
    oadrLoadControlState (::xercesc::InputSource& i,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrLoadControlStateType > (
        ::oadr2b::oadr::oadrLoadControlState (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrLoadControlStateType >
    oadrLoadControlState (::xercesc::InputSource& i,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrLoadControlStateType > (
        ::oadr2b::oadr::oadrLoadControlState (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrLoadControlStateType >
    oadrLoadControlState (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrLoadControlStateType > (
        ::oadr2b::oadr::oadrLoadControlState (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrLoadControlStateType >
    oadrLoadControlState (const ::xercesc::DOMDocument& doc,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrLoadControlStateType > (
          ::oadr2b::oadr::oadrLoadControlState (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrLoadControlState",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrLoadControlStateType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrLoadControlStateType > r (
          dynamic_cast< ::oadr2b::oadr::oadrLoadControlStateType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrLoadControlState",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrLoadControlStateType >
    oadrLoadControlState (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrLoadControlState",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrLoadControlStateType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::oadrLoadControlStateType > r (
          dynamic_cast< ::oadr2b::oadr::oadrLoadControlStateType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrLoadControlState",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrGBStreamPayloadBase >
    oadrGBPayload (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrGBStreamPayloadBase > (
        ::oadr2b::oadr::oadrGBPayload (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrGBStreamPayloadBase >
    oadrGBPayload (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrGBStreamPayloadBase > (
        ::oadr2b::oadr::oadrGBPayload (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrGBStreamPayloadBase >
    oadrGBPayload (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrGBStreamPayloadBase > (
        ::oadr2b::oadr::oadrGBPayload (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrGBStreamPayloadBase >
    oadrGBPayload (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrGBPayload (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrGBStreamPayloadBase >
    oadrGBPayload (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrGBPayload (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrGBStreamPayloadBase >
    oadrGBPayload (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrGBPayload (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrGBStreamPayloadBase >
    oadrGBPayload (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrGBPayload (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrGBStreamPayloadBase >
    oadrGBPayload (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrGBPayload (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrGBStreamPayloadBase >
    oadrGBPayload (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrGBPayload (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrGBStreamPayloadBase >
    oadrGBPayload (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrGBStreamPayloadBase > (
        ::oadr2b::oadr::oadrGBPayload (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrGBStreamPayloadBase >
    oadrGBPayload (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrGBStreamPayloadBase > (
        ::oadr2b::oadr::oadrGBPayload (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrGBStreamPayloadBase >
    oadrGBPayload (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrGBStreamPayloadBase > (
        ::oadr2b::oadr::oadrGBPayload (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrGBStreamPayloadBase >
    oadrGBPayload (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrGBStreamPayloadBase > (
          ::oadr2b::oadr::oadrGBPayload (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrGBPayload",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrGBStreamPayloadBase >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrGBStreamPayloadBase > r (
          dynamic_cast< ::oadr2b::oadr::oadrGBStreamPayloadBase* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrGBPayload",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrGBStreamPayloadBase >
    oadrGBPayload (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrGBPayload",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrGBStreamPayloadBase >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::oadrGBStreamPayloadBase > r (
          dynamic_cast< ::oadr2b::oadr::oadrGBStreamPayloadBase* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrGBPayload",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrGBItemBase >
    oadrGBDataDescription (const ::std::string& u,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrGBItemBase > (
        ::oadr2b::oadr::oadrGBDataDescription (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrGBItemBase >
    oadrGBDataDescription (const ::std::string& u,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrGBItemBase > (
        ::oadr2b::oadr::oadrGBDataDescription (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrGBItemBase >
    oadrGBDataDescription (const ::std::string& u,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrGBItemBase > (
        ::oadr2b::oadr::oadrGBDataDescription (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrGBItemBase >
    oadrGBDataDescription (::std::istream& is,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrGBDataDescription (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrGBItemBase >
    oadrGBDataDescription (::std::istream& is,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrGBDataDescription (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrGBItemBase >
    oadrGBDataDescription (::std::istream& is,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrGBDataDescription (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrGBItemBase >
    oadrGBDataDescription (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrGBDataDescription (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrGBItemBase >
    oadrGBDataDescription (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrGBDataDescription (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrGBItemBase >
    oadrGBDataDescription (::std::istream& is,
                           const ::std::string& sid,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrGBDataDescription (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrGBItemBase >
    oadrGBDataDescription (::xercesc::InputSource& i,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrGBItemBase > (
        ::oadr2b::oadr::oadrGBDataDescription (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrGBItemBase >
    oadrGBDataDescription (::xercesc::InputSource& i,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrGBItemBase > (
        ::oadr2b::oadr::oadrGBDataDescription (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrGBItemBase >
    oadrGBDataDescription (::xercesc::InputSource& i,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrGBItemBase > (
        ::oadr2b::oadr::oadrGBDataDescription (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrGBItemBase >
    oadrGBDataDescription (const ::xercesc::DOMDocument& doc,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrGBItemBase > (
          ::oadr2b::oadr::oadrGBDataDescription (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrGBDataDescription",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrGBItemBase >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrGBItemBase > r (
          dynamic_cast< ::oadr2b::oadr::oadrGBItemBase* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrGBDataDescription",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrGBItemBase >
    oadrGBDataDescription (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrGBDataDescription",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrGBItemBase >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::oadrGBItemBase > r (
          dynamic_cast< ::oadr2b::oadr::oadrGBItemBase* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrGBDataDescription",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::ei::EiTargetType >
    oadrDeviceClass (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::ei::EiTargetType > (
        ::oadr2b::oadr::oadrDeviceClass (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::ei::EiTargetType >
    oadrDeviceClass (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::ei::EiTargetType > (
        ::oadr2b::oadr::oadrDeviceClass (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::ei::EiTargetType >
    oadrDeviceClass (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::ei::EiTargetType > (
        ::oadr2b::oadr::oadrDeviceClass (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::ei::EiTargetType >
    oadrDeviceClass (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrDeviceClass (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::ei::EiTargetType >
    oadrDeviceClass (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrDeviceClass (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::ei::EiTargetType >
    oadrDeviceClass (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrDeviceClass (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::ei::EiTargetType >
    oadrDeviceClass (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrDeviceClass (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::ei::EiTargetType >
    oadrDeviceClass (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrDeviceClass (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::ei::EiTargetType >
    oadrDeviceClass (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrDeviceClass (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::ei::EiTargetType >
    oadrDeviceClass (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::ei::EiTargetType > (
        ::oadr2b::oadr::oadrDeviceClass (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::ei::EiTargetType >
    oadrDeviceClass (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::ei::EiTargetType > (
        ::oadr2b::oadr::oadrDeviceClass (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::ei::EiTargetType >
    oadrDeviceClass (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::ei::EiTargetType > (
        ::oadr2b::oadr::oadrDeviceClass (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::ei::EiTargetType >
    oadrDeviceClass (const ::xercesc::DOMDocument& doc,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::ei::EiTargetType > (
          ::oadr2b::oadr::oadrDeviceClass (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrDeviceClass",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::ei::EiTargetType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::ei::EiTargetType > r (
          dynamic_cast< ::oadr2b::ei::EiTargetType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrDeviceClass",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::ei::EiTargetType >
    oadrDeviceClass (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrDeviceClass",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::ei::EiTargetType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::ei::EiTargetType > r (
          dynamic_cast< ::oadr2b::ei::EiTargetType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrDeviceClass",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportPayloadType >
    oadrReportPayload (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrReportPayloadType > (
        ::oadr2b::oadr::oadrReportPayload (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportPayloadType >
    oadrReportPayload (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrReportPayloadType > (
        ::oadr2b::oadr::oadrReportPayload (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportPayloadType >
    oadrReportPayload (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrReportPayloadType > (
        ::oadr2b::oadr::oadrReportPayload (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportPayloadType >
    oadrReportPayload (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrReportPayload (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportPayloadType >
    oadrReportPayload (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrReportPayload (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportPayloadType >
    oadrReportPayload (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrReportPayload (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportPayloadType >
    oadrReportPayload (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrReportPayload (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportPayloadType >
    oadrReportPayload (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrReportPayload (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportPayloadType >
    oadrReportPayload (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrReportPayload (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportPayloadType >
    oadrReportPayload (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrReportPayloadType > (
        ::oadr2b::oadr::oadrReportPayload (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportPayloadType >
    oadrReportPayload (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrReportPayloadType > (
        ::oadr2b::oadr::oadrReportPayload (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportPayloadType >
    oadrReportPayload (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrReportPayloadType > (
        ::oadr2b::oadr::oadrReportPayload (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportPayloadType >
    oadrReportPayload (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrReportPayloadType > (
          ::oadr2b::oadr::oadrReportPayload (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrReportPayload",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrReportPayloadType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrReportPayloadType > r (
          dynamic_cast< ::oadr2b::oadr::oadrReportPayloadType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrReportPayload",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrReportPayloadType >
    oadrReportPayload (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrReportPayload",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrReportPayloadType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::oadrReportPayloadType > r (
          dynamic_cast< ::oadr2b::oadr::oadrReportPayloadType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrReportPayload",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrDataQualityTypeType >
    oadrDataQuality (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrDataQualityTypeType > (
        ::oadr2b::oadr::oadrDataQuality (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrDataQualityTypeType >
    oadrDataQuality (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrDataQualityTypeType > (
        ::oadr2b::oadr::oadrDataQuality (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrDataQualityTypeType >
    oadrDataQuality (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrDataQualityTypeType > (
        ::oadr2b::oadr::oadrDataQuality (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrDataQualityTypeType >
    oadrDataQuality (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrDataQuality (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrDataQualityTypeType >
    oadrDataQuality (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrDataQuality (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrDataQualityTypeType >
    oadrDataQuality (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::oadr2b::oadr::oadrDataQuality (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrDataQualityTypeType >
    oadrDataQuality (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrDataQuality (isrc, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrDataQualityTypeType >
    oadrDataQuality (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrDataQuality (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrDataQualityTypeType >
    oadrDataQuality (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::oadr2b::oadr::oadrDataQuality (isrc, h, f, p);
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrDataQualityTypeType >
    oadrDataQuality (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrDataQualityTypeType > (
        ::oadr2b::oadr::oadrDataQuality (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrDataQualityTypeType >
    oadrDataQuality (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrDataQualityTypeType > (
        ::oadr2b::oadr::oadrDataQuality (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrDataQualityTypeType >
    oadrDataQuality (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::auto_ptr< ::oadr2b::oadr::oadrDataQualityTypeType > (
        ::oadr2b::oadr::oadrDataQuality (
          d, f | ::xml_schema::flags::own_dom, p));
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrDataQualityTypeType >
    oadrDataQuality (const ::xercesc::DOMDocument& doc,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::auto_ptr< ::oadr2b::oadr::oadrDataQualityTypeType > (
          ::oadr2b::oadr::oadrDataQuality (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrDataQuality",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrDataQualityTypeType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::oadr2b::oadr::oadrDataQualityTypeType > r (
          dynamic_cast< ::oadr2b::oadr::oadrDataQualityTypeType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrDataQuality",
        "http://openadr.org/oadr-2.0b/2012/07");
    }

    ::std::auto_ptr< ::oadr2b::oadr::oadrDataQualityTypeType >
    oadrDataQuality (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
          "oadrDataQuality",
          "http://openadr.org/oadr-2.0b/2012/07",
          &::xsd::cxx::tree::factory_impl< ::oadr2b::oadr::oadrDataQualityTypeType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::oadr2b::oadr::oadrDataQualityTypeType > r (
          dynamic_cast< ::oadr2b::oadr::oadrDataQualityTypeType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "oadrDataQuality",
        "http://openadr.org/oadr-2.0b/2012/07");
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace oadr2b
{
  namespace oadr
  {
    void
    oadrPayload_ (::std::ostream& o,
                  const ::oadr2b::oadr::oadrPayload& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrPayload_ (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrPayload_ (::std::ostream& o,
                  const ::oadr2b::oadr::oadrPayload& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrPayload_ (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrPayload_ (::std::ostream& o,
                  const ::oadr2b::oadr::oadrPayload& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrPayload_ (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrPayload_ (::xercesc::XMLFormatTarget& t,
                  const ::oadr2b::oadr::oadrPayload& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrPayload_ (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrPayload_ (::xercesc::XMLFormatTarget& t,
                  const ::oadr2b::oadr::oadrPayload& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrPayload_ (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrPayload_ (::xercesc::XMLFormatTarget& t,
                  const ::oadr2b::oadr::oadrPayload& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrPayload_ (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrPayload_ (::xercesc::DOMDocument& d,
                  const ::oadr2b::oadr::oadrPayload& s,
                  ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "oadrPayload" &&
          n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "oadrPayload",
          "http://openadr.org/oadr-2.0b/2012/07");
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrPayload_ (const ::oadr2b::oadr::oadrPayload& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "oadrPayload",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f));

      ::oadr2b::oadr::oadrPayload_ (*d, s, f);
      return d;
    }

    void
    oadrSignedObject_ (::std::ostream& o,
                       const ::oadr2b::oadr::oadrSignedObject& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrSignedObject_ (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrSignedObject_ (::std::ostream& o,
                       const ::oadr2b::oadr::oadrSignedObject& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrSignedObject_ (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrSignedObject_ (::std::ostream& o,
                       const ::oadr2b::oadr::oadrSignedObject& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrSignedObject_ (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrSignedObject_ (::xercesc::XMLFormatTarget& t,
                       const ::oadr2b::oadr::oadrSignedObject& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrSignedObject_ (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrSignedObject_ (::xercesc::XMLFormatTarget& t,
                       const ::oadr2b::oadr::oadrSignedObject& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrSignedObject_ (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrSignedObject_ (::xercesc::XMLFormatTarget& t,
                       const ::oadr2b::oadr::oadrSignedObject& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrSignedObject_ (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrSignedObject_ (::xercesc::DOMDocument& d,
                       const ::oadr2b::oadr::oadrSignedObject& s,
                       ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "oadrSignedObject" &&
          n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "oadrSignedObject",
          "http://openadr.org/oadr-2.0b/2012/07");
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrSignedObject_ (const ::oadr2b::oadr::oadrSignedObject& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "oadrSignedObject",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f));

      ::oadr2b::oadr::oadrSignedObject_ (*d, s, f);
      return d;
    }

    void
    oadrDistributeEvent (::std::ostream& o,
                         const ::oadr2b::oadr::oadrDistributeEventType& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrDistributeEvent (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrDistributeEvent (::std::ostream& o,
                         const ::oadr2b::oadr::oadrDistributeEventType& s,
                         ::xml_schema::error_handler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrDistributeEvent (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrDistributeEvent (::std::ostream& o,
                         const ::oadr2b::oadr::oadrDistributeEventType& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrDistributeEvent (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrDistributeEvent (::xercesc::XMLFormatTarget& t,
                         const ::oadr2b::oadr::oadrDistributeEventType& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrDistributeEvent (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrDistributeEvent (::xercesc::XMLFormatTarget& t,
                         const ::oadr2b::oadr::oadrDistributeEventType& s,
                         ::xml_schema::error_handler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrDistributeEvent (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrDistributeEvent (::xercesc::XMLFormatTarget& t,
                         const ::oadr2b::oadr::oadrDistributeEventType& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::string& e,
                         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrDistributeEvent (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrDistributeEvent (::xercesc::DOMDocument& d,
                         const ::oadr2b::oadr::oadrDistributeEventType& s,
                         ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::oadrDistributeEventType) == typeid (s))
      {
        if (n.name () == "oadrDistributeEvent" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrDistributeEvent",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrDistributeEvent",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrDistributeEvent (const ::oadr2b::oadr::oadrDistributeEventType& s,
                         const ::xml_schema::namespace_infomap& m,
                         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::oadrDistributeEventType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrDistributeEvent",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrDistributeEvent",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrDistributeEvent (*d, s, f);
      return d;
    }

    void
    oadrCreatedEvent (::std::ostream& o,
                      const ::oadr2b::oadr::oadrCreatedEventType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreatedEvent (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrCreatedEvent (::std::ostream& o,
                      const ::oadr2b::oadr::oadrCreatedEventType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreatedEvent (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCreatedEvent (::std::ostream& o,
                      const ::oadr2b::oadr::oadrCreatedEventType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreatedEvent (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCreatedEvent (::xercesc::XMLFormatTarget& t,
                      const ::oadr2b::oadr::oadrCreatedEventType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreatedEvent (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrCreatedEvent (::xercesc::XMLFormatTarget& t,
                      const ::oadr2b::oadr::oadrCreatedEventType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreatedEvent (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCreatedEvent (::xercesc::XMLFormatTarget& t,
                      const ::oadr2b::oadr::oadrCreatedEventType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreatedEvent (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCreatedEvent (::xercesc::DOMDocument& d,
                      const ::oadr2b::oadr::oadrCreatedEventType& s,
                      ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::oadrCreatedEventType) == typeid (s))
      {
        if (n.name () == "oadrCreatedEvent" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrCreatedEvent",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrCreatedEvent",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrCreatedEvent (const ::oadr2b::oadr::oadrCreatedEventType& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::oadrCreatedEventType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrCreatedEvent",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrCreatedEvent",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrCreatedEvent (*d, s, f);
      return d;
    }

    void
    oadrRequestEvent (::std::ostream& o,
                      const ::oadr2b::oadr::oadrRequestEventType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrRequestEvent (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrRequestEvent (::std::ostream& o,
                      const ::oadr2b::oadr::oadrRequestEventType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrRequestEvent (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrRequestEvent (::std::ostream& o,
                      const ::oadr2b::oadr::oadrRequestEventType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrRequestEvent (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrRequestEvent (::xercesc::XMLFormatTarget& t,
                      const ::oadr2b::oadr::oadrRequestEventType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrRequestEvent (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrRequestEvent (::xercesc::XMLFormatTarget& t,
                      const ::oadr2b::oadr::oadrRequestEventType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrRequestEvent (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrRequestEvent (::xercesc::XMLFormatTarget& t,
                      const ::oadr2b::oadr::oadrRequestEventType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrRequestEvent (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrRequestEvent (::xercesc::DOMDocument& d,
                      const ::oadr2b::oadr::oadrRequestEventType& s,
                      ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::oadrRequestEventType) == typeid (s))
      {
        if (n.name () == "oadrRequestEvent" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrRequestEvent",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrRequestEvent",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrRequestEvent (const ::oadr2b::oadr::oadrRequestEventType& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::oadrRequestEventType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrRequestEvent",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrRequestEvent",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrRequestEvent (*d, s, f);
      return d;
    }

    void
    oadrResponse (::std::ostream& o,
                  const ::oadr2b::oadr::oadrResponseType& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrResponse (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrResponse (::std::ostream& o,
                  const ::oadr2b::oadr::oadrResponseType& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrResponse (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrResponse (::std::ostream& o,
                  const ::oadr2b::oadr::oadrResponseType& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrResponse (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrResponse (::xercesc::XMLFormatTarget& t,
                  const ::oadr2b::oadr::oadrResponseType& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrResponse (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrResponse (::xercesc::XMLFormatTarget& t,
                  const ::oadr2b::oadr::oadrResponseType& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrResponse (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrResponse (::xercesc::XMLFormatTarget& t,
                  const ::oadr2b::oadr::oadrResponseType& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrResponse (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrResponse (::xercesc::DOMDocument& d,
                  const ::oadr2b::oadr::oadrResponseType& s,
                  ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::oadrResponseType) == typeid (s))
      {
        if (n.name () == "oadrResponse" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrResponse",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrResponse",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrResponse (const ::oadr2b::oadr::oadrResponseType& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::oadrResponseType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrResponse",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrResponse",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrResponse (*d, s, f);
      return d;
    }

    void
    oadrCancelOpt (::std::ostream& o,
                   const ::oadr2b::oadr::oadrCancelOptType& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCancelOpt (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrCancelOpt (::std::ostream& o,
                   const ::oadr2b::oadr::oadrCancelOptType& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCancelOpt (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCancelOpt (::std::ostream& o,
                   const ::oadr2b::oadr::oadrCancelOptType& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCancelOpt (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCancelOpt (::xercesc::XMLFormatTarget& t,
                   const ::oadr2b::oadr::oadrCancelOptType& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCancelOpt (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrCancelOpt (::xercesc::XMLFormatTarget& t,
                   const ::oadr2b::oadr::oadrCancelOptType& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCancelOpt (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCancelOpt (::xercesc::XMLFormatTarget& t,
                   const ::oadr2b::oadr::oadrCancelOptType& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCancelOpt (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCancelOpt (::xercesc::DOMDocument& d,
                   const ::oadr2b::oadr::oadrCancelOptType& s,
                   ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::oadrCancelOptType) == typeid (s))
      {
        if (n.name () == "oadrCancelOpt" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrCancelOpt",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrCancelOpt",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrCancelOpt (const ::oadr2b::oadr::oadrCancelOptType& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::oadrCancelOptType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrCancelOpt",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrCancelOpt",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrCancelOpt (*d, s, f);
      return d;
    }

    void
    oadrCanceledOpt (::std::ostream& o,
                     const ::oadr2b::oadr::oadrCanceledOptType& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCanceledOpt (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrCanceledOpt (::std::ostream& o,
                     const ::oadr2b::oadr::oadrCanceledOptType& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCanceledOpt (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCanceledOpt (::std::ostream& o,
                     const ::oadr2b::oadr::oadrCanceledOptType& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCanceledOpt (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCanceledOpt (::xercesc::XMLFormatTarget& t,
                     const ::oadr2b::oadr::oadrCanceledOptType& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCanceledOpt (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrCanceledOpt (::xercesc::XMLFormatTarget& t,
                     const ::oadr2b::oadr::oadrCanceledOptType& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCanceledOpt (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCanceledOpt (::xercesc::XMLFormatTarget& t,
                     const ::oadr2b::oadr::oadrCanceledOptType& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCanceledOpt (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCanceledOpt (::xercesc::DOMDocument& d,
                     const ::oadr2b::oadr::oadrCanceledOptType& s,
                     ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::oadrCanceledOptType) == typeid (s))
      {
        if (n.name () == "oadrCanceledOpt" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrCanceledOpt",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrCanceledOpt",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrCanceledOpt (const ::oadr2b::oadr::oadrCanceledOptType& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::oadrCanceledOptType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrCanceledOpt",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrCanceledOpt",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrCanceledOpt (*d, s, f);
      return d;
    }

    void
    oadrCreateOpt (::std::ostream& o,
                   const ::oadr2b::oadr::oadrCreateOptType& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreateOpt (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrCreateOpt (::std::ostream& o,
                   const ::oadr2b::oadr::oadrCreateOptType& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreateOpt (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCreateOpt (::std::ostream& o,
                   const ::oadr2b::oadr::oadrCreateOptType& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreateOpt (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCreateOpt (::xercesc::XMLFormatTarget& t,
                   const ::oadr2b::oadr::oadrCreateOptType& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreateOpt (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrCreateOpt (::xercesc::XMLFormatTarget& t,
                   const ::oadr2b::oadr::oadrCreateOptType& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreateOpt (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCreateOpt (::xercesc::XMLFormatTarget& t,
                   const ::oadr2b::oadr::oadrCreateOptType& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreateOpt (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCreateOpt (::xercesc::DOMDocument& d,
                   const ::oadr2b::oadr::oadrCreateOptType& s,
                   ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::oadrCreateOptType) == typeid (s))
      {
        if (n.name () == "oadrCreateOpt" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrCreateOpt",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrCreateOpt",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrCreateOpt (const ::oadr2b::oadr::oadrCreateOptType& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::oadrCreateOptType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrCreateOpt",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrCreateOpt",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrCreateOpt (*d, s, f);
      return d;
    }

    void
    oadrCreatedOpt (::std::ostream& o,
                    const ::oadr2b::oadr::oadrCreatedOptType& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreatedOpt (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrCreatedOpt (::std::ostream& o,
                    const ::oadr2b::oadr::oadrCreatedOptType& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreatedOpt (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCreatedOpt (::std::ostream& o,
                    const ::oadr2b::oadr::oadrCreatedOptType& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreatedOpt (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCreatedOpt (::xercesc::XMLFormatTarget& t,
                    const ::oadr2b::oadr::oadrCreatedOptType& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreatedOpt (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrCreatedOpt (::xercesc::XMLFormatTarget& t,
                    const ::oadr2b::oadr::oadrCreatedOptType& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreatedOpt (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCreatedOpt (::xercesc::XMLFormatTarget& t,
                    const ::oadr2b::oadr::oadrCreatedOptType& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreatedOpt (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCreatedOpt (::xercesc::DOMDocument& d,
                    const ::oadr2b::oadr::oadrCreatedOptType& s,
                    ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::oadrCreatedOptType) == typeid (s))
      {
        if (n.name () == "oadrCreatedOpt" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrCreatedOpt",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrCreatedOpt",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrCreatedOpt (const ::oadr2b::oadr::oadrCreatedOptType& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::oadrCreatedOptType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrCreatedOpt",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrCreatedOpt",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrCreatedOpt (*d, s, f);
      return d;
    }

    void
    oadrCancelReport (::std::ostream& o,
                      const ::oadr2b::oadr::oadrCancelReportType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCancelReport (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrCancelReport (::std::ostream& o,
                      const ::oadr2b::oadr::oadrCancelReportType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCancelReport (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCancelReport (::std::ostream& o,
                      const ::oadr2b::oadr::oadrCancelReportType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCancelReport (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCancelReport (::xercesc::XMLFormatTarget& t,
                      const ::oadr2b::oadr::oadrCancelReportType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCancelReport (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrCancelReport (::xercesc::XMLFormatTarget& t,
                      const ::oadr2b::oadr::oadrCancelReportType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCancelReport (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCancelReport (::xercesc::XMLFormatTarget& t,
                      const ::oadr2b::oadr::oadrCancelReportType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCancelReport (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCancelReport (::xercesc::DOMDocument& d,
                      const ::oadr2b::oadr::oadrCancelReportType& s,
                      ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::oadrCancelReportType) == typeid (s))
      {
        if (n.name () == "oadrCancelReport" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrCancelReport",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrCancelReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrCancelReport (const ::oadr2b::oadr::oadrCancelReportType& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::oadrCancelReportType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrCancelReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrCancelReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrCancelReport (*d, s, f);
      return d;
    }

    void
    oadrCanceledReport (::std::ostream& o,
                        const ::oadr2b::oadr::oadrCanceledReportType& s,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCanceledReport (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrCanceledReport (::std::ostream& o,
                        const ::oadr2b::oadr::oadrCanceledReportType& s,
                        ::xml_schema::error_handler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCanceledReport (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCanceledReport (::std::ostream& o,
                        const ::oadr2b::oadr::oadrCanceledReportType& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCanceledReport (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCanceledReport (::xercesc::XMLFormatTarget& t,
                        const ::oadr2b::oadr::oadrCanceledReportType& s,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCanceledReport (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrCanceledReport (::xercesc::XMLFormatTarget& t,
                        const ::oadr2b::oadr::oadrCanceledReportType& s,
                        ::xml_schema::error_handler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCanceledReport (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCanceledReport (::xercesc::XMLFormatTarget& t,
                        const ::oadr2b::oadr::oadrCanceledReportType& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCanceledReport (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCanceledReport (::xercesc::DOMDocument& d,
                        const ::oadr2b::oadr::oadrCanceledReportType& s,
                        ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::oadrCanceledReportType) == typeid (s))
      {
        if (n.name () == "oadrCanceledReport" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrCanceledReport",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrCanceledReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrCanceledReport (const ::oadr2b::oadr::oadrCanceledReportType& s,
                        const ::xml_schema::namespace_infomap& m,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::oadrCanceledReportType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrCanceledReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrCanceledReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrCanceledReport (*d, s, f);
      return d;
    }

    void
    oadrCreateReport (::std::ostream& o,
                      const ::oadr2b::oadr::oadrCreateReportType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreateReport (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrCreateReport (::std::ostream& o,
                      const ::oadr2b::oadr::oadrCreateReportType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreateReport (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCreateReport (::std::ostream& o,
                      const ::oadr2b::oadr::oadrCreateReportType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreateReport (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCreateReport (::xercesc::XMLFormatTarget& t,
                      const ::oadr2b::oadr::oadrCreateReportType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreateReport (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrCreateReport (::xercesc::XMLFormatTarget& t,
                      const ::oadr2b::oadr::oadrCreateReportType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreateReport (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCreateReport (::xercesc::XMLFormatTarget& t,
                      const ::oadr2b::oadr::oadrCreateReportType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreateReport (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCreateReport (::xercesc::DOMDocument& d,
                      const ::oadr2b::oadr::oadrCreateReportType& s,
                      ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::oadrCreateReportType) == typeid (s))
      {
        if (n.name () == "oadrCreateReport" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrCreateReport",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrCreateReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrCreateReport (const ::oadr2b::oadr::oadrCreateReportType& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::oadrCreateReportType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrCreateReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrCreateReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrCreateReport (*d, s, f);
      return d;
    }

    void
    oadrCreatedReport (::std::ostream& o,
                       const ::oadr2b::oadr::oadrCreatedReportType& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreatedReport (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrCreatedReport (::std::ostream& o,
                       const ::oadr2b::oadr::oadrCreatedReportType& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreatedReport (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCreatedReport (::std::ostream& o,
                       const ::oadr2b::oadr::oadrCreatedReportType& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreatedReport (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCreatedReport (::xercesc::XMLFormatTarget& t,
                       const ::oadr2b::oadr::oadrCreatedReportType& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreatedReport (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrCreatedReport (::xercesc::XMLFormatTarget& t,
                       const ::oadr2b::oadr::oadrCreatedReportType& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreatedReport (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCreatedReport (::xercesc::XMLFormatTarget& t,
                       const ::oadr2b::oadr::oadrCreatedReportType& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreatedReport (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCreatedReport (::xercesc::DOMDocument& d,
                       const ::oadr2b::oadr::oadrCreatedReportType& s,
                       ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::oadrCreatedReportType) == typeid (s))
      {
        if (n.name () == "oadrCreatedReport" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrCreatedReport",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrCreatedReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrCreatedReport (const ::oadr2b::oadr::oadrCreatedReportType& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::oadrCreatedReportType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrCreatedReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrCreatedReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrCreatedReport (*d, s, f);
      return d;
    }

    void
    oadrRegisterReport (::std::ostream& o,
                        const ::oadr2b::oadr::oadrRegisterReportType& s,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrRegisterReport (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrRegisterReport (::std::ostream& o,
                        const ::oadr2b::oadr::oadrRegisterReportType& s,
                        ::xml_schema::error_handler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrRegisterReport (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrRegisterReport (::std::ostream& o,
                        const ::oadr2b::oadr::oadrRegisterReportType& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrRegisterReport (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrRegisterReport (::xercesc::XMLFormatTarget& t,
                        const ::oadr2b::oadr::oadrRegisterReportType& s,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrRegisterReport (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrRegisterReport (::xercesc::XMLFormatTarget& t,
                        const ::oadr2b::oadr::oadrRegisterReportType& s,
                        ::xml_schema::error_handler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrRegisterReport (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrRegisterReport (::xercesc::XMLFormatTarget& t,
                        const ::oadr2b::oadr::oadrRegisterReportType& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrRegisterReport (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrRegisterReport (::xercesc::DOMDocument& d,
                        const ::oadr2b::oadr::oadrRegisterReportType& s,
                        ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::oadrRegisterReportType) == typeid (s))
      {
        if (n.name () == "oadrRegisterReport" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrRegisterReport",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrRegisterReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrRegisterReport (const ::oadr2b::oadr::oadrRegisterReportType& s,
                        const ::xml_schema::namespace_infomap& m,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::oadrRegisterReportType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrRegisterReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrRegisterReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrRegisterReport (*d, s, f);
      return d;
    }

    void
    oadrRegisteredReport (::std::ostream& o,
                          const ::oadr2b::oadr::oadrRegisteredReportType& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrRegisteredReport (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrRegisteredReport (::std::ostream& o,
                          const ::oadr2b::oadr::oadrRegisteredReportType& s,
                          ::xml_schema::error_handler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrRegisteredReport (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrRegisteredReport (::std::ostream& o,
                          const ::oadr2b::oadr::oadrRegisteredReportType& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrRegisteredReport (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrRegisteredReport (::xercesc::XMLFormatTarget& t,
                          const ::oadr2b::oadr::oadrRegisteredReportType& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrRegisteredReport (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrRegisteredReport (::xercesc::XMLFormatTarget& t,
                          const ::oadr2b::oadr::oadrRegisteredReportType& s,
                          ::xml_schema::error_handler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrRegisteredReport (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrRegisteredReport (::xercesc::XMLFormatTarget& t,
                          const ::oadr2b::oadr::oadrRegisteredReportType& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrRegisteredReport (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrRegisteredReport (::xercesc::DOMDocument& d,
                          const ::oadr2b::oadr::oadrRegisteredReportType& s,
                          ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::oadrRegisteredReportType) == typeid (s))
      {
        if (n.name () == "oadrRegisteredReport" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrRegisteredReport",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrRegisteredReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrRegisteredReport (const ::oadr2b::oadr::oadrRegisteredReportType& s,
                          const ::xml_schema::namespace_infomap& m,
                          ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::oadrRegisteredReportType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrRegisteredReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrRegisteredReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrRegisteredReport (*d, s, f);
      return d;
    }

    void
    oadrUpdateReport (::std::ostream& o,
                      const ::oadr2b::oadr::oadrUpdateReportType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrUpdateReport (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrUpdateReport (::std::ostream& o,
                      const ::oadr2b::oadr::oadrUpdateReportType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrUpdateReport (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrUpdateReport (::std::ostream& o,
                      const ::oadr2b::oadr::oadrUpdateReportType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrUpdateReport (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrUpdateReport (::xercesc::XMLFormatTarget& t,
                      const ::oadr2b::oadr::oadrUpdateReportType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrUpdateReport (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrUpdateReport (::xercesc::XMLFormatTarget& t,
                      const ::oadr2b::oadr::oadrUpdateReportType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrUpdateReport (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrUpdateReport (::xercesc::XMLFormatTarget& t,
                      const ::oadr2b::oadr::oadrUpdateReportType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrUpdateReport (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrUpdateReport (::xercesc::DOMDocument& d,
                      const ::oadr2b::oadr::oadrUpdateReportType& s,
                      ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::oadrUpdateReportType) == typeid (s))
      {
        if (n.name () == "oadrUpdateReport" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrUpdateReport",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrUpdateReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrUpdateReport (const ::oadr2b::oadr::oadrUpdateReportType& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::oadrUpdateReportType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrUpdateReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrUpdateReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrUpdateReport (*d, s, f);
      return d;
    }

    void
    oadrUpdatedReport (::std::ostream& o,
                       const ::oadr2b::oadr::oadrUpdatedReportType& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrUpdatedReport (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrUpdatedReport (::std::ostream& o,
                       const ::oadr2b::oadr::oadrUpdatedReportType& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrUpdatedReport (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrUpdatedReport (::std::ostream& o,
                       const ::oadr2b::oadr::oadrUpdatedReportType& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrUpdatedReport (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrUpdatedReport (::xercesc::XMLFormatTarget& t,
                       const ::oadr2b::oadr::oadrUpdatedReportType& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrUpdatedReport (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrUpdatedReport (::xercesc::XMLFormatTarget& t,
                       const ::oadr2b::oadr::oadrUpdatedReportType& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrUpdatedReport (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrUpdatedReport (::xercesc::XMLFormatTarget& t,
                       const ::oadr2b::oadr::oadrUpdatedReportType& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrUpdatedReport (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrUpdatedReport (::xercesc::DOMDocument& d,
                       const ::oadr2b::oadr::oadrUpdatedReportType& s,
                       ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::oadrUpdatedReportType) == typeid (s))
      {
        if (n.name () == "oadrUpdatedReport" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrUpdatedReport",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrUpdatedReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrUpdatedReport (const ::oadr2b::oadr::oadrUpdatedReportType& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::oadrUpdatedReportType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrUpdatedReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrUpdatedReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrUpdatedReport (*d, s, f);
      return d;
    }

    void
    oadrCancelPartyRegistration (::std::ostream& o,
                                 const ::oadr2b::oadr::oadrCancelPartyRegistrationType& s,
                                 const ::xml_schema::namespace_infomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCancelPartyRegistration (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrCancelPartyRegistration (::std::ostream& o,
                                 const ::oadr2b::oadr::oadrCancelPartyRegistrationType& s,
                                 ::xml_schema::error_handler& h,
                                 const ::xml_schema::namespace_infomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCancelPartyRegistration (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCancelPartyRegistration (::std::ostream& o,
                                 const ::oadr2b::oadr::oadrCancelPartyRegistrationType& s,
                                 ::xercesc::DOMErrorHandler& h,
                                 const ::xml_schema::namespace_infomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCancelPartyRegistration (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCancelPartyRegistration (::xercesc::XMLFormatTarget& t,
                                 const ::oadr2b::oadr::oadrCancelPartyRegistrationType& s,
                                 const ::xml_schema::namespace_infomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCancelPartyRegistration (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrCancelPartyRegistration (::xercesc::XMLFormatTarget& t,
                                 const ::oadr2b::oadr::oadrCancelPartyRegistrationType& s,
                                 ::xml_schema::error_handler& h,
                                 const ::xml_schema::namespace_infomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCancelPartyRegistration (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCancelPartyRegistration (::xercesc::XMLFormatTarget& t,
                                 const ::oadr2b::oadr::oadrCancelPartyRegistrationType& s,
                                 ::xercesc::DOMErrorHandler& h,
                                 const ::xml_schema::namespace_infomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCancelPartyRegistration (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCancelPartyRegistration (::xercesc::DOMDocument& d,
                                 const ::oadr2b::oadr::oadrCancelPartyRegistrationType& s,
                                 ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::oadrCancelPartyRegistrationType) == typeid (s))
      {
        if (n.name () == "oadrCancelPartyRegistration" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrCancelPartyRegistration",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrCancelPartyRegistration",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrCancelPartyRegistration (const ::oadr2b::oadr::oadrCancelPartyRegistrationType& s,
                                 const ::xml_schema::namespace_infomap& m,
                                 ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::oadrCancelPartyRegistrationType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrCancelPartyRegistration",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrCancelPartyRegistration",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrCancelPartyRegistration (*d, s, f);
      return d;
    }

    void
    oadrCanceledPartyRegistration (::std::ostream& o,
                                   const ::oadr2b::oadr::oadrCanceledPartyRegistrationType& s,
                                   const ::xml_schema::namespace_infomap& m,
                                   const ::std::string& e,
                                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCanceledPartyRegistration (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrCanceledPartyRegistration (::std::ostream& o,
                                   const ::oadr2b::oadr::oadrCanceledPartyRegistrationType& s,
                                   ::xml_schema::error_handler& h,
                                   const ::xml_schema::namespace_infomap& m,
                                   const ::std::string& e,
                                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCanceledPartyRegistration (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCanceledPartyRegistration (::std::ostream& o,
                                   const ::oadr2b::oadr::oadrCanceledPartyRegistrationType& s,
                                   ::xercesc::DOMErrorHandler& h,
                                   const ::xml_schema::namespace_infomap& m,
                                   const ::std::string& e,
                                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCanceledPartyRegistration (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCanceledPartyRegistration (::xercesc::XMLFormatTarget& t,
                                   const ::oadr2b::oadr::oadrCanceledPartyRegistrationType& s,
                                   const ::xml_schema::namespace_infomap& m,
                                   const ::std::string& e,
                                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCanceledPartyRegistration (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrCanceledPartyRegistration (::xercesc::XMLFormatTarget& t,
                                   const ::oadr2b::oadr::oadrCanceledPartyRegistrationType& s,
                                   ::xml_schema::error_handler& h,
                                   const ::xml_schema::namespace_infomap& m,
                                   const ::std::string& e,
                                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCanceledPartyRegistration (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCanceledPartyRegistration (::xercesc::XMLFormatTarget& t,
                                   const ::oadr2b::oadr::oadrCanceledPartyRegistrationType& s,
                                   ::xercesc::DOMErrorHandler& h,
                                   const ::xml_schema::namespace_infomap& m,
                                   const ::std::string& e,
                                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCanceledPartyRegistration (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCanceledPartyRegistration (::xercesc::DOMDocument& d,
                                   const ::oadr2b::oadr::oadrCanceledPartyRegistrationType& s,
                                   ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::oadrCanceledPartyRegistrationType) == typeid (s))
      {
        if (n.name () == "oadrCanceledPartyRegistration" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrCanceledPartyRegistration",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrCanceledPartyRegistration",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrCanceledPartyRegistration (const ::oadr2b::oadr::oadrCanceledPartyRegistrationType& s,
                                   const ::xml_schema::namespace_infomap& m,
                                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::oadrCanceledPartyRegistrationType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrCanceledPartyRegistration",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrCanceledPartyRegistration",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrCanceledPartyRegistration (*d, s, f);
      return d;
    }

    void
    oadrCreatePartyRegistration (::std::ostream& o,
                                 const ::oadr2b::oadr::oadrCreatePartyRegistrationType& s,
                                 const ::xml_schema::namespace_infomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreatePartyRegistration (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrCreatePartyRegistration (::std::ostream& o,
                                 const ::oadr2b::oadr::oadrCreatePartyRegistrationType& s,
                                 ::xml_schema::error_handler& h,
                                 const ::xml_schema::namespace_infomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreatePartyRegistration (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCreatePartyRegistration (::std::ostream& o,
                                 const ::oadr2b::oadr::oadrCreatePartyRegistrationType& s,
                                 ::xercesc::DOMErrorHandler& h,
                                 const ::xml_schema::namespace_infomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreatePartyRegistration (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCreatePartyRegistration (::xercesc::XMLFormatTarget& t,
                                 const ::oadr2b::oadr::oadrCreatePartyRegistrationType& s,
                                 const ::xml_schema::namespace_infomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreatePartyRegistration (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrCreatePartyRegistration (::xercesc::XMLFormatTarget& t,
                                 const ::oadr2b::oadr::oadrCreatePartyRegistrationType& s,
                                 ::xml_schema::error_handler& h,
                                 const ::xml_schema::namespace_infomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreatePartyRegistration (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCreatePartyRegistration (::xercesc::XMLFormatTarget& t,
                                 const ::oadr2b::oadr::oadrCreatePartyRegistrationType& s,
                                 ::xercesc::DOMErrorHandler& h,
                                 const ::xml_schema::namespace_infomap& m,
                                 const ::std::string& e,
                                 ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreatePartyRegistration (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCreatePartyRegistration (::xercesc::DOMDocument& d,
                                 const ::oadr2b::oadr::oadrCreatePartyRegistrationType& s,
                                 ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::oadrCreatePartyRegistrationType) == typeid (s))
      {
        if (n.name () == "oadrCreatePartyRegistration" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrCreatePartyRegistration",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrCreatePartyRegistration",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrCreatePartyRegistration (const ::oadr2b::oadr::oadrCreatePartyRegistrationType& s,
                                 const ::xml_schema::namespace_infomap& m,
                                 ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::oadrCreatePartyRegistrationType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrCreatePartyRegistration",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrCreatePartyRegistration",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrCreatePartyRegistration (*d, s, f);
      return d;
    }

    void
    oadrCreatedPartyRegistration (::std::ostream& o,
                                  const ::oadr2b::oadr::oadrCreatedPartyRegistrationType& s,
                                  const ::xml_schema::namespace_infomap& m,
                                  const ::std::string& e,
                                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreatedPartyRegistration (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrCreatedPartyRegistration (::std::ostream& o,
                                  const ::oadr2b::oadr::oadrCreatedPartyRegistrationType& s,
                                  ::xml_schema::error_handler& h,
                                  const ::xml_schema::namespace_infomap& m,
                                  const ::std::string& e,
                                  ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreatedPartyRegistration (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCreatedPartyRegistration (::std::ostream& o,
                                  const ::oadr2b::oadr::oadrCreatedPartyRegistrationType& s,
                                  ::xercesc::DOMErrorHandler& h,
                                  const ::xml_schema::namespace_infomap& m,
                                  const ::std::string& e,
                                  ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreatedPartyRegistration (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCreatedPartyRegistration (::xercesc::XMLFormatTarget& t,
                                  const ::oadr2b::oadr::oadrCreatedPartyRegistrationType& s,
                                  const ::xml_schema::namespace_infomap& m,
                                  const ::std::string& e,
                                  ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreatedPartyRegistration (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrCreatedPartyRegistration (::xercesc::XMLFormatTarget& t,
                                  const ::oadr2b::oadr::oadrCreatedPartyRegistrationType& s,
                                  ::xml_schema::error_handler& h,
                                  const ::xml_schema::namespace_infomap& m,
                                  const ::std::string& e,
                                  ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreatedPartyRegistration (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCreatedPartyRegistration (::xercesc::XMLFormatTarget& t,
                                  const ::oadr2b::oadr::oadrCreatedPartyRegistrationType& s,
                                  ::xercesc::DOMErrorHandler& h,
                                  const ::xml_schema::namespace_infomap& m,
                                  const ::std::string& e,
                                  ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrCreatedPartyRegistration (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrCreatedPartyRegistration (::xercesc::DOMDocument& d,
                                  const ::oadr2b::oadr::oadrCreatedPartyRegistrationType& s,
                                  ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::oadrCreatedPartyRegistrationType) == typeid (s))
      {
        if (n.name () == "oadrCreatedPartyRegistration" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrCreatedPartyRegistration",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrCreatedPartyRegistration",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrCreatedPartyRegistration (const ::oadr2b::oadr::oadrCreatedPartyRegistrationType& s,
                                  const ::xml_schema::namespace_infomap& m,
                                  ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::oadrCreatedPartyRegistrationType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrCreatedPartyRegistration",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrCreatedPartyRegistration",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrCreatedPartyRegistration (*d, s, f);
      return d;
    }

    void
    oadrRequestReregistration (::std::ostream& o,
                               const ::oadr2b::oadr::oadrRequestReregistrationType& s,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrRequestReregistration (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrRequestReregistration (::std::ostream& o,
                               const ::oadr2b::oadr::oadrRequestReregistrationType& s,
                               ::xml_schema::error_handler& h,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrRequestReregistration (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrRequestReregistration (::std::ostream& o,
                               const ::oadr2b::oadr::oadrRequestReregistrationType& s,
                               ::xercesc::DOMErrorHandler& h,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrRequestReregistration (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrRequestReregistration (::xercesc::XMLFormatTarget& t,
                               const ::oadr2b::oadr::oadrRequestReregistrationType& s,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrRequestReregistration (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrRequestReregistration (::xercesc::XMLFormatTarget& t,
                               const ::oadr2b::oadr::oadrRequestReregistrationType& s,
                               ::xml_schema::error_handler& h,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrRequestReregistration (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrRequestReregistration (::xercesc::XMLFormatTarget& t,
                               const ::oadr2b::oadr::oadrRequestReregistrationType& s,
                               ::xercesc::DOMErrorHandler& h,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrRequestReregistration (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrRequestReregistration (::xercesc::DOMDocument& d,
                               const ::oadr2b::oadr::oadrRequestReregistrationType& s,
                               ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::oadrRequestReregistrationType) == typeid (s))
      {
        if (n.name () == "oadrRequestReregistration" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrRequestReregistration",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrRequestReregistration",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrRequestReregistration (const ::oadr2b::oadr::oadrRequestReregistrationType& s,
                               const ::xml_schema::namespace_infomap& m,
                               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::oadrRequestReregistrationType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrRequestReregistration",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrRequestReregistration",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrRequestReregistration (*d, s, f);
      return d;
    }

    void
    oadrQueryRegistration (::std::ostream& o,
                           const ::oadr2b::oadr::oadrQueryRegistrationType& s,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrQueryRegistration (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrQueryRegistration (::std::ostream& o,
                           const ::oadr2b::oadr::oadrQueryRegistrationType& s,
                           ::xml_schema::error_handler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrQueryRegistration (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrQueryRegistration (::std::ostream& o,
                           const ::oadr2b::oadr::oadrQueryRegistrationType& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrQueryRegistration (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrQueryRegistration (::xercesc::XMLFormatTarget& t,
                           const ::oadr2b::oadr::oadrQueryRegistrationType& s,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrQueryRegistration (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrQueryRegistration (::xercesc::XMLFormatTarget& t,
                           const ::oadr2b::oadr::oadrQueryRegistrationType& s,
                           ::xml_schema::error_handler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrQueryRegistration (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrQueryRegistration (::xercesc::XMLFormatTarget& t,
                           const ::oadr2b::oadr::oadrQueryRegistrationType& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrQueryRegistration (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrQueryRegistration (::xercesc::DOMDocument& d,
                           const ::oadr2b::oadr::oadrQueryRegistrationType& s,
                           ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::oadrQueryRegistrationType) == typeid (s))
      {
        if (n.name () == "oadrQueryRegistration" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrQueryRegistration",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrQueryRegistration",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrQueryRegistration (const ::oadr2b::oadr::oadrQueryRegistrationType& s,
                           const ::xml_schema::namespace_infomap& m,
                           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::oadrQueryRegistrationType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrQueryRegistration",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrQueryRegistration",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrQueryRegistration (*d, s, f);
      return d;
    }

    void
    oadrPoll (::std::ostream& o,
              const ::oadr2b::oadr::oadrPollType& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrPoll (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrPoll (::std::ostream& o,
              const ::oadr2b::oadr::oadrPollType& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrPoll (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrPoll (::std::ostream& o,
              const ::oadr2b::oadr::oadrPollType& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrPoll (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrPoll (::xercesc::XMLFormatTarget& t,
              const ::oadr2b::oadr::oadrPollType& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrPoll (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrPoll (::xercesc::XMLFormatTarget& t,
              const ::oadr2b::oadr::oadrPollType& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrPoll (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrPoll (::xercesc::XMLFormatTarget& t,
              const ::oadr2b::oadr::oadrPollType& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrPoll (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrPoll (::xercesc::DOMDocument& d,
              const ::oadr2b::oadr::oadrPollType& s,
              ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::oadrPollType) == typeid (s))
      {
        if (n.name () == "oadrPoll" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrPoll",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrPoll",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrPoll (const ::oadr2b::oadr::oadrPollType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::oadrPollType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrPoll",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrPoll",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrPoll (*d, s, f);
      return d;
    }

    void
    oadrVenName (::std::ostream& o,
                 const ::xml_schema::string& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrVenName (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrVenName (::std::ostream& o,
                 const ::xml_schema::string& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrVenName (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrVenName (::std::ostream& o,
                 const ::xml_schema::string& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrVenName (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrVenName (::xercesc::XMLFormatTarget& t,
                 const ::xml_schema::string& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrVenName (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrVenName (::xercesc::XMLFormatTarget& t,
                 const ::xml_schema::string& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrVenName (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrVenName (::xercesc::XMLFormatTarget& t,
                 const ::xml_schema::string& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrVenName (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrVenName (::xercesc::DOMDocument& d,
                 const ::xml_schema::string& s,
                 ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xml_schema::string) == typeid (s))
      {
        if (n.name () == "oadrVenName" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrVenName",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrVenName",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrVenName (const ::xml_schema::string& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xml_schema::string) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrVenName",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrVenName",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrVenName (*d, s, f);
      return d;
    }

    void
    oadrProfiles_ (::std::ostream& o,
                   const ::oadr2b::oadr::oadrProfiles& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrProfiles_ (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrProfiles_ (::std::ostream& o,
                   const ::oadr2b::oadr::oadrProfiles& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrProfiles_ (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrProfiles_ (::std::ostream& o,
                   const ::oadr2b::oadr::oadrProfiles& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrProfiles_ (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrProfiles_ (::xercesc::XMLFormatTarget& t,
                   const ::oadr2b::oadr::oadrProfiles& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrProfiles_ (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrProfiles_ (::xercesc::XMLFormatTarget& t,
                   const ::oadr2b::oadr::oadrProfiles& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrProfiles_ (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrProfiles_ (::xercesc::XMLFormatTarget& t,
                   const ::oadr2b::oadr::oadrProfiles& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrProfiles_ (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrProfiles_ (::xercesc::DOMDocument& d,
                   const ::oadr2b::oadr::oadrProfiles& s,
                   ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "oadrProfiles" &&
          n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "oadrProfiles",
          "http://openadr.org/oadr-2.0b/2012/07");
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrProfiles_ (const ::oadr2b::oadr::oadrProfiles& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "oadrProfiles",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f));

      ::oadr2b::oadr::oadrProfiles_ (*d, s, f);
      return d;
    }

    void
    oadrProfileName (::std::ostream& o,
                     const ::oadr2b::oadr::oadrProfileType& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrProfileName (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrProfileName (::std::ostream& o,
                     const ::oadr2b::oadr::oadrProfileType& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrProfileName (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrProfileName (::std::ostream& o,
                     const ::oadr2b::oadr::oadrProfileType& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrProfileName (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrProfileName (::xercesc::XMLFormatTarget& t,
                     const ::oadr2b::oadr::oadrProfileType& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrProfileName (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrProfileName (::xercesc::XMLFormatTarget& t,
                     const ::oadr2b::oadr::oadrProfileType& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrProfileName (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrProfileName (::xercesc::XMLFormatTarget& t,
                     const ::oadr2b::oadr::oadrProfileType& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrProfileName (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrProfileName (::xercesc::DOMDocument& d,
                     const ::oadr2b::oadr::oadrProfileType& s,
                     ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::oadrProfileType) == typeid (s))
      {
        if (n.name () == "oadrProfileName" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrProfileName",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrProfileName",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrProfileName (const ::oadr2b::oadr::oadrProfileType& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::oadrProfileType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrProfileName",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrProfileName",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrProfileName (*d, s, f);
      return d;
    }

    void
    oadrTransports_ (::std::ostream& o,
                     const ::oadr2b::oadr::oadrTransports& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrTransports_ (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrTransports_ (::std::ostream& o,
                     const ::oadr2b::oadr::oadrTransports& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrTransports_ (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrTransports_ (::std::ostream& o,
                     const ::oadr2b::oadr::oadrTransports& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrTransports_ (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrTransports_ (::xercesc::XMLFormatTarget& t,
                     const ::oadr2b::oadr::oadrTransports& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrTransports_ (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrTransports_ (::xercesc::XMLFormatTarget& t,
                     const ::oadr2b::oadr::oadrTransports& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrTransports_ (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrTransports_ (::xercesc::XMLFormatTarget& t,
                     const ::oadr2b::oadr::oadrTransports& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrTransports_ (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrTransports_ (::xercesc::DOMDocument& d,
                     const ::oadr2b::oadr::oadrTransports& s,
                     ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "oadrTransports" &&
          n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "oadrTransports",
          "http://openadr.org/oadr-2.0b/2012/07");
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrTransports_ (const ::oadr2b::oadr::oadrTransports& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "oadrTransports",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f));

      ::oadr2b::oadr::oadrTransports_ (*d, s, f);
      return d;
    }

    void
    oadrTransportName (::std::ostream& o,
                       const ::oadr2b::oadr::oadrTransportType& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrTransportName (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrTransportName (::std::ostream& o,
                       const ::oadr2b::oadr::oadrTransportType& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrTransportName (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrTransportName (::std::ostream& o,
                       const ::oadr2b::oadr::oadrTransportType& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrTransportName (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrTransportName (::xercesc::XMLFormatTarget& t,
                       const ::oadr2b::oadr::oadrTransportType& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrTransportName (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrTransportName (::xercesc::XMLFormatTarget& t,
                       const ::oadr2b::oadr::oadrTransportType& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrTransportName (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrTransportName (::xercesc::XMLFormatTarget& t,
                       const ::oadr2b::oadr::oadrTransportType& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrTransportName (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrTransportName (::xercesc::DOMDocument& d,
                       const ::oadr2b::oadr::oadrTransportType& s,
                       ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::oadrTransportType) == typeid (s))
      {
        if (n.name () == "oadrTransportName" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrTransportName",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrTransportName",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrTransportName (const ::oadr2b::oadr::oadrTransportType& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::oadrTransportType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrTransportName",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrTransportName",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrTransportName (*d, s, f);
      return d;
    }

    void
    oadrHttpPullModel (::std::ostream& o,
                       const ::xml_schema::boolean& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrHttpPullModel (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrHttpPullModel (::std::ostream& o,
                       const ::xml_schema::boolean& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrHttpPullModel (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrHttpPullModel (::std::ostream& o,
                       const ::xml_schema::boolean& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrHttpPullModel (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrHttpPullModel (::xercesc::XMLFormatTarget& t,
                       const ::xml_schema::boolean& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrHttpPullModel (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrHttpPullModel (::xercesc::XMLFormatTarget& t,
                       const ::xml_schema::boolean& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrHttpPullModel (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrHttpPullModel (::xercesc::XMLFormatTarget& t,
                       const ::xml_schema::boolean& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrHttpPullModel (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrHttpPullModel (::xercesc::DOMDocument& d,
                       const ::xml_schema::boolean& s,
                       ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "oadrHttpPullModel" &&
          n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "oadrHttpPullModel",
          "http://openadr.org/oadr-2.0b/2012/07");
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrHttpPullModel (const ::xml_schema::boolean& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "oadrHttpPullModel",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f));

      ::oadr2b::oadr::oadrHttpPullModel (*d, s, f);
      return d;
    }

    void
    oadrServiceSpecificInfo_ (::std::ostream& o,
                              const ::oadr2b::oadr::oadrServiceSpecificInfo& s,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrServiceSpecificInfo_ (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrServiceSpecificInfo_ (::std::ostream& o,
                              const ::oadr2b::oadr::oadrServiceSpecificInfo& s,
                              ::xml_schema::error_handler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrServiceSpecificInfo_ (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrServiceSpecificInfo_ (::std::ostream& o,
                              const ::oadr2b::oadr::oadrServiceSpecificInfo& s,
                              ::xercesc::DOMErrorHandler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrServiceSpecificInfo_ (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrServiceSpecificInfo_ (::xercesc::XMLFormatTarget& t,
                              const ::oadr2b::oadr::oadrServiceSpecificInfo& s,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrServiceSpecificInfo_ (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrServiceSpecificInfo_ (::xercesc::XMLFormatTarget& t,
                              const ::oadr2b::oadr::oadrServiceSpecificInfo& s,
                              ::xml_schema::error_handler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrServiceSpecificInfo_ (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrServiceSpecificInfo_ (::xercesc::XMLFormatTarget& t,
                              const ::oadr2b::oadr::oadrServiceSpecificInfo& s,
                              ::xercesc::DOMErrorHandler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrServiceSpecificInfo_ (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrServiceSpecificInfo_ (::xercesc::DOMDocument& d,
                              const ::oadr2b::oadr::oadrServiceSpecificInfo& s,
                              ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "oadrServiceSpecificInfo" &&
          n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "oadrServiceSpecificInfo",
          "http://openadr.org/oadr-2.0b/2012/07");
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrServiceSpecificInfo_ (const ::oadr2b::oadr::oadrServiceSpecificInfo& s,
                              const ::xml_schema::namespace_infomap& m,
                              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "oadrServiceSpecificInfo",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f));

      ::oadr2b::oadr::oadrServiceSpecificInfo_ (*d, s, f);
      return d;
    }

    void
    oadrServiceName (::std::ostream& o,
                     const ::oadr2b::oadr::oadrServiceNameType& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrServiceName (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrServiceName (::std::ostream& o,
                     const ::oadr2b::oadr::oadrServiceNameType& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrServiceName (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrServiceName (::std::ostream& o,
                     const ::oadr2b::oadr::oadrServiceNameType& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrServiceName (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrServiceName (::xercesc::XMLFormatTarget& t,
                     const ::oadr2b::oadr::oadrServiceNameType& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrServiceName (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrServiceName (::xercesc::XMLFormatTarget& t,
                     const ::oadr2b::oadr::oadrServiceNameType& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrServiceName (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrServiceName (::xercesc::XMLFormatTarget& t,
                     const ::oadr2b::oadr::oadrServiceNameType& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrServiceName (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrServiceName (::xercesc::DOMDocument& d,
                     const ::oadr2b::oadr::oadrServiceNameType& s,
                     ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::oadrServiceNameType) == typeid (s))
      {
        if (n.name () == "oadrServiceName" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrServiceName",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrServiceName",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrServiceName (const ::oadr2b::oadr::oadrServiceNameType& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::oadrServiceNameType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrServiceName",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrServiceName",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrServiceName (*d, s, f);
      return d;
    }

    void
    oadrInfo_ (::std::ostream& o,
               const ::oadr2b::oadr::oadrInfo& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrInfo_ (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrInfo_ (::std::ostream& o,
               const ::oadr2b::oadr::oadrInfo& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrInfo_ (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrInfo_ (::std::ostream& o,
               const ::oadr2b::oadr::oadrInfo& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrInfo_ (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrInfo_ (::xercesc::XMLFormatTarget& t,
               const ::oadr2b::oadr::oadrInfo& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrInfo_ (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrInfo_ (::xercesc::XMLFormatTarget& t,
               const ::oadr2b::oadr::oadrInfo& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrInfo_ (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrInfo_ (::xercesc::XMLFormatTarget& t,
               const ::oadr2b::oadr::oadrInfo& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrInfo_ (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrInfo_ (::xercesc::DOMDocument& d,
               const ::oadr2b::oadr::oadrInfo& s,
               ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "oadrInfo" &&
          n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "oadrInfo",
          "http://openadr.org/oadr-2.0b/2012/07");
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrInfo_ (const ::oadr2b::oadr::oadrInfo& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "oadrInfo",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f));

      ::oadr2b::oadr::oadrInfo_ (*d, s, f);
      return d;
    }

    void
    oadrXmlSignature (::std::ostream& o,
                      const ::xml_schema::boolean& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrXmlSignature (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrXmlSignature (::std::ostream& o,
                      const ::xml_schema::boolean& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrXmlSignature (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrXmlSignature (::std::ostream& o,
                      const ::xml_schema::boolean& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrXmlSignature (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrXmlSignature (::xercesc::XMLFormatTarget& t,
                      const ::xml_schema::boolean& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrXmlSignature (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrXmlSignature (::xercesc::XMLFormatTarget& t,
                      const ::xml_schema::boolean& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrXmlSignature (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrXmlSignature (::xercesc::XMLFormatTarget& t,
                      const ::xml_schema::boolean& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrXmlSignature (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrXmlSignature (::xercesc::DOMDocument& d,
                      const ::xml_schema::boolean& s,
                      ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "oadrXmlSignature" &&
          n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "oadrXmlSignature",
          "http://openadr.org/oadr-2.0b/2012/07");
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrXmlSignature (const ::xml_schema::boolean& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "oadrXmlSignature",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f));

      ::oadr2b::oadr::oadrXmlSignature (*d, s, f);
      return d;
    }

    void
    oadrReportOnly (::std::ostream& o,
                    const ::xml_schema::boolean& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrReportOnly (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrReportOnly (::std::ostream& o,
                    const ::xml_schema::boolean& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrReportOnly (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrReportOnly (::std::ostream& o,
                    const ::xml_schema::boolean& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrReportOnly (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrReportOnly (::xercesc::XMLFormatTarget& t,
                    const ::xml_schema::boolean& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrReportOnly (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrReportOnly (::xercesc::XMLFormatTarget& t,
                    const ::xml_schema::boolean& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrReportOnly (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrReportOnly (::xercesc::XMLFormatTarget& t,
                    const ::xml_schema::boolean& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrReportOnly (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrReportOnly (::xercesc::DOMDocument& d,
                    const ::xml_schema::boolean& s,
                    ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "oadrReportOnly" &&
          n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "oadrReportOnly",
          "http://openadr.org/oadr-2.0b/2012/07");
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrReportOnly (const ::xml_schema::boolean& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "oadrReportOnly",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f));

      ::oadr2b::oadr::oadrReportOnly (*d, s, f);
      return d;
    }

    void
    oadrTransportAddress (::std::ostream& o,
                          const ::xml_schema::string& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrTransportAddress (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrTransportAddress (::std::ostream& o,
                          const ::xml_schema::string& s,
                          ::xml_schema::error_handler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrTransportAddress (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrTransportAddress (::std::ostream& o,
                          const ::xml_schema::string& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrTransportAddress (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrTransportAddress (::xercesc::XMLFormatTarget& t,
                          const ::xml_schema::string& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrTransportAddress (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrTransportAddress (::xercesc::XMLFormatTarget& t,
                          const ::xml_schema::string& s,
                          ::xml_schema::error_handler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrTransportAddress (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrTransportAddress (::xercesc::XMLFormatTarget& t,
                          const ::xml_schema::string& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrTransportAddress (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrTransportAddress (::xercesc::DOMDocument& d,
                          const ::xml_schema::string& s,
                          ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::xml_schema::string) == typeid (s))
      {
        if (n.name () == "oadrTransportAddress" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrTransportAddress",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrTransportAddress",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrTransportAddress (const ::xml_schema::string& s,
                          const ::xml_schema::namespace_infomap& m,
                          ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xml_schema::string) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrTransportAddress",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrTransportAddress",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrTransportAddress (*d, s, f);
      return d;
    }

    void
    oadrRequestedOadrPollFreq (::std::ostream& o,
                               const ::icalendar_2_0::DurationPropType& s,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrRequestedOadrPollFreq (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrRequestedOadrPollFreq (::std::ostream& o,
                               const ::icalendar_2_0::DurationPropType& s,
                               ::xml_schema::error_handler& h,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrRequestedOadrPollFreq (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrRequestedOadrPollFreq (::std::ostream& o,
                               const ::icalendar_2_0::DurationPropType& s,
                               ::xercesc::DOMErrorHandler& h,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrRequestedOadrPollFreq (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrRequestedOadrPollFreq (::xercesc::XMLFormatTarget& t,
                               const ::icalendar_2_0::DurationPropType& s,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrRequestedOadrPollFreq (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrRequestedOadrPollFreq (::xercesc::XMLFormatTarget& t,
                               const ::icalendar_2_0::DurationPropType& s,
                               ::xml_schema::error_handler& h,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrRequestedOadrPollFreq (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrRequestedOadrPollFreq (::xercesc::XMLFormatTarget& t,
                               const ::icalendar_2_0::DurationPropType& s,
                               ::xercesc::DOMErrorHandler& h,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrRequestedOadrPollFreq (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrRequestedOadrPollFreq (::xercesc::DOMDocument& d,
                               const ::icalendar_2_0::DurationPropType& s,
                               ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::icalendar_2_0::DurationPropType) == typeid (s))
      {
        if (n.name () == "oadrRequestedOadrPollFreq" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrRequestedOadrPollFreq",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrRequestedOadrPollFreq",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrRequestedOadrPollFreq (const ::icalendar_2_0::DurationPropType& s,
                               const ::xml_schema::namespace_infomap& m,
                               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::icalendar_2_0::DurationPropType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrRequestedOadrPollFreq",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrRequestedOadrPollFreq",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrRequestedOadrPollFreq (*d, s, f);
      return d;
    }

    void
    oadrResponseRequired (::std::ostream& o,
                          const ::oadr2b::oadr::ResponseRequiredType& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrResponseRequired (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrResponseRequired (::std::ostream& o,
                          const ::oadr2b::oadr::ResponseRequiredType& s,
                          ::xml_schema::error_handler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrResponseRequired (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrResponseRequired (::std::ostream& o,
                          const ::oadr2b::oadr::ResponseRequiredType& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrResponseRequired (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrResponseRequired (::xercesc::XMLFormatTarget& t,
                          const ::oadr2b::oadr::ResponseRequiredType& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrResponseRequired (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrResponseRequired (::xercesc::XMLFormatTarget& t,
                          const ::oadr2b::oadr::ResponseRequiredType& s,
                          ::xml_schema::error_handler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrResponseRequired (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrResponseRequired (::xercesc::XMLFormatTarget& t,
                          const ::oadr2b::oadr::ResponseRequiredType& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrResponseRequired (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrResponseRequired (::xercesc::DOMDocument& d,
                          const ::oadr2b::oadr::ResponseRequiredType& s,
                          ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::ResponseRequiredType) == typeid (s))
      {
        if (n.name () == "oadrResponseRequired" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrResponseRequired",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrResponseRequired",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrResponseRequired (const ::oadr2b::oadr::ResponseRequiredType& s,
                          const ::xml_schema::namespace_infomap& m,
                          ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::ResponseRequiredType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrResponseRequired",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrResponseRequired",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrResponseRequired (*d, s, f);
      return d;
    }

    void
    oadrPendingReports (::std::ostream& o,
                        const ::oadr2b::oadr::oadrPendingReportsType& s,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrPendingReports (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrPendingReports (::std::ostream& o,
                        const ::oadr2b::oadr::oadrPendingReportsType& s,
                        ::xml_schema::error_handler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrPendingReports (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrPendingReports (::std::ostream& o,
                        const ::oadr2b::oadr::oadrPendingReportsType& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrPendingReports (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrPendingReports (::xercesc::XMLFormatTarget& t,
                        const ::oadr2b::oadr::oadrPendingReportsType& s,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrPendingReports (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrPendingReports (::xercesc::XMLFormatTarget& t,
                        const ::oadr2b::oadr::oadrPendingReportsType& s,
                        ::xml_schema::error_handler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrPendingReports (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrPendingReports (::xercesc::XMLFormatTarget& t,
                        const ::oadr2b::oadr::oadrPendingReportsType& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrPendingReports (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrPendingReports (::xercesc::DOMDocument& d,
                        const ::oadr2b::oadr::oadrPendingReportsType& s,
                        ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::oadrPendingReportsType) == typeid (s))
      {
        if (n.name () == "oadrPendingReports" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrPendingReports",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrPendingReports",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrPendingReports (const ::oadr2b::oadr::oadrPendingReportsType& s,
                        const ::xml_schema::namespace_infomap& m,
                        ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::oadrPendingReportsType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrPendingReports",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrPendingReports",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrPendingReports (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::oadr2b::oadr::BaseUnitType >
    _xsd_customUnit_element_serializer_init (
      "itemBase",
      "http://docs.oasis-open.org/ns/emix/2011/06",
      "customUnit",
      "http://openadr.org/oadr-2.0b/2012/07");


    void
    customUnit (::std::ostream& o,
                const ::oadr2b::oadr::BaseUnitType& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::customUnit (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    customUnit (::std::ostream& o,
                const ::oadr2b::oadr::BaseUnitType& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::customUnit (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    customUnit (::std::ostream& o,
                const ::oadr2b::oadr::BaseUnitType& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::customUnit (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    customUnit (::xercesc::XMLFormatTarget& t,
                const ::oadr2b::oadr::BaseUnitType& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::customUnit (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    customUnit (::xercesc::XMLFormatTarget& t,
                const ::oadr2b::oadr::BaseUnitType& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::customUnit (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    customUnit (::xercesc::XMLFormatTarget& t,
                const ::oadr2b::oadr::BaseUnitType& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::customUnit (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    customUnit (::xercesc::DOMDocument& d,
                const ::oadr2b::oadr::BaseUnitType& s,
                ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::BaseUnitType) == typeid (s))
      {
        if (n.name () == "customUnit" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "customUnit",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "customUnit",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    customUnit (const ::oadr2b::oadr::BaseUnitType& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::BaseUnitType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "customUnit",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "customUnit",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::customUnit (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::oadr2b::oadr::CurrentType >
    _xsd_current_element_serializer_init (
      "itemBase",
      "http://docs.oasis-open.org/ns/emix/2011/06",
      "current",
      "http://openadr.org/oadr-2.0b/2012/07");


    void
    current (::std::ostream& o,
             const ::oadr2b::oadr::CurrentType& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::current (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    current (::std::ostream& o,
             const ::oadr2b::oadr::CurrentType& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::current (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    current (::std::ostream& o,
             const ::oadr2b::oadr::CurrentType& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::current (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    current (::xercesc::XMLFormatTarget& t,
             const ::oadr2b::oadr::CurrentType& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::current (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    current (::xercesc::XMLFormatTarget& t,
             const ::oadr2b::oadr::CurrentType& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::current (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    current (::xercesc::XMLFormatTarget& t,
             const ::oadr2b::oadr::CurrentType& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::current (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    current (::xercesc::DOMDocument& d,
             const ::oadr2b::oadr::CurrentType& s,
             ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::CurrentType) == typeid (s))
      {
        if (n.name () == "current" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "current",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "current",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    current (const ::oadr2b::oadr::CurrentType& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::CurrentType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "current",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "current",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::current (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::oadr2b::oadr::currencyType >
    _xsd_currency_element_serializer_init (
      "itemBase",
      "http://docs.oasis-open.org/ns/emix/2011/06",
      "currency",
      "http://openadr.org/oadr-2.0b/2012/07");


    void
    currency (::std::ostream& o,
              const ::oadr2b::oadr::currencyType& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::currency (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    currency (::std::ostream& o,
              const ::oadr2b::oadr::currencyType& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::currency (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    currency (::std::ostream& o,
              const ::oadr2b::oadr::currencyType& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::currency (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    currency (::xercesc::XMLFormatTarget& t,
              const ::oadr2b::oadr::currencyType& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::currency (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    currency (::xercesc::XMLFormatTarget& t,
              const ::oadr2b::oadr::currencyType& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::currency (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    currency (::xercesc::XMLFormatTarget& t,
              const ::oadr2b::oadr::currencyType& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::currency (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    currency (::xercesc::DOMDocument& d,
              const ::oadr2b::oadr::currencyType& s,
              ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::currencyType) == typeid (s))
      {
        if (n.name () == "currency" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "currency",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "currency",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    currency (const ::oadr2b::oadr::currencyType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::currencyType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "currency",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "currency",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::currency (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::oadr2b::oadr::currencyType >
    _xsd_currencyPerKWh_element_serializer_init (
      "itemBase",
      "http://docs.oasis-open.org/ns/emix/2011/06",
      "currencyPerKWh",
      "http://openadr.org/oadr-2.0b/2012/07");


    void
    currencyPerKWh (::std::ostream& o,
                    const ::oadr2b::oadr::currencyType& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::currencyPerKWh (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    currencyPerKWh (::std::ostream& o,
                    const ::oadr2b::oadr::currencyType& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::currencyPerKWh (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    currencyPerKWh (::std::ostream& o,
                    const ::oadr2b::oadr::currencyType& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::currencyPerKWh (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    currencyPerKWh (::xercesc::XMLFormatTarget& t,
                    const ::oadr2b::oadr::currencyType& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::currencyPerKWh (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    currencyPerKWh (::xercesc::XMLFormatTarget& t,
                    const ::oadr2b::oadr::currencyType& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::currencyPerKWh (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    currencyPerKWh (::xercesc::XMLFormatTarget& t,
                    const ::oadr2b::oadr::currencyType& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::currencyPerKWh (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    currencyPerKWh (::xercesc::DOMDocument& d,
                    const ::oadr2b::oadr::currencyType& s,
                    ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::currencyType) == typeid (s))
      {
        if (n.name () == "currencyPerKWh" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "currencyPerKWh",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "currencyPerKWh",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    currencyPerKWh (const ::oadr2b::oadr::currencyType& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::currencyType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "currencyPerKWh",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "currencyPerKWh",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::currencyPerKWh (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::oadr2b::oadr::currencyType >
    _xsd_currencyPerKW_element_serializer_init (
      "itemBase",
      "http://docs.oasis-open.org/ns/emix/2011/06",
      "currencyPerKW",
      "http://openadr.org/oadr-2.0b/2012/07");


    void
    currencyPerKW (::std::ostream& o,
                   const ::oadr2b::oadr::currencyType& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::currencyPerKW (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    currencyPerKW (::std::ostream& o,
                   const ::oadr2b::oadr::currencyType& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::currencyPerKW (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    currencyPerKW (::std::ostream& o,
                   const ::oadr2b::oadr::currencyType& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::currencyPerKW (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    currencyPerKW (::xercesc::XMLFormatTarget& t,
                   const ::oadr2b::oadr::currencyType& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::currencyPerKW (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    currencyPerKW (::xercesc::XMLFormatTarget& t,
                   const ::oadr2b::oadr::currencyType& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::currencyPerKW (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    currencyPerKW (::xercesc::XMLFormatTarget& t,
                   const ::oadr2b::oadr::currencyType& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::currencyPerKW (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    currencyPerKW (::xercesc::DOMDocument& d,
                   const ::oadr2b::oadr::currencyType& s,
                   ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::currencyType) == typeid (s))
      {
        if (n.name () == "currencyPerKW" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "currencyPerKW",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "currencyPerKW",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    currencyPerKW (const ::oadr2b::oadr::currencyType& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::currencyType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "currencyPerKW",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "currencyPerKW",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::currencyPerKW (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::oadr2b::oadr::currencyType >
    _xsd_currencyPerThm_element_serializer_init (
      "itemBase",
      "http://docs.oasis-open.org/ns/emix/2011/06",
      "currencyPerThm",
      "http://openadr.org/oadr-2.0b/2012/07");


    void
    currencyPerThm (::std::ostream& o,
                    const ::oadr2b::oadr::currencyType& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::currencyPerThm (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    currencyPerThm (::std::ostream& o,
                    const ::oadr2b::oadr::currencyType& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::currencyPerThm (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    currencyPerThm (::std::ostream& o,
                    const ::oadr2b::oadr::currencyType& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::currencyPerThm (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    currencyPerThm (::xercesc::XMLFormatTarget& t,
                    const ::oadr2b::oadr::currencyType& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::currencyPerThm (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    currencyPerThm (::xercesc::XMLFormatTarget& t,
                    const ::oadr2b::oadr::currencyType& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::currencyPerThm (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    currencyPerThm (::xercesc::XMLFormatTarget& t,
                    const ::oadr2b::oadr::currencyType& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::currencyPerThm (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    currencyPerThm (::xercesc::DOMDocument& d,
                    const ::oadr2b::oadr::currencyType& s,
                    ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::currencyType) == typeid (s))
      {
        if (n.name () == "currencyPerThm" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "currencyPerThm",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "currencyPerThm",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    currencyPerThm (const ::oadr2b::oadr::currencyType& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::currencyType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "currencyPerThm",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "currencyPerThm",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::currencyPerThm (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::oadr2b::oadr::FrequencyType >
    _xsd_frequency_element_serializer_init (
      "itemBase",
      "http://docs.oasis-open.org/ns/emix/2011/06",
      "frequency",
      "http://openadr.org/oadr-2.0b/2012/07");


    void
    frequency (::std::ostream& o,
               const ::oadr2b::oadr::FrequencyType& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::frequency (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    frequency (::std::ostream& o,
               const ::oadr2b::oadr::FrequencyType& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::frequency (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    frequency (::std::ostream& o,
               const ::oadr2b::oadr::FrequencyType& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::frequency (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    frequency (::xercesc::XMLFormatTarget& t,
               const ::oadr2b::oadr::FrequencyType& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::frequency (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    frequency (::xercesc::XMLFormatTarget& t,
               const ::oadr2b::oadr::FrequencyType& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::frequency (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    frequency (::xercesc::XMLFormatTarget& t,
               const ::oadr2b::oadr::FrequencyType& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::frequency (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    frequency (::xercesc::DOMDocument& d,
               const ::oadr2b::oadr::FrequencyType& s,
               ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::FrequencyType) == typeid (s))
      {
        if (n.name () == "frequency" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "frequency",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "frequency",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    frequency (const ::oadr2b::oadr::FrequencyType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::FrequencyType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "frequency",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "frequency",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::frequency (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::oadr2b::oadr::ThermType >
    _xsd_Therm_element_serializer_init (
      "itemBase",
      "http://docs.oasis-open.org/ns/emix/2011/06",
      "Therm",
      "http://openadr.org/oadr-2.0b/2012/07");


    void
    Therm (::std::ostream& o,
           const ::oadr2b::oadr::ThermType& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::Therm (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    Therm (::std::ostream& o,
           const ::oadr2b::oadr::ThermType& s,
           ::xml_schema::error_handler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::Therm (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    Therm (::std::ostream& o,
           const ::oadr2b::oadr::ThermType& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::Therm (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    Therm (::xercesc::XMLFormatTarget& t,
           const ::oadr2b::oadr::ThermType& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::Therm (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    Therm (::xercesc::XMLFormatTarget& t,
           const ::oadr2b::oadr::ThermType& s,
           ::xml_schema::error_handler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::Therm (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    Therm (::xercesc::XMLFormatTarget& t,
           const ::oadr2b::oadr::ThermType& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::Therm (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    Therm (::xercesc::DOMDocument& d,
           const ::oadr2b::oadr::ThermType& s,
           ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::ThermType) == typeid (s))
      {
        if (n.name () == "Therm" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "Therm",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "Therm",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Therm (const ::oadr2b::oadr::ThermType& s,
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::ThermType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "Therm",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "Therm",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::Therm (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::oadr2b::oadr::temperatureType >
    _xsd_temperature_element_serializer_init (
      "itemBase",
      "http://docs.oasis-open.org/ns/emix/2011/06",
      "temperature",
      "http://openadr.org/oadr-2.0b/2012/07");


    void
    temperature (::std::ostream& o,
                 const ::oadr2b::oadr::temperatureType& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::temperature (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    temperature (::std::ostream& o,
                 const ::oadr2b::oadr::temperatureType& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::temperature (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    temperature (::std::ostream& o,
                 const ::oadr2b::oadr::temperatureType& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::temperature (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    temperature (::xercesc::XMLFormatTarget& t,
                 const ::oadr2b::oadr::temperatureType& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::temperature (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    temperature (::xercesc::XMLFormatTarget& t,
                 const ::oadr2b::oadr::temperatureType& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::temperature (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    temperature (::xercesc::XMLFormatTarget& t,
                 const ::oadr2b::oadr::temperatureType& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::temperature (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    temperature (::xercesc::DOMDocument& d,
                 const ::oadr2b::oadr::temperatureType& s,
                 ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::temperatureType) == typeid (s))
      {
        if (n.name () == "temperature" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "temperature",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "temperature",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    temperature (const ::oadr2b::oadr::temperatureType& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::temperatureType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "temperature",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "temperature",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::temperature (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::oadr2b::oadr::pulseCountType >
    _xsd_pulseCount_element_serializer_init (
      "itemBase",
      "http://docs.oasis-open.org/ns/emix/2011/06",
      "pulseCount",
      "http://openadr.org/oadr-2.0b/2012/07");


    void
    pulseCount (::std::ostream& o,
                const ::oadr2b::oadr::pulseCountType& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::pulseCount (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    pulseCount (::std::ostream& o,
                const ::oadr2b::oadr::pulseCountType& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::pulseCount (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    pulseCount (::std::ostream& o,
                const ::oadr2b::oadr::pulseCountType& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::pulseCount (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    pulseCount (::xercesc::XMLFormatTarget& t,
                const ::oadr2b::oadr::pulseCountType& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::pulseCount (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    pulseCount (::xercesc::XMLFormatTarget& t,
                const ::oadr2b::oadr::pulseCountType& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::pulseCount (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    pulseCount (::xercesc::XMLFormatTarget& t,
                const ::oadr2b::oadr::pulseCountType& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::pulseCount (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    pulseCount (::xercesc::DOMDocument& d,
                const ::oadr2b::oadr::pulseCountType& s,
                ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::pulseCountType) == typeid (s))
      {
        if (n.name () == "pulseCount" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "pulseCount",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "pulseCount",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    pulseCount (const ::oadr2b::oadr::pulseCountType& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::pulseCountType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "pulseCount",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "pulseCount",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::pulseCount (*d, s, f);
      return d;
    }

    void
    pulseFactor (::std::ostream& o,
                 const ::xml_schema::float_& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::pulseFactor (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    pulseFactor (::std::ostream& o,
                 const ::xml_schema::float_& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::pulseFactor (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    pulseFactor (::std::ostream& o,
                 const ::xml_schema::float_& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::pulseFactor (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    pulseFactor (::xercesc::XMLFormatTarget& t,
                 const ::xml_schema::float_& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::pulseFactor (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    pulseFactor (::xercesc::XMLFormatTarget& t,
                 const ::xml_schema::float_& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::pulseFactor (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    pulseFactor (::xercesc::XMLFormatTarget& t,
                 const ::xml_schema::float_& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::pulseFactor (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    pulseFactor (::xercesc::DOMDocument& d,
                 const ::xml_schema::float_& s,
                 ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "pulseFactor" &&
          n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "pulseFactor",
          "http://openadr.org/oadr-2.0b/2012/07");
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    pulseFactor (const ::xml_schema::float_& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "pulseFactor",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f));

      ::oadr2b::oadr::pulseFactor (*d, s, f);
      return d;
    }

    void
    oadrReportRequest (::std::ostream& o,
                       const ::oadr2b::oadr::oadrReportRequestType& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrReportRequest (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrReportRequest (::std::ostream& o,
                       const ::oadr2b::oadr::oadrReportRequestType& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrReportRequest (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrReportRequest (::std::ostream& o,
                       const ::oadr2b::oadr::oadrReportRequestType& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrReportRequest (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrReportRequest (::xercesc::XMLFormatTarget& t,
                       const ::oadr2b::oadr::oadrReportRequestType& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrReportRequest (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrReportRequest (::xercesc::XMLFormatTarget& t,
                       const ::oadr2b::oadr::oadrReportRequestType& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrReportRequest (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrReportRequest (::xercesc::XMLFormatTarget& t,
                       const ::oadr2b::oadr::oadrReportRequestType& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrReportRequest (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrReportRequest (::xercesc::DOMDocument& d,
                       const ::oadr2b::oadr::oadrReportRequestType& s,
                       ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::oadrReportRequestType) == typeid (s))
      {
        if (n.name () == "oadrReportRequest" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrReportRequest",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrReportRequest",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrReportRequest (const ::oadr2b::oadr::oadrReportRequestType& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::oadrReportRequestType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrReportRequest",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrReportRequest",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrReportRequest (*d, s, f);
      return d;
    }

    void
    oadrReport (::std::ostream& o,
                const ::oadr2b::oadr::oadrReportType& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrReport (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrReport (::std::ostream& o,
                const ::oadr2b::oadr::oadrReportType& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrReport (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrReport (::std::ostream& o,
                const ::oadr2b::oadr::oadrReportType& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrReport (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrReport (::xercesc::XMLFormatTarget& t,
                const ::oadr2b::oadr::oadrReportType& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrReport (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrReport (::xercesc::XMLFormatTarget& t,
                const ::oadr2b::oadr::oadrReportType& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrReport (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrReport (::xercesc::XMLFormatTarget& t,
                const ::oadr2b::oadr::oadrReportType& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrReport (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrReport (::xercesc::DOMDocument& d,
                const ::oadr2b::oadr::oadrReportType& s,
                ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::oadrReportType) == typeid (s))
      {
        if (n.name () == "oadrReport" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrReport",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrReport (const ::oadr2b::oadr::oadrReportType& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::oadrReportType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrReport",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrReport (*d, s, f);
      return d;
    }

    void
    oadrReportDescription (::std::ostream& o,
                           const ::oadr2b::oadr::oadrReportDescriptionType& s,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrReportDescription (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrReportDescription (::std::ostream& o,
                           const ::oadr2b::oadr::oadrReportDescriptionType& s,
                           ::xml_schema::error_handler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrReportDescription (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrReportDescription (::std::ostream& o,
                           const ::oadr2b::oadr::oadrReportDescriptionType& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrReportDescription (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrReportDescription (::xercesc::XMLFormatTarget& t,
                           const ::oadr2b::oadr::oadrReportDescriptionType& s,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrReportDescription (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrReportDescription (::xercesc::XMLFormatTarget& t,
                           const ::oadr2b::oadr::oadrReportDescriptionType& s,
                           ::xml_schema::error_handler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrReportDescription (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrReportDescription (::xercesc::XMLFormatTarget& t,
                           const ::oadr2b::oadr::oadrReportDescriptionType& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrReportDescription (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrReportDescription (::xercesc::DOMDocument& d,
                           const ::oadr2b::oadr::oadrReportDescriptionType& s,
                           ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::oadrReportDescriptionType) == typeid (s))
      {
        if (n.name () == "oadrReportDescription" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrReportDescription",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrReportDescription",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrReportDescription (const ::oadr2b::oadr::oadrReportDescriptionType& s,
                           const ::xml_schema::namespace_infomap& m,
                           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::oadrReportDescriptionType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrReportDescription",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrReportDescription",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrReportDescription (*d, s, f);
      return d;
    }

    void
    oadrSamplingRate (::std::ostream& o,
                      const ::oadr2b::oadr::oadrSamplingRateType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrSamplingRate (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrSamplingRate (::std::ostream& o,
                      const ::oadr2b::oadr::oadrSamplingRateType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrSamplingRate (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrSamplingRate (::std::ostream& o,
                      const ::oadr2b::oadr::oadrSamplingRateType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrSamplingRate (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrSamplingRate (::xercesc::XMLFormatTarget& t,
                      const ::oadr2b::oadr::oadrSamplingRateType& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrSamplingRate (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrSamplingRate (::xercesc::XMLFormatTarget& t,
                      const ::oadr2b::oadr::oadrSamplingRateType& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrSamplingRate (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrSamplingRate (::xercesc::XMLFormatTarget& t,
                      const ::oadr2b::oadr::oadrSamplingRateType& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrSamplingRate (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrSamplingRate (::xercesc::DOMDocument& d,
                      const ::oadr2b::oadr::oadrSamplingRateType& s,
                      ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::oadrSamplingRateType) == typeid (s))
      {
        if (n.name () == "oadrSamplingRate" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrSamplingRate",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrSamplingRate",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrSamplingRate (const ::oadr2b::oadr::oadrSamplingRateType& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::oadrSamplingRateType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrSamplingRate",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrSamplingRate",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrSamplingRate (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::oadr2b::oadr::oadrPayloadResourceStatusType >
    _xsd_oadrPayloadResourceStatus_element_serializer_init (
      "payloadBase",
      "http://docs.oasis-open.org/ns/energyinterop/201110",
      "oadrPayloadResourceStatus",
      "http://openadr.org/oadr-2.0b/2012/07");


    void
    oadrPayloadResourceStatus (::std::ostream& o,
                               const ::oadr2b::oadr::oadrPayloadResourceStatusType& s,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrPayloadResourceStatus (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrPayloadResourceStatus (::std::ostream& o,
                               const ::oadr2b::oadr::oadrPayloadResourceStatusType& s,
                               ::xml_schema::error_handler& h,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrPayloadResourceStatus (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrPayloadResourceStatus (::std::ostream& o,
                               const ::oadr2b::oadr::oadrPayloadResourceStatusType& s,
                               ::xercesc::DOMErrorHandler& h,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrPayloadResourceStatus (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrPayloadResourceStatus (::xercesc::XMLFormatTarget& t,
                               const ::oadr2b::oadr::oadrPayloadResourceStatusType& s,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrPayloadResourceStatus (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrPayloadResourceStatus (::xercesc::XMLFormatTarget& t,
                               const ::oadr2b::oadr::oadrPayloadResourceStatusType& s,
                               ::xml_schema::error_handler& h,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrPayloadResourceStatus (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrPayloadResourceStatus (::xercesc::XMLFormatTarget& t,
                               const ::oadr2b::oadr::oadrPayloadResourceStatusType& s,
                               ::xercesc::DOMErrorHandler& h,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::string& e,
                               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrPayloadResourceStatus (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrPayloadResourceStatus (::xercesc::DOMDocument& d,
                               const ::oadr2b::oadr::oadrPayloadResourceStatusType& s,
                               ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::oadrPayloadResourceStatusType) == typeid (s))
      {
        if (n.name () == "oadrPayloadResourceStatus" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrPayloadResourceStatus",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrPayloadResourceStatus",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrPayloadResourceStatus (const ::oadr2b::oadr::oadrPayloadResourceStatusType& s,
                               const ::xml_schema::namespace_infomap& m,
                               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::oadrPayloadResourceStatusType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrPayloadResourceStatus",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrPayloadResourceStatus",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrPayloadResourceStatus (*d, s, f);
      return d;
    }

    void
    oadrLoadControlState (::std::ostream& o,
                          const ::oadr2b::oadr::oadrLoadControlStateType& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrLoadControlState (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrLoadControlState (::std::ostream& o,
                          const ::oadr2b::oadr::oadrLoadControlStateType& s,
                          ::xml_schema::error_handler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrLoadControlState (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrLoadControlState (::std::ostream& o,
                          const ::oadr2b::oadr::oadrLoadControlStateType& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrLoadControlState (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrLoadControlState (::xercesc::XMLFormatTarget& t,
                          const ::oadr2b::oadr::oadrLoadControlStateType& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrLoadControlState (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrLoadControlState (::xercesc::XMLFormatTarget& t,
                          const ::oadr2b::oadr::oadrLoadControlStateType& s,
                          ::xml_schema::error_handler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrLoadControlState (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrLoadControlState (::xercesc::XMLFormatTarget& t,
                          const ::oadr2b::oadr::oadrLoadControlStateType& s,
                          ::xercesc::DOMErrorHandler& h,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrLoadControlState (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrLoadControlState (::xercesc::DOMDocument& d,
                          const ::oadr2b::oadr::oadrLoadControlStateType& s,
                          ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::oadrLoadControlStateType) == typeid (s))
      {
        if (n.name () == "oadrLoadControlState" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrLoadControlState",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrLoadControlState",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrLoadControlState (const ::oadr2b::oadr::oadrLoadControlStateType& s,
                          const ::xml_schema::namespace_infomap& m,
                          ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::oadrLoadControlStateType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrLoadControlState",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrLoadControlState",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrLoadControlState (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::oadr2b::oadr::oadrGBStreamPayloadBase >
    _xsd_oadrGBPayload_element_serializer_init (
      "streamPayloadBase",
      "urn:ietf:params:xml:ns:icalendar-2.0:stream",
      "oadrGBPayload",
      "http://openadr.org/oadr-2.0b/2012/07");


    void
    oadrGBPayload (::std::ostream& o,
                   const ::oadr2b::oadr::oadrGBStreamPayloadBase& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrGBPayload (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrGBPayload (::std::ostream& o,
                   const ::oadr2b::oadr::oadrGBStreamPayloadBase& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrGBPayload (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrGBPayload (::std::ostream& o,
                   const ::oadr2b::oadr::oadrGBStreamPayloadBase& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrGBPayload (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrGBPayload (::xercesc::XMLFormatTarget& t,
                   const ::oadr2b::oadr::oadrGBStreamPayloadBase& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrGBPayload (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrGBPayload (::xercesc::XMLFormatTarget& t,
                   const ::oadr2b::oadr::oadrGBStreamPayloadBase& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrGBPayload (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrGBPayload (::xercesc::XMLFormatTarget& t,
                   const ::oadr2b::oadr::oadrGBStreamPayloadBase& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrGBPayload (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrGBPayload (::xercesc::DOMDocument& d,
                   const ::oadr2b::oadr::oadrGBStreamPayloadBase& s,
                   ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::oadrGBStreamPayloadBase) == typeid (s))
      {
        if (n.name () == "oadrGBPayload" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrGBPayload",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrGBPayload",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrGBPayload (const ::oadr2b::oadr::oadrGBStreamPayloadBase& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::oadrGBStreamPayloadBase) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrGBPayload",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrGBPayload",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrGBPayload (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::oadr2b::oadr::oadrGBItemBase >
    _xsd_oadrGBDataDescription_element_serializer_init (
      "itemBase",
      "http://docs.oasis-open.org/ns/emix/2011/06",
      "oadrGBDataDescription",
      "http://openadr.org/oadr-2.0b/2012/07");


    void
    oadrGBDataDescription (::std::ostream& o,
                           const ::oadr2b::oadr::oadrGBItemBase& s,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrGBDataDescription (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrGBDataDescription (::std::ostream& o,
                           const ::oadr2b::oadr::oadrGBItemBase& s,
                           ::xml_schema::error_handler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrGBDataDescription (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrGBDataDescription (::std::ostream& o,
                           const ::oadr2b::oadr::oadrGBItemBase& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrGBDataDescription (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrGBDataDescription (::xercesc::XMLFormatTarget& t,
                           const ::oadr2b::oadr::oadrGBItemBase& s,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrGBDataDescription (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrGBDataDescription (::xercesc::XMLFormatTarget& t,
                           const ::oadr2b::oadr::oadrGBItemBase& s,
                           ::xml_schema::error_handler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrGBDataDescription (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrGBDataDescription (::xercesc::XMLFormatTarget& t,
                           const ::oadr2b::oadr::oadrGBItemBase& s,
                           ::xercesc::DOMErrorHandler& h,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrGBDataDescription (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrGBDataDescription (::xercesc::DOMDocument& d,
                           const ::oadr2b::oadr::oadrGBItemBase& s,
                           ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::oadrGBItemBase) == typeid (s))
      {
        if (n.name () == "oadrGBDataDescription" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrGBDataDescription",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrGBDataDescription",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrGBDataDescription (const ::oadr2b::oadr::oadrGBItemBase& s,
                           const ::xml_schema::namespace_infomap& m,
                           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::oadrGBItemBase) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrGBDataDescription",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrGBDataDescription",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrGBDataDescription (*d, s, f);
      return d;
    }

    void
    oadrDeviceClass (::std::ostream& o,
                     const ::oadr2b::ei::EiTargetType& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrDeviceClass (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrDeviceClass (::std::ostream& o,
                     const ::oadr2b::ei::EiTargetType& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrDeviceClass (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrDeviceClass (::std::ostream& o,
                     const ::oadr2b::ei::EiTargetType& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrDeviceClass (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrDeviceClass (::xercesc::XMLFormatTarget& t,
                     const ::oadr2b::ei::EiTargetType& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrDeviceClass (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrDeviceClass (::xercesc::XMLFormatTarget& t,
                     const ::oadr2b::ei::EiTargetType& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrDeviceClass (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrDeviceClass (::xercesc::XMLFormatTarget& t,
                     const ::oadr2b::ei::EiTargetType& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrDeviceClass (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrDeviceClass (::xercesc::DOMDocument& d,
                     const ::oadr2b::ei::EiTargetType& s,
                     ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::ei::EiTargetType) == typeid (s))
      {
        if (n.name () == "oadrDeviceClass" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrDeviceClass",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrDeviceClass",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrDeviceClass (const ::oadr2b::ei::EiTargetType& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::ei::EiTargetType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrDeviceClass",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrDeviceClass",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrDeviceClass (*d, s, f);
      return d;
    }

    static
    const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::oadr2b::oadr::oadrReportPayloadType >
    _xsd_oadrReportPayload_element_serializer_init (
      "streamPayloadBase",
      "urn:ietf:params:xml:ns:icalendar-2.0:stream",
      "oadrReportPayload",
      "http://openadr.org/oadr-2.0b/2012/07");


    void
    oadrReportPayload (::std::ostream& o,
                       const ::oadr2b::oadr::oadrReportPayloadType& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrReportPayload (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrReportPayload (::std::ostream& o,
                       const ::oadr2b::oadr::oadrReportPayloadType& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrReportPayload (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrReportPayload (::std::ostream& o,
                       const ::oadr2b::oadr::oadrReportPayloadType& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrReportPayload (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrReportPayload (::xercesc::XMLFormatTarget& t,
                       const ::oadr2b::oadr::oadrReportPayloadType& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrReportPayload (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrReportPayload (::xercesc::XMLFormatTarget& t,
                       const ::oadr2b::oadr::oadrReportPayloadType& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrReportPayload (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrReportPayload (::xercesc::XMLFormatTarget& t,
                       const ::oadr2b::oadr::oadrReportPayloadType& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrReportPayload (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrReportPayload (::xercesc::DOMDocument& d,
                       const ::oadr2b::oadr::oadrReportPayloadType& s,
                       ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::oadrReportPayloadType) == typeid (s))
      {
        if (n.name () == "oadrReportPayload" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrReportPayload",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrReportPayload",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrReportPayload (const ::oadr2b::oadr::oadrReportPayloadType& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::oadrReportPayloadType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrReportPayload",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrReportPayload",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrReportPayload (*d, s, f);
      return d;
    }

    void
    oadrDataQuality (::std::ostream& o,
                     const ::oadr2b::oadr::oadrDataQualityTypeType& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrDataQuality (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrDataQuality (::std::ostream& o,
                     const ::oadr2b::oadr::oadrDataQualityTypeType& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrDataQuality (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrDataQuality (::std::ostream& o,
                     const ::oadr2b::oadr::oadrDataQualityTypeType& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrDataQuality (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrDataQuality (::xercesc::XMLFormatTarget& t,
                     const ::oadr2b::oadr::oadrDataQualityTypeType& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrDataQuality (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    oadrDataQuality (::xercesc::XMLFormatTarget& t,
                     const ::oadr2b::oadr::oadrDataQualityTypeType& s,
                     ::xml_schema::error_handler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrDataQuality (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrDataQuality (::xercesc::XMLFormatTarget& t,
                     const ::oadr2b::oadr::oadrDataQualityTypeType& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::oadr2b::oadr::oadrDataQuality (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    oadrDataQuality (::xercesc::DOMDocument& d,
                     const ::oadr2b::oadr::oadrDataQualityTypeType& s,
                     ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::oadr2b::oadr::oadrDataQualityTypeType) == typeid (s))
      {
        if (n.name () == "oadrDataQuality" &&
            n.namespace_ () == "http://openadr.org/oadr-2.0b/2012/07")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "oadrDataQuality",
            "http://openadr.org/oadr-2.0b/2012/07");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrDataQuality",
          "http://openadr.org/oadr-2.0b/2012/07",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    oadrDataQuality (const ::oadr2b::oadr::oadrDataQualityTypeType& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::oadr2b::oadr::oadrDataQualityTypeType) == typeid (s))
      {
        d = ::xsd::cxx::xml::dom::serialize< char > (
          "oadrDataQuality",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, f);
      }
      else
      {
        d = ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ().serialize (
          "oadrDataQuality",
          "http://openadr.org/oadr-2.0b/2012/07",
          m, s, f);
      }

      ::oadr2b::oadr::oadrDataQuality (*d, s, f);
      return d;
    }
  }
}

// Begin epilogue.
//
//
// End epilogue.

#include <xsd/cxx/post.hxx>

