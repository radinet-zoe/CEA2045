// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#include <xsd/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include "eiEventBaselineType.hxx"

#include "dtstart.hxx"

#include "DurationPropType.hxx"

#include "intervals.hxx"

#include "ItemBaseType.hxx"

namespace oadr2b
{
  namespace ei
  {
    // eiEventBaselineType
    // 

    const eiEventBaselineType::dtstart_type& eiEventBaselineType::
    dtstart () const
    {
      return this->dtstart_.get ();
    }

    eiEventBaselineType::dtstart_type& eiEventBaselineType::
    dtstart ()
    {
      return this->dtstart_.get ();
    }

    void eiEventBaselineType::
    dtstart (const dtstart_type& x)
    {
      this->dtstart_.set (x);
    }

    void eiEventBaselineType::
    dtstart (::std::auto_ptr< dtstart_type > x)
    {
      this->dtstart_.set (x);
    }

    const eiEventBaselineType::duration_type& eiEventBaselineType::
    duration () const
    {
      return this->duration_.get ();
    }

    eiEventBaselineType::duration_type& eiEventBaselineType::
    duration ()
    {
      return this->duration_.get ();
    }

    void eiEventBaselineType::
    duration (const duration_type& x)
    {
      this->duration_.set (x);
    }

    void eiEventBaselineType::
    duration (::std::auto_ptr< duration_type > x)
    {
      this->duration_.set (x);
    }

    const eiEventBaselineType::intervals_type& eiEventBaselineType::
    intervals () const
    {
      return this->intervals_.get ();
    }

    eiEventBaselineType::intervals_type& eiEventBaselineType::
    intervals ()
    {
      return this->intervals_.get ();
    }

    void eiEventBaselineType::
    intervals (const intervals_type& x)
    {
      this->intervals_.set (x);
    }

    void eiEventBaselineType::
    intervals (::std::auto_ptr< intervals_type > x)
    {
      this->intervals_.set (x);
    }

    const eiEventBaselineType::baselineID_type& eiEventBaselineType::
    baselineID () const
    {
      return this->baselineID_.get ();
    }

    eiEventBaselineType::baselineID_type& eiEventBaselineType::
    baselineID ()
    {
      return this->baselineID_.get ();
    }

    void eiEventBaselineType::
    baselineID (const baselineID_type& x)
    {
      this->baselineID_.set (x);
    }

    void eiEventBaselineType::
    baselineID (::std::auto_ptr< baselineID_type > x)
    {
      this->baselineID_.set (x);
    }

    const eiEventBaselineType::resourceID_sequence& eiEventBaselineType::
    resourceID () const
    {
      return this->resourceID_;
    }

    eiEventBaselineType::resourceID_sequence& eiEventBaselineType::
    resourceID ()
    {
      return this->resourceID_;
    }

    void eiEventBaselineType::
    resourceID (const resourceID_sequence& s)
    {
      this->resourceID_ = s;
    }

    const eiEventBaselineType::baselineName_type& eiEventBaselineType::
    baselineName () const
    {
      return this->baselineName_.get ();
    }

    eiEventBaselineType::baselineName_type& eiEventBaselineType::
    baselineName ()
    {
      return this->baselineName_.get ();
    }

    void eiEventBaselineType::
    baselineName (const baselineName_type& x)
    {
      this->baselineName_.set (x);
    }

    void eiEventBaselineType::
    baselineName (::std::auto_ptr< baselineName_type > x)
    {
      this->baselineName_.set (x);
    }

    const eiEventBaselineType::itemBase_optional& eiEventBaselineType::
    itemBase () const
    {
      return this->itemBase_;
    }

    eiEventBaselineType::itemBase_optional& eiEventBaselineType::
    itemBase ()
    {
      return this->itemBase_;
    }

    void eiEventBaselineType::
    itemBase (const itemBase_type& x)
    {
      this->itemBase_.set (x);
    }

    void eiEventBaselineType::
    itemBase (const itemBase_optional& x)
    {
      this->itemBase_ = x;
    }

    void eiEventBaselineType::
    itemBase (::std::auto_ptr< itemBase_type > x)
    {
      this->itemBase_.set (x);
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace oadr2b
{
  namespace ei
  {
    // eiEventBaselineType
    //

    eiEventBaselineType::
    eiEventBaselineType (const dtstart_type& dtstart,
                         const duration_type& duration,
                         const intervals_type& intervals,
                         const baselineID_type& baselineID,
                         const baselineName_type& baselineName)
    : ::xml_schema::type (),
      dtstart_ (dtstart, this),
      duration_ (duration, this),
      intervals_ (intervals, this),
      baselineID_ (baselineID, this),
      resourceID_ (this),
      baselineName_ (baselineName, this),
      itemBase_ (this)
    {
    }

    eiEventBaselineType::
    eiEventBaselineType (::std::auto_ptr< dtstart_type > dtstart,
                         ::std::auto_ptr< duration_type > duration,
                         ::std::auto_ptr< intervals_type > intervals,
                         const baselineID_type& baselineID,
                         const baselineName_type& baselineName)
    : ::xml_schema::type (),
      dtstart_ (dtstart, this),
      duration_ (duration, this),
      intervals_ (intervals, this),
      baselineID_ (baselineID, this),
      resourceID_ (this),
      baselineName_ (baselineName, this),
      itemBase_ (this)
    {
    }

    eiEventBaselineType::
    eiEventBaselineType (::std::auto_ptr< dtstart_type > dtstart,
                         ::std::auto_ptr< duration_type > duration,
                         ::std::auto_ptr< intervals_type > intervals,
                         ::std::auto_ptr< baselineID_type > baselineID,
                         ::std::auto_ptr< baselineName_type > baselineName)
    : ::xml_schema::type (),
      dtstart_ (dtstart, this),
      duration_ (duration, this),
      intervals_ (intervals, this),
      baselineID_ (baselineID, this),
      resourceID_ (this),
      baselineName_ (baselineName, this),
      itemBase_ (this)
    {
    }

    eiEventBaselineType::
    eiEventBaselineType (const eiEventBaselineType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      dtstart_ (x.dtstart_, f, this),
      duration_ (x.duration_, f, this),
      intervals_ (x.intervals_, f, this),
      baselineID_ (x.baselineID_, f, this),
      resourceID_ (x.resourceID_, f, this),
      baselineName_ (x.baselineName_, f, this),
      itemBase_ (x.itemBase_, f, this)
    {
    }

    eiEventBaselineType::
    eiEventBaselineType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      dtstart_ (this),
      duration_ (this),
      intervals_ (this),
      baselineID_ (this),
      resourceID_ (this),
      baselineName_ (this),
      itemBase_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void eiEventBaselineType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // dtstart
        //
        if (n.name () == "dtstart" && n.namespace_ () == "urn:ietf:params:xml:ns:icalendar-2.0")
        {
          ::std::auto_ptr< dtstart_type > r (
            dtstart_traits::create (i, f, this));

          if (!dtstart_.present ())
          {
            this->dtstart_.set (r);
            continue;
          }
        }

        // duration
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "duration",
              "urn:ietf:params:xml:ns:icalendar-2.0",
              &::xsd::cxx::tree::factory_impl< duration_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!duration_.present ())
            {
              ::std::auto_ptr< duration_type > r (
                dynamic_cast< duration_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->duration_.set (r);
              continue;
            }
          }
        }

        // intervals
        //
        if (n.name () == "intervals" && n.namespace_ () == "urn:ietf:params:xml:ns:icalendar-2.0:stream")
        {
          ::std::auto_ptr< intervals_type > r (
            intervals_traits::create (i, f, this));

          if (!intervals_.present ())
          {
            this->intervals_.set (r);
            continue;
          }
        }

        // baselineID
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "baselineID",
              "http://docs.oasis-open.org/ns/energyinterop/201110",
              &::xsd::cxx::tree::factory_impl< baselineID_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!baselineID_.present ())
            {
              ::std::auto_ptr< baselineID_type > r (
                dynamic_cast< baselineID_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->baselineID_.set (r);
              continue;
            }
          }
        }

        // resourceID
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "resourceID",
              "http://docs.oasis-open.org/ns/energyinterop/201110",
              &::xsd::cxx::tree::factory_impl< resourceID_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< resourceID_type > r (
              dynamic_cast< resourceID_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->resourceID_.push_back (r);
            continue;
          }
        }

        // baselineName
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "baselineName",
              "http://docs.oasis-open.org/ns/energyinterop/201110",
              &::xsd::cxx::tree::factory_impl< baselineName_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!baselineName_.present ())
            {
              ::std::auto_ptr< baselineName_type > r (
                dynamic_cast< baselineName_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->baselineName_.set (r);
              continue;
            }
          }
        }

        // itemBase
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "itemBase",
              "http://docs.oasis-open.org/ns/emix/2011/06",
              &::xsd::cxx::tree::factory_impl< itemBase_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->itemBase_)
            {
              ::std::auto_ptr< itemBase_type > r (
                dynamic_cast< itemBase_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->itemBase_.set (r);
              continue;
            }
          }
        }

        break;
      }

      if (!dtstart_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "dtstart",
          "urn:ietf:params:xml:ns:icalendar-2.0");
      }

      if (!duration_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "duration",
          "urn:ietf:params:xml:ns:icalendar-2.0");
      }

      if (!intervals_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "intervals",
          "urn:ietf:params:xml:ns:icalendar-2.0:stream");
      }

      if (!baselineID_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "baselineID",
          "http://docs.oasis-open.org/ns/energyinterop/201110");
      }

      if (!baselineName_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "baselineName",
          "http://docs.oasis-open.org/ns/energyinterop/201110");
      }
    }

    eiEventBaselineType* eiEventBaselineType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class eiEventBaselineType (*this, f, c);
    }

    eiEventBaselineType& eiEventBaselineType::
    operator= (const eiEventBaselineType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->dtstart_ = x.dtstart_;
        this->duration_ = x.duration_;
        this->intervals_ = x.intervals_;
        this->baselineID_ = x.baselineID_;
        this->resourceID_ = x.resourceID_;
        this->baselineName_ = x.baselineName_;
        this->itemBase_ = x.itemBase_;
      }

      return *this;
    }

    eiEventBaselineType::
    ~eiEventBaselineType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, eiEventBaselineType >
    _xsd_eiEventBaselineType_type_factory_init (
      "eiEventBaselineType",
      "http://docs.oasis-open.org/ns/energyinterop/201110");
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace oadr2b
{
  namespace ei
  {
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace oadr2b
{
  namespace ei
  {
    void
    operator<< (::xercesc::DOMElement& e, const eiEventBaselineType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // dtstart
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "dtstart",
            "urn:ietf:params:xml:ns:icalendar-2.0",
            e));

        s << i.dtstart ();
      }

      // duration
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        const eiEventBaselineType::duration_type& x (i.duration ());
        if (typeid (eiEventBaselineType::duration_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "duration",
              "urn:ietf:params:xml:ns:icalendar-2.0",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "duration",
            "urn:ietf:params:xml:ns:icalendar-2.0",
            true, true, e, x);
      }

      // intervals
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "intervals",
            "urn:ietf:params:xml:ns:icalendar-2.0:stream",
            e));

        s << i.intervals ();
      }

      // baselineID
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        const eiEventBaselineType::baselineID_type& x (i.baselineID ());
        if (typeid (eiEventBaselineType::baselineID_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "baselineID",
              "http://docs.oasis-open.org/ns/energyinterop/201110",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "baselineID",
            "http://docs.oasis-open.org/ns/energyinterop/201110",
            false, true, e, x);
      }

      // resourceID
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        for (eiEventBaselineType::resourceID_const_iterator
             b (i.resourceID ().begin ()), n (i.resourceID ().end ());
             b != n; ++b)
        {
          if (typeid (eiEventBaselineType::resourceID_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "resourceID",
                "http://docs.oasis-open.org/ns/energyinterop/201110",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              "resourceID",
              "http://docs.oasis-open.org/ns/energyinterop/201110",
              true, true, e, *b);
        }
      }

      // baselineName
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        const eiEventBaselineType::baselineName_type& x (i.baselineName ());
        if (typeid (eiEventBaselineType::baselineName_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "baselineName",
              "http://docs.oasis-open.org/ns/energyinterop/201110",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "baselineName",
            "http://docs.oasis-open.org/ns/energyinterop/201110",
            false, true, e, x);
      }

      // itemBase
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        if (i.itemBase ())
        {
          const eiEventBaselineType::itemBase_type& x (*i.itemBase ());
          if (typeid (eiEventBaselineType::itemBase_type) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "itemBase",
                "http://docs.oasis-open.org/ns/emix/2011/06",
                e));

            s << x;
          }
          else
            tsm.serialize (
              "itemBase",
              "http://docs.oasis-open.org/ns/emix/2011/06",
              true, true, e, x);
        }
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, eiEventBaselineType >
    _xsd_eiEventBaselineType_type_serializer_init (
      "eiEventBaselineType",
      "http://docs.oasis-open.org/ns/energyinterop/201110");
  }
}

// Begin epilogue.
//
//
// End epilogue.

#include <xsd/cxx/post.hxx>

