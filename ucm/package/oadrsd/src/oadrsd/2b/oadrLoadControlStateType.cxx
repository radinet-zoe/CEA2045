// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#include <xsd/cxx/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include "oadrLoadControlStateType.hxx"

#include "oadrLoadControlStateTypeType.hxx"

namespace oadr2b
{
  namespace oadr
  {
    // oadrLoadControlStateType
    // 

    const oadrLoadControlStateType::oadrCapacity_optional& oadrLoadControlStateType::
    oadrCapacity () const
    {
      return this->oadrCapacity_;
    }

    oadrLoadControlStateType::oadrCapacity_optional& oadrLoadControlStateType::
    oadrCapacity ()
    {
      return this->oadrCapacity_;
    }

    void oadrLoadControlStateType::
    oadrCapacity (const oadrCapacity_type& x)
    {
      this->oadrCapacity_.set (x);
    }

    void oadrLoadControlStateType::
    oadrCapacity (const oadrCapacity_optional& x)
    {
      this->oadrCapacity_ = x;
    }

    void oadrLoadControlStateType::
    oadrCapacity (::std::auto_ptr< oadrCapacity_type > x)
    {
      this->oadrCapacity_.set (x);
    }

    const oadrLoadControlStateType::oadrLevelOffset_optional& oadrLoadControlStateType::
    oadrLevelOffset () const
    {
      return this->oadrLevelOffset_;
    }

    oadrLoadControlStateType::oadrLevelOffset_optional& oadrLoadControlStateType::
    oadrLevelOffset ()
    {
      return this->oadrLevelOffset_;
    }

    void oadrLoadControlStateType::
    oadrLevelOffset (const oadrLevelOffset_type& x)
    {
      this->oadrLevelOffset_.set (x);
    }

    void oadrLoadControlStateType::
    oadrLevelOffset (const oadrLevelOffset_optional& x)
    {
      this->oadrLevelOffset_ = x;
    }

    void oadrLoadControlStateType::
    oadrLevelOffset (::std::auto_ptr< oadrLevelOffset_type > x)
    {
      this->oadrLevelOffset_.set (x);
    }

    const oadrLoadControlStateType::oadrPercentOffset_optional& oadrLoadControlStateType::
    oadrPercentOffset () const
    {
      return this->oadrPercentOffset_;
    }

    oadrLoadControlStateType::oadrPercentOffset_optional& oadrLoadControlStateType::
    oadrPercentOffset ()
    {
      return this->oadrPercentOffset_;
    }

    void oadrLoadControlStateType::
    oadrPercentOffset (const oadrPercentOffset_type& x)
    {
      this->oadrPercentOffset_.set (x);
    }

    void oadrLoadControlStateType::
    oadrPercentOffset (const oadrPercentOffset_optional& x)
    {
      this->oadrPercentOffset_ = x;
    }

    void oadrLoadControlStateType::
    oadrPercentOffset (::std::auto_ptr< oadrPercentOffset_type > x)
    {
      this->oadrPercentOffset_.set (x);
    }

    const oadrLoadControlStateType::oadrSetPoint_optional& oadrLoadControlStateType::
    oadrSetPoint () const
    {
      return this->oadrSetPoint_;
    }

    oadrLoadControlStateType::oadrSetPoint_optional& oadrLoadControlStateType::
    oadrSetPoint ()
    {
      return this->oadrSetPoint_;
    }

    void oadrLoadControlStateType::
    oadrSetPoint (const oadrSetPoint_type& x)
    {
      this->oadrSetPoint_.set (x);
    }

    void oadrLoadControlStateType::
    oadrSetPoint (const oadrSetPoint_optional& x)
    {
      this->oadrSetPoint_ = x;
    }

    void oadrLoadControlStateType::
    oadrSetPoint (::std::auto_ptr< oadrSetPoint_type > x)
    {
      this->oadrSetPoint_.set (x);
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace oadr2b
{
  namespace oadr
  {
    // oadrLoadControlStateType
    //

    oadrLoadControlStateType::
    oadrLoadControlStateType ()
    : ::xml_schema::type (),
      oadrCapacity_ (this),
      oadrLevelOffset_ (this),
      oadrPercentOffset_ (this),
      oadrSetPoint_ (this)
    {
    }

    oadrLoadControlStateType::
    oadrLoadControlStateType (const oadrLoadControlStateType& x,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      oadrCapacity_ (x.oadrCapacity_, f, this),
      oadrLevelOffset_ (x.oadrLevelOffset_, f, this),
      oadrPercentOffset_ (x.oadrPercentOffset_, f, this),
      oadrSetPoint_ (x.oadrSetPoint_, f, this)
    {
    }

    oadrLoadControlStateType::
    oadrLoadControlStateType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      oadrCapacity_ (this),
      oadrLevelOffset_ (this),
      oadrPercentOffset_ (this),
      oadrSetPoint_ (this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void oadrLoadControlStateType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // oadrCapacity
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "oadrCapacity",
              "http://openadr.org/oadr-2.0b/2012/07",
              &::xsd::cxx::tree::factory_impl< oadrCapacity_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->oadrCapacity_)
            {
              ::std::auto_ptr< oadrCapacity_type > r (
                dynamic_cast< oadrCapacity_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->oadrCapacity_.set (r);
              continue;
            }
          }
        }

        // oadrLevelOffset
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "oadrLevelOffset",
              "http://openadr.org/oadr-2.0b/2012/07",
              &::xsd::cxx::tree::factory_impl< oadrLevelOffset_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->oadrLevelOffset_)
            {
              ::std::auto_ptr< oadrLevelOffset_type > r (
                dynamic_cast< oadrLevelOffset_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->oadrLevelOffset_.set (r);
              continue;
            }
          }
        }

        // oadrPercentOffset
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "oadrPercentOffset",
              "http://openadr.org/oadr-2.0b/2012/07",
              &::xsd::cxx::tree::factory_impl< oadrPercentOffset_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->oadrPercentOffset_)
            {
              ::std::auto_ptr< oadrPercentOffset_type > r (
                dynamic_cast< oadrPercentOffset_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->oadrPercentOffset_.set (r);
              continue;
            }
          }
        }

        // oadrSetPoint
        //
        {
          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ().create (
              "oadrSetPoint",
              "http://openadr.org/oadr-2.0b/2012/07",
              &::xsd::cxx::tree::factory_impl< oadrSetPoint_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->oadrSetPoint_)
            {
              ::std::auto_ptr< oadrSetPoint_type > r (
                dynamic_cast< oadrSetPoint_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->oadrSetPoint_.set (r);
              continue;
            }
          }
        }

        break;
      }
    }

    oadrLoadControlStateType* oadrLoadControlStateType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class oadrLoadControlStateType (*this, f, c);
    }

    oadrLoadControlStateType& oadrLoadControlStateType::
    operator= (const oadrLoadControlStateType& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::type& > (*this) = x;
        this->oadrCapacity_ = x.oadrCapacity_;
        this->oadrLevelOffset_ = x.oadrLevelOffset_;
        this->oadrPercentOffset_ = x.oadrPercentOffset_;
        this->oadrSetPoint_ = x.oadrSetPoint_;
      }

      return *this;
    }

    oadrLoadControlStateType::
    ~oadrLoadControlStateType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, oadrLoadControlStateType >
    _xsd_oadrLoadControlStateType_type_factory_init (
      "oadrLoadControlStateType",
      "http://openadr.org/oadr-2.0b/2012/07");
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace oadr2b
{
  namespace oadr
  {
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace oadr2b
{
  namespace oadr
  {
    void
    operator<< (::xercesc::DOMElement& e, const oadrLoadControlStateType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // oadrCapacity
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        if (i.oadrCapacity ())
        {
          const oadrLoadControlStateType::oadrCapacity_type& x (*i.oadrCapacity ());
          if (typeid (oadrLoadControlStateType::oadrCapacity_type) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "oadrCapacity",
                "http://openadr.org/oadr-2.0b/2012/07",
                e));

            s << x;
          }
          else
            tsm.serialize (
              "oadrCapacity",
              "http://openadr.org/oadr-2.0b/2012/07",
              false, true, e, x);
        }
      }

      // oadrLevelOffset
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        if (i.oadrLevelOffset ())
        {
          const oadrLoadControlStateType::oadrLevelOffset_type& x (*i.oadrLevelOffset ());
          if (typeid (oadrLoadControlStateType::oadrLevelOffset_type) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "oadrLevelOffset",
                "http://openadr.org/oadr-2.0b/2012/07",
                e));

            s << x;
          }
          else
            tsm.serialize (
              "oadrLevelOffset",
              "http://openadr.org/oadr-2.0b/2012/07",
              false, true, e, x);
        }
      }

      // oadrPercentOffset
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        if (i.oadrPercentOffset ())
        {
          const oadrLoadControlStateType::oadrPercentOffset_type& x (*i.oadrPercentOffset ());
          if (typeid (oadrLoadControlStateType::oadrPercentOffset_type) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "oadrPercentOffset",
                "http://openadr.org/oadr-2.0b/2012/07",
                e));

            s << x;
          }
          else
            tsm.serialize (
              "oadrPercentOffset",
              "http://openadr.org/oadr-2.0b/2012/07",
              false, true, e, x);
        }
      }

      // oadrSetPoint
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        if (i.oadrSetPoint ())
        {
          const oadrLoadControlStateType::oadrSetPoint_type& x (*i.oadrSetPoint ());
          if (typeid (oadrLoadControlStateType::oadrSetPoint_type) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "oadrSetPoint",
                "http://openadr.org/oadr-2.0b/2012/07",
                e));

            s << x;
          }
          else
            tsm.serialize (
              "oadrSetPoint",
              "http://openadr.org/oadr-2.0b/2012/07",
              false, true, e, x);
        }
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, oadrLoadControlStateType >
    _xsd_oadrLoadControlStateType_type_serializer_init (
      "oadrLoadControlStateType",
      "http://openadr.org/oadr-2.0b/2012/07");
  }
}

// Begin epilogue.
//
//
// End epilogue.

#include <xsd/cxx/post.hxx>

